{"version":3,"file":"index.js","sources":["../../../node_modules/iota-array/iota.js","../../../node_modules/is-buffer/index.js","../../../node_modules/ndarray/ndarray.js","../src/libs/worker-pool.ts","../src/libs/cull.ts","../src/core/world/clouds.ts","../src/utils/dom-utils.ts","../../aabb/dist/index.mjs","../src/core/world/block.ts","../src/utils/block-utils.ts","../../../node_modules/gl-vec3/epsilon.js","../../../node_modules/gl-vec3/create.js","../../../node_modules/gl-vec3/clone.js","../../../node_modules/gl-vec3/fromValues.js","../../../node_modules/gl-vec3/normalize.js","../../../node_modules/gl-vec3/dot.js","../../../node_modules/gl-vec3/angle.js","../../../node_modules/gl-vec3/copy.js","../../../node_modules/gl-vec3/set.js","../../../node_modules/gl-vec3/equals.js","../../../node_modules/gl-vec3/exactEquals.js","../../../node_modules/gl-vec3/add.js","../../../node_modules/gl-vec3/subtract.js","../../../node_modules/gl-vec3/sub.js","../../../node_modules/gl-vec3/multiply.js","../../../node_modules/gl-vec3/mul.js","../../../node_modules/gl-vec3/divide.js","../../../node_modules/gl-vec3/div.js","../../../node_modules/gl-vec3/min.js","../../../node_modules/gl-vec3/max.js","../../../node_modules/gl-vec3/floor.js","../../../node_modules/gl-vec3/ceil.js","../../../node_modules/gl-vec3/round.js","../../../node_modules/gl-vec3/scale.js","../../../node_modules/gl-vec3/scaleAndAdd.js","../../../node_modules/gl-vec3/distance.js","../../../node_modules/gl-vec3/dist.js","../../../node_modules/gl-vec3/squaredDistance.js","../../../node_modules/gl-vec3/sqrDist.js","../../../node_modules/gl-vec3/length.js","../../../node_modules/gl-vec3/len.js","../../../node_modules/gl-vec3/squaredLength.js","../../../node_modules/gl-vec3/sqrLen.js","../../../node_modules/gl-vec3/negate.js","../../../node_modules/gl-vec3/inverse.js","../../../node_modules/gl-vec3/cross.js","../../../node_modules/gl-vec3/lerp.js","../../../node_modules/gl-vec3/random.js","../../../node_modules/gl-vec3/transformMat4.js","../../../node_modules/gl-vec3/transformMat3.js","../../../node_modules/gl-vec3/transformQuat.js","../../../node_modules/gl-vec3/rotateX.js","../../../node_modules/gl-vec3/rotateY.js","../../../node_modules/gl-vec3/rotateZ.js","../../../node_modules/gl-vec3/forEach.js","../../../node_modules/gl-vec3/index.js","../src/utils/chunk-utils.ts","../src/utils/light-utils.ts","../src/utils/math-utils.ts","../src/libs/canvas-box.ts","../src/core/world/sky.ts","../src/libs/arrow.ts","../src/libs/color-text.ts","../src/libs/sprite-text.ts","../src/libs/nametag.ts","../src/libs/character.ts","../src/libs/debug.ts","../src/libs/effects/block-overlay.ts","../src/libs/shadows.ts","../src/libs/effects/light-shined.ts","../../../node_modules/deepmerge/dist/cjs.js","../src/common.ts","../src/libs/item-slots.ts","../src/libs/perspective.ts","../src/libs/portrait.ts","../src/libs/setWorkerTimeout.ts","../src/libs/requestWorkerAnimationFrame.ts","../src/libs/setWorkerInterval.ts","../src/libs/shared-worker-pool.ts","../src/libs/voxel-interact.ts","../src/libs/hud.ts","../src/core/peers.ts","../../transport/src/utils/encode-object-to-struct.ts","../src/core/events.ts","../src/core/entities.ts","../../../node_modules/events/events.js","../src/core/controls.ts","../../physics-engine/dist/index.mjs","../../raycast/dist/index.mjs","../src/core/world/raw-chunk.ts","../src/core/world/chunk.ts","../src/core/world/chunks.ts","../../../node_modules/omggif/omggif.js","../src/core/world/loader.ts","../src/core/world/registry.ts","../src/core/world/shaders.ts","../src/core/world/textures.ts","../src/core/world/index.ts","../../../node_modules/@protobufjs/aspromise/index.js","../../../node_modules/@protobufjs/base64/index.js","../../../node_modules/@protobufjs/eventemitter/index.js","../../../node_modules/@protobufjs/float/index.js","../../../node_modules/@protobufjs/inquire/index.js","../../../node_modules/@protobufjs/utf8/index.js","../../../node_modules/@protobufjs/pool/index.js","../../../node_modules/protobufjs/src/util/longbits.js","../../../node_modules/protobufjs/src/util/minimal.js","../../../node_modules/protobufjs/src/writer.js","../../../node_modules/protobufjs/src/writer_buffer.js","../../../node_modules/protobufjs/src/reader.js","../../../node_modules/protobufjs/src/reader_buffer.js","../../../node_modules/protobufjs/src/rpc/service.js","../../../node_modules/protobufjs/src/rpc.js","../../../node_modules/protobufjs/src/roots.js","../../../node_modules/protobufjs/src/index-minimal.js","../../../node_modules/protobufjs/minimal.js","../../transport/src/protocol.js","../../../node_modules/domurl/url.min.js","../src/core/network/index.ts","../src/core/chat.ts","../../../node_modules/uuid/dist/esm-browser/rng.js","../../../node_modules/uuid/dist/esm-browser/regex.js","../../../node_modules/uuid/dist/esm-browser/validate.js","../../../node_modules/uuid/dist/esm-browser/stringify.js","../../../node_modules/uuid/dist/esm-browser/v4.js","../src/core/inputs.ts","../src/core/method.ts"],"sourcesContent":["\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","/**\n * A worker pool job is queued to a worker pool and is executed by a worker.\n */\nexport type WorkerPoolJob = {\n  /**\n   * A JSON serializable object that is passed to the worker.\n   */\n  message: any;\n\n  /**\n   * Any array buffers (transferable) that are passed to the worker.\n   */\n  buffers?: ArrayBufferLike[];\n\n  /**\n   * A callback that is called when the worker has finished executing the job.\n   *\n   * @param value The result of the job.\n   */\n  resolve: (value: any) => void;\n};\n\n/**\n * Parameters to create a worker pool.\n */\nexport type WorkerPoolOptions = {\n  /**\n   * The maximum number of workers to create. Defaults to `8`.\n   */\n  maxWorker: number;\n};\n\nconst defaultOptions: WorkerPoolOptions = {\n  maxWorker: 8,\n};\n\n/**\n * A pool of web workers that can be used to execute jobs. The pool will create\n * workers up to the maximum number of workers specified in the options.\n * When a job is queued, the pool will find the first available worker and\n * execute the job. If no workers are available, the job will be queued until\n * a worker becomes available.\n */\nexport class WorkerPool {\n  /**\n   * The queue of jobs that are waiting to be executed.\n   */\n  public queue: WorkerPoolJob[] = [];\n\n  /**\n   * A static count of working web workers across all worker pools.\n   */\n  static WORKING_COUNT = 0;\n\n  /**\n   * The list of workers in the pool.\n   */\n  private workers: Worker[] = [];\n\n  /**\n   * The list of available workers' indices.\n   */\n  private available: number[] = [];\n\n  /**\n   * Create a new worker pool.\n   *\n   * @param Proto The worker class to create.\n   * @param options The options to create the worker pool.\n   */\n  constructor(\n    public Proto: new () => Worker,\n    public options: WorkerPoolOptions = defaultOptions\n  ) {\n    const { maxWorker } = options;\n\n    for (let i = 0; i < maxWorker; i++) {\n      const worker = new Proto();\n      this.workers.push(worker);\n      this.available.push(i);\n    }\n  }\n\n  /**\n   * Append a new job to be executed by a worker.\n   *\n   * @param job The job to queue.\n   */\n  addJob = (job: WorkerPoolJob) => {\n    this.queue.push(job);\n    this.process();\n  };\n\n  postMessage = (message: any, buffers?: ArrayBufferLike[]) => {\n    for (const worker of this.workers) {\n      worker.postMessage(message, buffers);\n    }\n  };\n\n  /**\n   * Process the queue of jobs. This is called when a worker becomes available or\n   * when a new job is added to the queue.\n   */\n  private process = () => {\n    if (this.queue.length !== 0 && this.available.length > 0) {\n      const index = this.available.pop() as number;\n      const worker = this.workers[index];\n\n      const { message, buffers, resolve } = this.queue.shift() as WorkerPoolJob;\n\n      worker.postMessage(message, buffers);\n      WorkerPool.WORKING_COUNT++;\n\n      const workerCallback = ({ data }: any) => {\n        WorkerPool.WORKING_COUNT--;\n        worker.removeEventListener(\"message\", workerCallback);\n        this.available.unshift(index);\n        resolve(data);\n        if (this.queue.length > 0) {\n          setTimeout(this.process, 0);\n        }\n      };\n\n      worker.addEventListener(\"message\", workerCallback);\n    }\n  };\n\n  /**\n   * Whether or not are there no available workers.\n   */\n  get isBusy() {\n    return this.available.length <= 0;\n  }\n\n  /**\n   * The number of workers that are simultaneously working.\n   */\n  get workingCount() {\n    return this.workers.length - this.available.length;\n  }\n}\n","import { NdArray } from \"ndarray\";\nimport CullWorker from \"web-worker:./workers/cull-worker.ts\";\n\nimport { Coords3 } from \"../types\";\n\nimport { WorkerPool } from \"./worker-pool\";\n\nexport type MeshResultType = {\n  positions: Float32Array;\n  normals: Float32Array;\n  indices: Float32Array;\n};\n\nexport type CullOptionsType = {\n  min: Coords3;\n  max: Coords3;\n  realMin: Coords3;\n  realMax: Coords3;\n  dimensions: Coords3;\n};\n\nconst cullPool = new WorkerPool(CullWorker, {\n  maxWorker: 2,\n});\n\nexport async function cull(\n  array: NdArray,\n  options: CullOptionsType\n): Promise<MeshResultType> {\n  const { stride, data } = array;\n  const { dimensions, min, max, realMin, realMax } = options;\n\n  return new Promise<MeshResultType>((resolve) => {\n    cullPool.addJob({\n      message: {\n        data,\n        configs: {\n          min,\n          max,\n          dimensions,\n          stride,\n          realMin,\n          realMax,\n        },\n      },\n      resolve,\n      buffers: [(<Uint8Array>data).buffer.slice(0)],\n    });\n  });\n}\n","import ndarray from \"ndarray\";\nimport {\n  BufferGeometry,\n  Clock,\n  Color,\n  Float32BufferAttribute,\n  FrontSide,\n  Group,\n  Int8BufferAttribute,\n  Mesh,\n  ShaderMaterial,\n  Vector3,\n} from \"three\";\nimport CloudWorker from \"web-worker:./workers/clouds-worker.ts\";\n\nimport { cull } from \"../../libs/cull\";\nimport { WorkerPool } from \"../../libs/worker-pool\";\nimport CloudsFragmentShader from \"../../shaders/clouds/fragment.glsl\";\nimport CloudsVertexShader from \"../../shaders/clouds/vertex.glsl\";\nimport { Coords2, Coords3 } from \"../../types\";\n\n/**\n * Parameters used to create a new {@link Clouds} instance.\n */\nexport type CloudsOptions = {\n  /**\n   * The scale of the noise used to generate the clouds. Defaults to `0.08`.\n   */\n  noiseScale: number;\n\n  /**\n   * The horizontal count of how many cloud blocks are in a cloud cell. Defaults to `8`.\n   */\n  width: number;\n\n  /**\n   * The vertical count of how many cloud blocks are in a cloud cell. This is also\n   * used to determine the overall count of cloud blocks of all the clouds. Defaults to `3`.\n   */\n  height: number;\n\n  /**\n   * The y-height at which the clouds are generated. Defaults to `256`.\n   */\n  cloudHeight: number;\n\n  /**\n   * The dimension of each cloud block. Defaults to `[20, 20, 20]`.\n   */\n  dimensions: Coords3;\n\n  /**\n   * The threshold at which noise values are considered to be \"cloudy\" and should generate a new\n   * cloud block. Defaults to `0.05`.\n   */\n  threshold: number;\n\n  /**\n   * The lerp factor used to translate cloud blocks from their original position to their\n   * new position. Defaults to `0.3`.\n   */\n  lerpFactor: number;\n\n  /**\n   * The speed at which the clouds move. Defaults to `8`.\n   */\n  speedFactor: number;\n\n  /**\n   * The color of the clouds. Defaults to `#fff`.\n   */\n  color: string;\n\n  /**\n   * The opacity of the clouds. Defaults to `0.8`.\n   */\n  alpha: number;\n\n  /**\n   * The seed used to generate the clouds. Defaults to `-1`.\n   */\n  seed: number;\n\n  /**\n   * The number of cloud cells to generate, `count` * `count`. Defaults to `16`.\n   */\n  count: number;\n\n  /**\n   * The number of octaves used to generate the noise. Defaults to `5`.\n   */\n  octaves: number;\n\n  /**\n   * The noise falloff factor used to generate the clouds. Defaults to `0.9`.\n   */\n  falloff: number;\n\n  /**\n   * An object that is used as the uniform for the clouds fog near shader.\n   */\n  uFogNear?: {\n    value: number;\n  };\n\n  /**\n   * An object that is used as the uniform for the clouds fog far shader.\n   */\n  uFogFar?: {\n    value: number;\n  };\n\n  /**\n   * An object that is used as the uniform for the clouds fog color shader.\n   */\n  uFogColor?: {\n    value: Color;\n  };\n};\n\nconst defaultOptions: CloudsOptions = {\n  alpha: 0.8,\n  color: \"#fff\",\n  count: 16,\n  noiseScale: 0.08,\n  width: 8,\n  height: 3,\n  dimensions: [20, 20, 20],\n  speedFactor: 8,\n  lerpFactor: 0.3,\n  threshold: 0.05,\n  octaves: 5,\n  falloff: 0.9,\n  seed: -1,\n  cloudHeight: 256,\n};\n\n/**\n * A class that generates and manages clouds. Clouds are essentially a 2D grid of cells that contain further sub-grids of\n * cloud blocks. This 2D grid move altogether in the `+x` direction, and is generated at the start asynchronously using\n * web workers using simplex noise.\n *\n * When using {@link Clouds.update}, new clouds will be generated if the center of the grid\n * does not match the passed in position.\n *\n * ![Clouds](/img/docs/clouds.png)\n *\n * @noInheritDoc\n */\nexport class Clouds extends Group {\n  /**\n   * Parameters used to create a new {@link Clouds} instance.\n   */\n  public options: CloudsOptions;\n\n  /**\n   * Whether or not are the clouds done generating.\n   */\n  public isInitialized = false;\n\n  /**\n   * The shard shader material used to render the clouds.\n   */\n  public material: ShaderMaterial;\n\n  /**\n   * A 2D array of cloud meshes. The first dimension is the x-axis, and the second dimension is the z-axis.\n   */\n  public meshes: Mesh[][] = [];\n\n  /**\n   * The x-offset of the clouds since initialization. This is determined by diffing the `locatedCell` and the\n   * position passed into {@link Clouds.update}.\n   */\n  public xOffset = 0;\n\n  /**\n   * The z-offset of the clouds since initialization. This is determined by diffing the `locatedCell` and the\n   * position passed into {@link Clouds.update}.\n   */\n  public zOffset = 0;\n\n  /**\n   * The cell that this cloud is currently centered around.\n   */\n  public locatedCell: Coords2 = [0, 0];\n\n  /**\n   * The new position to lerp the clouds.\n   */\n  private newPosition = new Vector3();\n\n  /**\n   * The worker pool used to generate the clouds.\n   */\n  private pool = new WorkerPool(CloudWorker, {\n    maxWorker: 2,\n  });\n\n  /**\n   * A inner THREE.JS clock used to determine the time delta between frames.\n   */\n  private clock = new Clock();\n\n  /**\n   * Create a new {@link Clouds} instance, initializing it asynchronously automatically.\n   *\n   * @param options Parameters used to create a new {@link Clouds} instance.\n   */\n  constructor(options: Partial<CloudsOptions> = {}) {\n    super();\n\n    this.options = { ...defaultOptions, ...options };\n\n    const { seed, color, alpha, uFogNear, uFogFar, uFogColor } = this.options;\n\n    if (seed === -1) {\n      this.options.seed = Math.floor(Math.random() * 10230123);\n    }\n\n    this.material = new ShaderMaterial({\n      transparent: true,\n      vertexShader: CloudsVertexShader,\n      fragmentShader: CloudsFragmentShader,\n      side: FrontSide,\n      uniforms: {\n        uFogNear: uFogNear || { value: 500 },\n        uFogFar: uFogFar || { value: 1000 },\n        uFogColor: uFogColor || { value: new Color(\"#fff\") },\n        uCloudColor: {\n          value: new Color(color),\n        },\n        uCloudAlpha: {\n          value: alpha,\n        },\n      },\n    });\n\n    this.material.toneMapped = false;\n\n    this.initialize();\n  }\n\n  /**\n   * Reset the clouds to their initial state.\n   */\n  reset = async () => {\n    this.children.forEach((child: Mesh) => {\n      if (child.parent) {\n        child.parent.remove(child);\n        child.geometry?.dispose();\n      }\n    });\n\n    this.meshes.length = 0;\n\n    await this.initialize();\n  };\n\n  /**\n   * Move the clouds to centering around the passed in position. If there aren't enough cloud\n   * cells at any side, new clouds are generated.\n   *\n   * @param position The new position that this cloud should be centered around.\n   */\n  update = (position: Vector3) => {\n    if (!this.isInitialized) return;\n\n    // Normalize the delta\n    const delta = Math.min(0.1, this.clock.getDelta());\n\n    const { speedFactor, count, dimensions } = this.options;\n\n    this.newPosition = this.position.clone();\n    this.newPosition.z -= speedFactor * delta;\n\n    const locatedCell: Coords2 = [\n      Math.floor((position.x - this.position.x) / (count * dimensions[0])),\n      Math.floor((position.z - this.position.z) / (count * dimensions[2])),\n    ];\n\n    if (\n      this.locatedCell[0] !== locatedCell[0] ||\n      this.locatedCell[1] !== locatedCell[1]\n    ) {\n      const dx = locatedCell[0] - this.locatedCell[0];\n      const dz = locatedCell[1] - this.locatedCell[1];\n\n      this.locatedCell = locatedCell;\n\n      if (Math.abs(dx) > 1 || Math.abs(dz) > 1) {\n        this.reset();\n      } else {\n        if (dx) {\n          this.shiftX(dx);\n        }\n\n        if (dz) {\n          this.shiftZ(dz);\n        }\n      }\n    }\n\n    this.position.lerp(this.newPosition, this.options.lerpFactor);\n  };\n\n  /**\n   * Initialize the clouds asynchronously.\n   */\n  private initialize = async () => {\n    const { width } = this.options;\n    const [lx, lz] = this.locatedCell;\n\n    for (let x = 0; x < width; x++) {\n      const arr = [];\n\n      for (let z = 0; z < width; z++) {\n        const cell = await this.makeCell(x + lx, z + lz);\n        this.add(cell);\n        arr.push(cell);\n      }\n\n      this.meshes.push(arr);\n    }\n\n    this.isInitialized = true;\n  };\n\n  /**\n   * Generate a new cloud row in the `+/- x` direction.\n   */\n  private shiftX = async (direction = 1) => {\n    const { width } = this.options;\n\n    const arr = direction > 0 ? this.meshes.shift() : this.meshes.pop();\n\n    for (let z = 0; z < width; z++) {\n      await this.makeCell(\n        this.xOffset + (direction > 0 ? width : 0),\n        z + this.zOffset,\n        arr[z]\n      );\n    }\n\n    if (direction > 0) {\n      this.meshes.push(arr);\n    } else {\n      this.meshes.unshift(arr);\n    }\n\n    this.xOffset += direction;\n  };\n\n  /**\n   * Generate a new cloud row in the `+/- z` direction.\n   */\n  private shiftZ = async (direction = 1) => {\n    const { width } = this.options;\n\n    for (let x = 0; x < width; x++) {\n      const arr = this.meshes[x];\n      const cell = direction > 0 ? arr.shift() : arr.pop();\n\n      await this.makeCell(\n        x + this.xOffset,\n        this.zOffset + (direction > 0 ? width : 0),\n        cell\n      );\n\n      if (direction > 0) {\n        arr.push(cell);\n      } else {\n        arr.unshift(cell);\n      }\n    }\n\n    this.zOffset += direction;\n  };\n\n  /**\n   * Generate a new cloud cell's mesh.\n   *\n   * @param x The x position of the cell.\n   * @param z The z position of the cell.\n   * @param mesh The mesh to update.\n   * @returns The mesh that was generated.\n   */\n  private makeCell = async (x: number, z: number, mesh?: Mesh) => {\n    const {\n      width,\n      height,\n      count,\n      noiseScale,\n      seed,\n      threshold,\n      dimensions,\n      cloudHeight,\n      octaves,\n      falloff,\n    } = this.options;\n\n    const array = mesh\n      ? mesh.userData.data\n      : ndarray(new Uint8Array((count + 2) * height * (count + 2)), [\n          count + 2,\n          height,\n          count + 2,\n        ]);\n\n    const min = [x * count - 1, 0, z * count - 1];\n    const max = [(x + 1) * count + 1, height, (z + 1) * count + 1];\n\n    const data = await new Promise<any>((resolve) =>\n      this.pool.addJob({\n        message: {\n          data: array.data,\n          configs: {\n            min,\n            max,\n            noiseScale,\n            threshold,\n            stride: array.stride,\n            octaves,\n            falloff,\n            seed,\n          },\n        },\n        resolve,\n        buffers: [array.data.buffer.slice(0)],\n      })\n    );\n\n    array.data = data;\n\n    const { positions, indices, normals } = await cull(array, {\n      dimensions,\n      min: [1, 0, 1],\n      max: [count + 1, height, count + 1],\n      realMin: [0, 0, 0],\n      realMax: [count + 2, height, count + 2],\n    });\n\n    const geometry = mesh ? mesh.geometry : new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    geometry.setAttribute(\"normal\", new Int8BufferAttribute(normals, 3));\n    geometry.setIndex(Array.from(indices));\n    geometry.computeBoundingBox();\n\n    mesh = mesh || new Mesh(geometry, this.material);\n\n    mesh.position.setX((-width / 2 + x) * count * dimensions[0]);\n    mesh.position.setY(cloudHeight);\n    mesh.position.setZ((-width / 2 + z) * count * dimensions[2]);\n    mesh.userData.data = array;\n    mesh.renderOrder = -1;\n\n    return mesh;\n  };\n}\n","/**\n * A utility class for doing DOM manipulation.\n *\n * @category Utils\n */\nexport class DOMUtils {\n  /**\n   * Apply styles directly onto DOM element(s).\n   *\n   * @param ele The element(s) to add styles to.\n   * @param style The style(s) to add.\n   * @returns The element(s) with the added styles.\n   */\n  static applyStyles = (\n    ele: HTMLElement | HTMLElement[] | undefined,\n    style: Partial<CSSStyleDeclaration>\n  ) => {\n    if (!ele) return;\n\n    Object.keys(style).forEach((key: string) => {\n      // @ts-ignore\n      const attribute = style[key];\n      if (Array.isArray(ele)) {\n        ele.forEach((e: any) => (e.style[key] = attribute));\n      } else {\n        // @ts-ignore\n        ele.style[key] = attribute;\n      }\n    });\n\n    return ele;\n  };\n\n  /**\n   * Create a CSS color string from numbers.\n   *\n   * @param r Red channel\n   * @param g Green channel\n   * @param b Blue channel\n   * @param a Alpha channel\n   * @returns A CSS color string\n   */\n  static rgba = (r: number, g: number, b: number, a: number) => {\n    return `rgba(${r * 255}, ${g * 255}, ${b * 255}, ${a})`;\n  };\n\n  private constructor() {\n    // NOTHING\n  }\n}\n","// src/index.ts\nvar _AABB = class {\n  constructor(minX, minY, minZ, maxX, maxY, maxZ) {\n    this.minX = minX;\n    this.minY = minY;\n    this.minZ = minZ;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    this.maxZ = maxZ;\n    this.getMin = (axis) => {\n      if (axis === 0) {\n        return this.minX;\n      } else if (axis === 1) {\n        return this.minY;\n      } else if (axis === 2) {\n        return this.minZ;\n      } else {\n        throw new Error(\"GetMinError: Unknown axis.\");\n      }\n    };\n    this.setMin = (axis, value) => {\n      if (axis === 0) {\n        this.minX = value;\n      } else if (axis === 1) {\n        this.minY = value;\n      } else if (axis === 2) {\n        this.minZ = value;\n      } else {\n        throw new Error(\"SetMinError: Unknown axis.\");\n      }\n    };\n    this.getMax = (axis) => {\n      if (axis === 0) {\n        return this.maxX;\n      } else if (axis === 1) {\n        return this.maxY;\n      } else if (axis === 2) {\n        return this.maxZ;\n      } else {\n        throw new Error(\"GetMaxError: Unknown axis.\");\n      }\n    };\n    this.setMax = (axis, value) => {\n      if (axis === 0) {\n        this.maxX = value;\n      } else if (axis === 1) {\n        this.maxY = value;\n      } else if (axis === 2) {\n        this.maxZ = value;\n      } else {\n        throw new Error(\"SetMaxError: Unknown axis.\");\n      }\n    };\n    this.translate = ([dx, dy, dz]) => {\n      this.minX += dx;\n      this.minY += dy;\n      this.minZ += dz;\n      this.maxX += dx;\n      this.maxY += dy;\n      this.maxZ += dz;\n      return this;\n    };\n    this.translateAxis = (axis, delta) => {\n      if (axis === 0) {\n        this.minX += delta;\n        this.maxX += delta;\n      } else if (axis === 1) {\n        this.minY += delta;\n        this.maxY += delta;\n      } else if (axis === 2) {\n        this.minZ += delta;\n        this.maxZ += delta;\n      } else {\n        throw new Error(\"TranslateAxisError: Unknown axis.\");\n      }\n      return this;\n    };\n    this.setPosition = ([px, py, pz]) => {\n      this.maxX = px + this.width;\n      this.maxY = py + this.height;\n      this.maxZ = pz + this.depth;\n      this.minX = px;\n      this.minY = py;\n      this.minZ = pz;\n      return this;\n    };\n    this.intersects = (aabb) => {\n      if (aabb.minX >= this.maxX)\n        return false;\n      if (aabb.minY >= this.maxY)\n        return false;\n      if (aabb.minZ >= this.maxZ)\n        return false;\n      if (aabb.maxX <= this.minX)\n        return false;\n      if (aabb.maxY <= this.minY)\n        return false;\n      if (aabb.maxZ <= this.minZ)\n        return false;\n      return true;\n    };\n    this.touches = (aabb) => {\n      const intersection = this.intersection(aabb);\n      return intersection !== null && (intersection.width === 0 || intersection.height === 0 || intersection.depth === 0);\n    };\n    this.union = (aabb) => {\n      return new _AABB(\n        Math.min(this.minX, aabb.minX),\n        Math.min(this.minY, aabb.minY),\n        Math.min(this.minZ, aabb.minZ),\n        Math.max(this.maxX, aabb.maxX),\n        Math.max(this.maxY, aabb.maxY),\n        Math.max(this.maxZ, aabb.maxZ)\n      );\n    };\n    this.intersection = (aabb) => {\n      return new _AABB(\n        Math.max(this.minX, aabb.minX),\n        Math.max(this.minY, aabb.minY),\n        Math.max(this.minZ, aabb.minZ),\n        Math.min(this.maxX, aabb.maxX),\n        Math.min(this.maxY, aabb.maxY),\n        Math.min(this.maxZ, aabb.maxZ)\n      );\n    };\n    this.clone = () => {\n      return new _AABB(\n        this.minX,\n        this.minY,\n        this.minZ,\n        this.maxX,\n        this.maxY,\n        this.maxZ\n      );\n    };\n  }\n  get width() {\n    return this.maxX - this.minX;\n  }\n  get height() {\n    return this.maxY - this.minY;\n  }\n  get depth() {\n    return this.maxZ - this.minZ;\n  }\n  get mag() {\n    return Math.sqrt(\n      (this.maxX - this.minX) ** 2 + (this.maxY - this.minY) ** 2 + (this.maxZ - this.minZ) ** 2\n    );\n  }\n  computeOffsetX(aabb, deltaX) {\n    const intersection = this.intersection(aabb);\n    if (intersection.height <= 0 || intersection.depth <= 0) {\n      return deltaX;\n    }\n    if (intersection.width >= 0) {\n      return 0;\n    }\n    if (deltaX > 0 && aabb.minX >= this.maxX) {\n      return Math.min(aabb.minX - this.maxX, deltaX);\n    }\n    if (deltaX < 0 && aabb.maxX <= this.minX) {\n      return Math.max(aabb.maxX - this.minX, deltaX);\n    }\n    return deltaX;\n  }\n  computeOffsetY(aabb, deltaY) {\n    const intersection = this.intersection(aabb);\n    if (intersection.width <= 0 || intersection.depth <= 0) {\n      return deltaY;\n    }\n    if (intersection.height >= 0) {\n      return 0;\n    }\n    if (deltaY > 0 && aabb.minY >= this.maxY) {\n      return Math.min(aabb.minY - this.maxY, deltaY);\n    }\n    if (deltaY < 0 && aabb.maxY <= this.minY) {\n      return Math.max(aabb.maxY - this.minY, deltaY);\n    }\n    return deltaY;\n  }\n  computeOffsetZ(aabb, deltaZ) {\n    const intersection = this.intersection(aabb);\n    if (intersection.width <= 0 || intersection.height <= 0) {\n      return deltaZ;\n    }\n    if (intersection.depth >= 0) {\n      return 0;\n    }\n    if (deltaZ > 0 && aabb.minZ >= this.maxZ) {\n      return Math.min(aabb.minZ - this.maxZ, deltaZ);\n    }\n    if (deltaZ < 0 && aabb.maxZ <= this.minZ) {\n      return Math.max(aabb.maxZ - this.minZ, deltaZ);\n    }\n    return deltaZ;\n  }\n};\nvar AABB = _AABB;\nAABB.union = (all) => {\n  let minX = all[0].minX;\n  let minY = all[0].minY;\n  let minZ = all[0].minZ;\n  let maxX = all[0].maxX;\n  let maxY = all[0].maxY;\n  let maxZ = all[0].maxZ;\n  for (const aabb of all) {\n    minX = Math.min(minX, aabb.minX);\n    minY = Math.min(minY, aabb.minY);\n    minZ = Math.min(minZ, aabb.minZ);\n    maxX = Math.max(maxX, aabb.maxX);\n    maxY = Math.max(maxY, aabb.maxY);\n    maxZ = Math.max(maxZ, aabb.maxZ);\n  }\n  return new _AABB(minX, minY, minZ, maxX, maxY, maxZ);\n};\nexport {\n  AABB\n};\n","import { AABB } from \"@voxelize/aabb\";\n\nimport { Coords3 } from \"../../types\";\n\nimport { UV } from \"./uv\";\n\nexport type BlockSimpleRule = {\n  offset: Coords3;\n  id?: number;\n  rotation?: BlockRotation;\n  stage?: number;\n};\n\nexport enum BlockRuleLogic {\n  And = \"and\",\n  Or = \"or\",\n  Not = \"not\",\n  // Add more logic types as needed\n}\n\nexport type BlockRule =\n  | { type: \"none\" }\n  | ({ type: \"simple\" } & BlockSimpleRule)\n  | { type: \"combination\"; logic: BlockRuleLogic; rules: BlockRule[] };\n\nexport interface BlockConditionalPart {\n  rule: BlockRule;\n  faces: Block[\"faces\"];\n  aabbs: Block[\"aabbs\"];\n  isTransparent: Block[\"isTransparent\"];\n}\n\nexport interface BlockDynamicPattern {\n  parts: BlockConditionalPart[];\n}\n\n/**\n * A block type in the world. This is defined by the server.\n */\nexport type Block = {\n  /**\n   * The block id.\n   */\n  id: number;\n\n  /**\n   * The name of the block.\n   */\n  name: string;\n\n  /**\n   * The red light level of the block.\n   */\n  redLightLevel: number;\n\n  /**\n   * The green light level of the block.\n   */\n  greenLightLevel: number;\n\n  /**\n   * The blue light level of the block.\n   */\n  blueLightLevel: number;\n\n  /**\n   * Whether or not is the block rotatable.\n   */\n  rotatable: boolean;\n\n  /**\n   * Whether or not the block is rotatable around the y-axis (has to face either PX or NX).\n   */\n  yRotatable: boolean;\n\n  /**\n   * Whether or not is this block empty. By default, only \"air\" is empty.\n   */\n  isEmpty: boolean;\n\n  /**\n   * Whether or not is the block a fluid block.\n   */\n  isFluid: boolean;\n\n  /**\n   * Whether or not is this block a light source.\n   */\n  isLight: boolean;\n\n  /**\n   * Whether or not should physics ignore this block.\n   */\n  isPassable: boolean;\n\n  /**\n   * Whether or not is this block opaque (not transparent).\n   */\n  isOpaque: boolean;\n\n  /**\n   * Whether or not is this block see-through (can be opaque and see-through at the same time).\n   */\n  isSeeThrough: boolean;\n\n  /**\n   * Whether or not is this block transparent viewing from all six sides. The sides\n   * are defined as PX, PY, PZ, NX, NY, NZ.\n   */\n  isTransparent: [boolean, boolean, boolean, boolean, boolean, boolean];\n\n  transparentStandalone: boolean;\n\n  /**\n   * A list of block face data that this block has.\n   */\n  faces: {\n    corners: { pos: [number, number, number]; uv: number[] }[];\n    dir: [number, number, number];\n    independent: boolean;\n    isolated: boolean;\n    range: UV;\n    name: string;\n  }[];\n\n  /**\n   * A list of axis-aligned bounding boxes that this block has.\n   */\n  aabbs: AABB[];\n\n  /**\n   * Whether or not should light reduce by 1 going through this block.\n   */\n  lightReduce: boolean;\n\n  /**\n   * Whether or not does the block generate dynamic faces or AABB's. If this is true, the block will use\n   * `dynamicFn` to generate the faces and AABB's.\n   */\n  isDynamic: boolean;\n\n  dynamicPatterns: BlockDynamicPattern[];\n\n  /**\n   * If this block is dynamic, this function will be called to generate the faces and AABB's. By default, this\n   * just returns the faces and AABB's that are defined in the block data.\n   *\n   * @param pos The position of the block.\n   * @param world The world instance.\n   * @returns The dynamic faces and AABB's of the block.\n   */\n  dynamicFn: (pos: Coords3) => {\n    faces: Block[\"faces\"];\n    aabbs: Block[\"aabbs\"];\n    isTransparent: Block[\"isTransparent\"];\n  };\n\n  /**\n   * A set of block face names that are independent (high resolution or animated). This is generated on the client side.\n   */\n  independentFaces: Set<string>;\n\n  isolatedFaces: Set<string>;\n\n  isEntity: boolean;\n};\n\n/**\n * A block update to make on the server.\n */\nexport type BlockUpdate = {\n  /**\n   * The voxel x-coordinate.\n   */\n  vx: number;\n\n  /**\n   * The voxel y-coordinate.\n   */\n  vy: number;\n\n  /**\n   * The voxel z-coordinate.\n   */\n  vz: number;\n\n  /**\n   * The voxel type.\n   */\n  type: number;\n\n  /**\n   * The optional rotation of the updated block.\n   */\n  rotation?: number;\n\n  /**\n   * The optional y-rotation of the updated block.\n   */\n  yRotation?: number;\n};\n\nexport type BlockUpdateWithSource = {\n  update: BlockUpdate;\n  source: \"client\" | \"server\";\n};\n\n/**\n * The numerical representation of the positive Y rotation.\n */\nexport const PY_ROTATION = 0;\n\n/**\n * The numerical representation of the negative Y rotation.\n */\nexport const NY_ROTATION = 1;\n\n/**\n * The numerical representation of the positive X rotation.\n */\nexport const PX_ROTATION = 2;\n\n/**\n * The numerical representation of the negative X rotation.\n */\nexport const NX_ROTATION = 3;\n\n/**\n * The numerical representation of the positive Z rotation.\n */\nexport const PZ_ROTATION = 4;\n\n/**\n * The numerical representation of the negative Z rotation.\n */\nexport const NZ_ROTATION = 5;\n\n/**\n * The amount of Y-rotation segments should be allowed for y-rotatable blocks. In other words,\n * the amount of times the block can be rotated around the y-axis within 360 degrees.\n *\n * The accepted Y-rotation values will be from `0` to `Y_ROTATION_SEGMENTS - 1`.\n */\nexport const Y_ROT_SEGMENTS = 16;\n\n/**\n * A rotational map used to get the closest y-rotation representation to a y-rotation value.\n */\nexport const Y_ROT_MAP = [];\n\nfor (let i = 0; i < Y_ROT_SEGMENTS; i++) {\n  Y_ROT_MAP.push([(i / Y_ROT_SEGMENTS) * Math.PI * 2, i]);\n  Y_ROT_MAP.push([(i / Y_ROT_SEGMENTS) * Math.PI * 2 - Math.PI * 2, i]);\n}\n\nconst PI = Math.PI;\nconst PI_2 = Math.PI / 2.0;\n\n/**\n * A block rotation consists of two rotations: one is the axis this block is pointing towards,\n * and the other is the rotation around that axis (y-rotation). Y-rotation is only applicable\n * to the positive and negative x-axis.\n */\nexport class BlockRotation {\n  /**\n   * The axis this block is pointing towards.\n   */\n  public value: number;\n\n  /**\n   * The rotation around the axis this block is pointing towards, rounded to the nearest\n   * (360 / 16) degrees.\n   */\n  public yRotation: number;\n\n  /**\n   * Create a new block rotation.\n   *\n   * @param value The axis this block is pointing towards.\n   * @param yRotation The rotation around the axis this block is pointing towards, rounded to the nearest (360 / 16) degrees.\n   */\n  constructor(value = PY_ROTATION, yRotation = 0) {\n    this.value = value;\n    this.yRotation = yRotation;\n  }\n\n  /**\n   * Encode two rotations into a new block rotation instance.\n   *\n   * @param value The axis this block is pointing towards.\n   * @param yRotation The rotation around the axis this block is pointing towards.\n   * @returns A new block rotation.\n   */\n  static encode = (value: number, yRotation = 0) => {\n    const yEncoded = (yRotation * Math.PI * 2.0) / Y_ROT_SEGMENTS;\n    return new BlockRotation(value, yEncoded);\n  };\n\n  /**\n   * Decode a block rotation into two rotations.\n   *\n   * @param rotation The block rotation to decode.\n   * @returns Two values, the first is the axis this block is pointing towards, and\n   *   the second is the rotation around that axis.\n   */\n  static decode = (rotation: BlockRotation) => {\n    const value = rotation.value;\n    const yDecoded =\n      Math.round((rotation.yRotation * Y_ROT_SEGMENTS) / (Math.PI * 2.0)) %\n      Y_ROT_SEGMENTS;\n\n    return [value, yDecoded];\n  };\n\n  /**\n   * Rotate a 3D coordinate by this block rotation.\n   *\n   * @param node A 3D coordinate in the form of [x, y, z] to be rotated by this block rotation.\n   * @param yRotate Whether or not should the y-rotation be applied.\n   * @param translate Whether or not should the translation be applied.\n   */\n  public rotateNode = (node: Coords3, yRotate = true, translate = true) => {\n    if (yRotate && this.yRotation !== 0) {\n      node[0] -= 0.5;\n      node[2] -= 0.5;\n      BlockRotation.rotateY(node, this.yRotation);\n      node[0] += 0.5;\n      node[2] += 0.5;\n    }\n\n    switch (this.value) {\n      case PX_ROTATION: {\n        BlockRotation.rotateZ(node, -PI_2);\n        if (translate) node[1] += 1;\n        break;\n      }\n      case NX_ROTATION: {\n        BlockRotation.rotateZ(node, PI_2);\n        if (translate) node[0] += 1;\n        break;\n      }\n      case PY_ROTATION: {\n        break;\n      }\n      case NY_ROTATION: {\n        BlockRotation.rotateX(node, PI);\n        if (translate) {\n          node[1] += 1;\n          node[2] += 1;\n        }\n        break;\n      }\n      case PZ_ROTATION: {\n        BlockRotation.rotateX(node, PI_2);\n        if (translate) node[1] += 1;\n        break;\n      }\n      case NZ_ROTATION: {\n        BlockRotation.rotateX(node, -PI_2);\n        if (translate) node[2] += 1;\n        break;\n      }\n    }\n  };\n\n  /**\n   * Rotate an axis aligned bounding box by this block rotation, recalculating the new\n   * maximum and minimum coordinates to this AABB.\n   *\n   * @param aabb The axis aligned bounding box to be rotated.\n   * @param yRotate Whether or not should the y-rotation be applied.\n   * @param translate Whether or not should the translation be applied.\n   * @returns A new axis aligned bounding box.\n   */\n  public rotateAABB = (aabb: AABB, yRotate = true, translate = true) => {\n    const min = [aabb.minX, aabb.minY, aabb.minZ] as Coords3;\n    const max = [aabb.maxX, aabb.maxY, aabb.maxZ] as Coords3;\n\n    let minX = null;\n    let minZ = null;\n    let maxX = null;\n    let maxZ = null;\n\n    if (yRotate && this.yRotation !== 0) {\n      const min1 = [aabb.minX, aabb.minY, aabb.minZ];\n      const min2 = [aabb.minX, aabb.minY, aabb.maxZ];\n      const min3 = [aabb.maxX, aabb.minY, aabb.minZ];\n      const min4 = [aabb.maxX, aabb.minY, aabb.maxZ];\n\n      [min1, min2, min3, min4].forEach((min) => {\n        this.rotateNode(min as Coords3, true, true);\n        minX = minX === null ? min[0] : Math.min(minX, min[0]);\n        minZ = minZ === null ? min[2] : Math.min(minZ, min[2]);\n      });\n\n      const max1 = [aabb.minX, aabb.maxY, aabb.minZ];\n      const max2 = [aabb.minX, aabb.maxY, aabb.maxZ];\n      const max3 = [aabb.maxX, aabb.maxY, aabb.minZ];\n      const max4 = [aabb.maxX, aabb.maxY, aabb.maxZ];\n\n      [max1, max2, max3, max4].forEach((max) => {\n        this.rotateNode(max as Coords3, true, true);\n        maxX = maxX === null ? max[0] : Math.max(maxX, max[0]);\n        maxZ = maxZ === null ? max[2] : Math.max(maxZ, max[2]);\n      });\n    }\n\n    this.rotateNode(min, yRotate, translate);\n    this.rotateNode(max, yRotate, translate);\n\n    const EPSILON = 0.0001;\n    const justify = (num: number) => (num < EPSILON ? 0 : num);\n\n    min[0] = justify(min[0]);\n    min[1] = justify(min[1]);\n    min[2] = justify(min[2]);\n    max[0] = justify(max[0]);\n    max[1] = justify(max[1]);\n    max[2] = justify(max[2]);\n\n    const realMin = [\n      minX !== null ? justify(minX) : Math.min(min[0], max[0]),\n      Math.min(min[1], max[1]),\n      minZ !== null ? justify(minZ) : Math.min(min[2], max[2]),\n    ];\n\n    const realMax = [\n      maxX !== null ? justify(maxX) : Math.max(min[0], max[0]),\n      Math.max(min[1], max[1]),\n      maxZ !== null ? justify(maxZ) : Math.max(min[2], max[2]),\n    ];\n\n    return new AABB(\n      realMin[0],\n      realMin[1],\n      realMin[2],\n      realMax[0],\n      realMax[1],\n      realMax[2]\n    );\n  };\n\n  public rotateTransparency([px, py, pz, nx, ny, nz]: [\n    boolean,\n    boolean,\n    boolean,\n    boolean,\n    boolean,\n    boolean\n  ]) {\n    const rot = this.value;\n\n    if (Math.abs(rot) < Number.EPSILON) {\n      return [px, py, pz, nx, ny, nz];\n    }\n\n    const positive = [1.0, 2.0, 3.0];\n    const negative = [4.0, 5.0, 6.0];\n\n    this.rotateNode(positive as Coords3, true, false);\n    this.rotateNode(negative as Coords3, true, false);\n\n    const p = positive.map((n) => {\n      if (n === 1.0) return px;\n      if (n === 2.0) return py;\n      if (n === 3.0) return pz;\n      if (n === 4.0) return nx;\n      if (n === 5.0) return ny;\n      return nz;\n    });\n\n    const n = negative.map((n) => {\n      if (n === 1.0) return px;\n      if (n === 2.0) return py;\n      if (n === 3.0) return pz;\n      if (n === 4.0) return nx;\n      if (n === 5.0) return ny;\n      return nz;\n    });\n\n    return [p[0], p[1], p[2], n[0], n[1], n[2]];\n  }\n\n  // Reference:\n  // https://www.khanacademy.org/computer-programming/cube-rotated-around-x-y-and-z/4930679668473856\n\n  /**\n   * Rotate a 3D coordinate around the X axis.\n   */\n  private static rotateX = (node: Coords3, theta: number) => {\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    const [, y, z] = node;\n\n    node[1] = y * cosTheta - z * sinTheta;\n    node[2] = z * cosTheta + y * sinTheta;\n  };\n\n  /**\n   * Rotate a 3D coordinate around the Y axis.\n   */\n  private static rotateY = (node: Coords3, theta: number) => {\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    const [x, , z] = node;\n\n    node[0] = x * cosTheta + z * sinTheta;\n    node[2] = z * cosTheta - x * sinTheta;\n  };\n\n  /**\n   * Rotate a 3D coordinate around the Z axis.\n   */\n  private static rotateZ = (node: Coords3, theta: number) => {\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    const [x, y] = node;\n\n    node[0] = x * cosTheta - y * sinTheta;\n    node[1] = y * cosTheta + x * sinTheta;\n  };\n}\n","import { Coords3 } from \"types\";\n\nimport {\n  Block,\n  BlockRotation,\n  BlockRule,\n  BlockRuleLogic,\n} from \"../core/world/block\";\n\nimport { LightColor } from \"./light-utils\";\n\nconst ROTATION_MASK = 0xfff0ffff;\nconst Y_ROTATION_MASK = 0xff0fffff;\nconst STAGE_MASK = 0xf0ffffff;\n\n/**\n * A utility class for extracting and inserting voxel data from and into numbers.\n *\n * The voxel data is stored in the following format:\n * - Voxel type: `0x0000ffff`\n * - Rotation: `0x000f0000`\n * - Y-rotation: `0x00f00000`\n * - Stage: `0xff000000`\n *\n * TODO-DOCS\n * For more information about voxel data, see [here](/)\n *\n * # Example\n * ```ts\n * // Insert a voxel type 13 into zero.\n * const number = VoxelUtils.insertID(0, 13);\n * ```\n *\n * @category Utils\n */\nexport class BlockUtils {\n  /**\n   * Extract the voxel id from a number.\n   *\n   * @param voxel The voxel value to extract from.\n   * @returns The extracted voxel id.\n   */\n  static extractID = (voxel: number) => {\n    return voxel & 0xffff;\n  };\n\n  /**\n   * Insert a voxel id into a number.\n   *\n   * @param voxel The voxel value to insert the id into.\n   * @param id The voxel id to insert.\n   * @returns The inserted voxel value.\n   */\n  static insertID = (voxel: number, id: number) => {\n    return (voxel & 0xffff0000) | (id & 0xffff);\n  };\n\n  /**\n   * Extract the voxel rotation from a number.\n   *\n   * @param voxel The voxel value to extract from.\n   * @returns The extracted voxel rotation.\n   */\n  static extractRotation = (voxel: number) => {\n    const rotation = (voxel >> 16) & 0xf;\n    const yRot = (voxel >> 20) & 0xf;\n    return BlockRotation.encode(rotation, yRot);\n  };\n\n  /**\n   * Insert a voxel rotation into a number.\n   *\n   * @param voxel The voxel value to insert the rotation into.\n   * @param rotation The voxel rotation to insert.\n   * @returns The inserted voxel value.\n   */\n  static insertRotation = (voxel: number, rotation: BlockRotation) => {\n    const [rot, yRot] = BlockRotation.decode(rotation);\n    const value = (voxel & ROTATION_MASK) | ((rot & 0xf) << 16);\n    return (value & Y_ROTATION_MASK) | ((yRot & 0xf) << 20);\n  };\n\n  /**\n   * Extract the voxel stage from a number.\n   *\n   * @param voxel The voxel value to extract from.\n   * @returns The extracted voxel stage.\n   */\n  static extractStage = (voxel: number) => {\n    return (voxel >> 24) & 0xf;\n  };\n\n  /**\n   * Insert a voxel stage into a number.\n   *\n   * @param voxel The voxel value to insert the stage into.\n   * @param stage The voxel stage to insert.\n   * @returns The inserted voxel value.\n   */\n  static insertStage = (voxel: number, stage: number) => {\n    return (voxel & STAGE_MASK) | (stage << 24);\n  };\n\n  static insertAll = (id: number, rotation?: BlockRotation, stage?: number) => {\n    let value = 0;\n    value = BlockUtils.insertID(value, id);\n    if (rotation) value = BlockUtils.insertRotation(value, rotation);\n    if (stage !== undefined) value = BlockUtils.insertStage(value, stage);\n    return value;\n  };\n\n  static getBlockTorchLightLevel = (block: Block, color: LightColor) => {\n    switch (color) {\n      case \"RED\":\n        return block.redLightLevel;\n      case \"GREEN\":\n        return block.greenLightLevel;\n      case \"BLUE\":\n        return block.blueLightLevel;\n    }\n\n    return 0;\n  };\n\n  static getBlockRotatedTransparency(block: Block, rotation: BlockRotation) {\n    return rotation.rotateTransparency(block.isTransparent);\n  }\n\n  static evaluateBlockRule = (\n    rule: BlockRule,\n    voxel: Coords3,\n    functions: {\n      getVoxelAt: (x: number, y: number, z: number) => number;\n      getVoxelRotationAt: (x: number, y: number, z: number) => BlockRotation;\n      getVoxelStageAt: (x: number, y: number, z: number) => number;\n    }\n  ): boolean => {\n    if (rule.type === \"none\") {\n      return true;\n    }\n\n    if (rule.type === \"simple\") {\n      const { offset, id, rotation, stage } = rule;\n      const [vx, vy, vz] = voxel;\n      const ox = offset[0] + vx;\n      const oy = offset[1] + vy;\n      const oz = offset[2] + vz;\n\n      if (id !== null) {\n        const voxelId = functions.getVoxelAt(ox, oy, oz);\n        if (voxelId !== id) return false;\n      }\n\n      if (rotation !== null) {\n        const voxelRotation = functions.getVoxelRotationAt(ox, oy, oz);\n        if (\n          voxelRotation.value !== rotation.value ||\n          voxelRotation.yRotation !== rotation.yRotation\n        )\n          return false;\n      }\n\n      if (stage !== null) {\n        const voxelStage = functions.getVoxelStageAt(ox, oy, oz);\n        if (voxelStage !== stage) return false;\n      }\n\n      // If all conditions pass, return true\n      return true;\n    }\n\n    if (rule.type === \"combination\") {\n      const { logic, rules } = rule;\n\n      switch (logic) {\n        case BlockRuleLogic.And:\n          return rules.every((subRule) =>\n            BlockUtils.evaluateBlockRule(subRule, voxel, functions)\n          );\n        case BlockRuleLogic.Or:\n          return rules.some((subRule) =>\n            BlockUtils.evaluateBlockRule(subRule, voxel, functions)\n          );\n        case BlockRuleLogic.Not:\n          return !rules.some((subRule) =>\n            BlockUtils.evaluateBlockRule(subRule, voxel, functions)\n          );\n        default:\n          return false; // Unsupported logic\n      }\n    }\n\n    return false; // Default case for safety\n  };\n\n  static getBlockEntityId(id: string, voxel: Coords3) {\n    const [vx, vy, vz] = voxel;\n    return `block::${id}::${vx}::${vy}::${vz}`;\n  }\n\n  private constructor() {\n    // NOTHING\n  }\n}\n","module.exports = 0.000001\n","module.exports = create;\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nfunction create() {\n    var out = new Float32Array(3)\n    out[0] = 0\n    out[1] = 0\n    out[2] = 0\n    return out\n}","module.exports = clone;\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nfunction clone(a) {\n    var out = new Float32Array(3)\n    out[0] = a[0]\n    out[1] = a[1]\n    out[2] = a[2]\n    return out\n}","module.exports = fromValues;\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nfunction fromValues(x, y, z) {\n    var out = new Float32Array(3)\n    out[0] = x\n    out[1] = y\n    out[2] = z\n    return out\n}","module.exports = normalize;\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    var len = x*x + y*y + z*z\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n        out[2] = a[2] * len\n    }\n    return out\n}","module.exports = dot;\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n}","module.exports = angle\n\nvar fromValues = require('./fromValues')\nvar normalize = require('./normalize')\nvar dot = require('./dot')\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nfunction angle(a, b) {\n    var tempA = fromValues(a[0], a[1], a[2])\n    var tempB = fromValues(b[0], b[1], b[2])\n \n    normalize(tempA, tempA)\n    normalize(tempB, tempB)\n \n    var cosine = dot(tempA, tempB)\n\n    if(cosine > 1.0){\n        return 0\n    } else {\n        return Math.acos(cosine)\n    }     \n}\n","module.exports = copy;\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    out[2] = a[2]\n    return out\n}","module.exports = set;\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nfunction set(out, x, y, z) {\n    out[0] = x\n    out[1] = y\n    out[2] = z\n    return out\n}","module.exports = equals\n\nvar EPSILON = require('./epsilon')\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0]\n  var a1 = a[1]\n  var a2 = a[2]\n  var b0 = b[0]\n  var b1 = b[1]\n  var b2 = b[2]\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)))\n}\n","module.exports = exactEquals\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2]\n}\n","module.exports = add;\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0]\n    out[1] = a[1] + b[1]\n    out[2] = a[2] + b[2]\n    return out\n}","module.exports = subtract;\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0]\n    out[1] = a[1] - b[1]\n    out[2] = a[2] - b[2]\n    return out\n}","module.exports = require('./subtract')\n","module.exports = multiply;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction multiply(out, a, b) {\n    out[0] = a[0] * b[0]\n    out[1] = a[1] * b[1]\n    out[2] = a[2] * b[2]\n    return out\n}","module.exports = require('./multiply')\n","module.exports = divide;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction divide(out, a, b) {\n    out[0] = a[0] / b[0]\n    out[1] = a[1] / b[1]\n    out[2] = a[2] / b[2]\n    return out\n}","module.exports = require('./divide')\n","module.exports = min;\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction min(out, a, b) {\n    out[0] = Math.min(a[0], b[0])\n    out[1] = Math.min(a[1], b[1])\n    out[2] = Math.min(a[2], b[2])\n    return out\n}","module.exports = max;\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction max(out, a, b) {\n    out[0] = Math.max(a[0], b[0])\n    out[1] = Math.max(a[1], b[1])\n    out[2] = Math.max(a[2], b[2])\n    return out\n}","module.exports = floor\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0])\n  out[1] = Math.floor(a[1])\n  out[2] = Math.floor(a[2])\n  return out\n}\n","module.exports = ceil\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0])\n  out[1] = Math.ceil(a[1])\n  out[2] = Math.ceil(a[2])\n  return out\n}\n","module.exports = round\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nfunction round(out, a) {\n  out[0] = Math.round(a[0])\n  out[1] = Math.round(a[1])\n  out[2] = Math.round(a[2])\n  return out\n}\n","module.exports = scale;\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b\n    out[1] = a[1] * b\n    out[2] = a[2] * b\n    return out\n}","module.exports = scaleAndAdd;\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale)\n    out[1] = a[1] + (b[1] * scale)\n    out[2] = a[2] + (b[2] * scale)\n    return out\n}","module.exports = distance;\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}","module.exports = require('./distance')\n","module.exports = squaredDistance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return x*x + y*y + z*z\n}","module.exports = require('./squaredDistance')\n","module.exports = length;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}","module.exports = require('./length')\n","module.exports = squaredLength;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return x*x + y*y + z*z\n}","module.exports = require('./squaredLength')\n","module.exports = negate;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nfunction negate(out, a) {\n    out[0] = -a[0]\n    out[1] = -a[1]\n    out[2] = -a[2]\n    return out\n}","module.exports = inverse;\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0]\n  out[1] = 1.0 / a[1]\n  out[2] = 1.0 / a[2]\n  return out\n}","module.exports = cross;\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2]\n\n    out[0] = ay * bz - az * by\n    out[1] = az * bx - ax * bz\n    out[2] = ax * by - ay * bx\n    return out\n}","module.exports = lerp;\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nfunction lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2]\n    out[0] = ax + t * (b[0] - ax)\n    out[1] = ay + t * (b[1] - ay)\n    out[2] = az + t * (b[2] - az)\n    return out\n}","module.exports = random;\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nfunction random(out, scale) {\n    scale = scale || 1.0\n\n    var r = Math.random() * 2.0 * Math.PI\n    var z = (Math.random() * 2.0) - 1.0\n    var zScale = Math.sqrt(1.0-z*z) * scale\n\n    out[0] = Math.cos(r) * zScale\n    out[1] = Math.sin(r) * zScale\n    out[2] = z * scale\n    return out\n}","module.exports = transformMat4;\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15]\n    w = w || 1.0\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w\n    return out\n}","module.exports = transformMat3;\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat3(out, a, m) {\n    var x = a[0], y = a[1], z = a[2]\n    out[0] = x * m[0] + y * m[3] + z * m[6]\n    out[1] = x * m[1] + y * m[4] + z * m[7]\n    out[2] = x * m[2] + y * m[5] + z * m[8]\n    return out\n}","module.exports = transformQuat;\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nfunction transformQuat(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx\n    return out\n}","module.exports = rotateX;\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateX(out, a, b, c){\n    var by = b[1]\n    var bz = b[2]\n\n    // Translate point to the origin\n    var py = a[1] - by\n    var pz = a[2] - bz\n\n    var sc = Math.sin(c)\n    var cc = Math.cos(c)\n\n    // perform rotation and translate to correct position\n    out[0] = a[0]\n    out[1] = by + py * cc - pz * sc\n    out[2] = bz + py * sc + pz * cc\n\n    return out\n}\n","module.exports = rotateY;\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateY(out, a, b, c){\n    var bx = b[0]\n    var bz = b[2]\n\n    // translate point to the origin\n    var px = a[0] - bx\n    var pz = a[2] - bz\n    \n    var sc = Math.sin(c)\n    var cc = Math.cos(c)\n  \n    // perform rotation and translate to correct position\n    out[0] = bx + pz * sc + px * cc\n    out[1] = a[1]\n    out[2] = bz + pz * cc - px * sc\n  \n    return out\n}\n","module.exports = rotateZ;\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateZ(out, a, b, c){\n    var bx = b[0]\n    var by = b[1]\n\n    //Translate point to the origin\n    var px = a[0] - bx\n    var py = a[1] - by\n  \n    var sc = Math.sin(c)\n    var cc = Math.cos(c)\n\n    // perform rotation and translate to correct position\n    out[0] = bx + px * cc - py * sc\n    out[1] = by + px * sc + py * cc\n    out[2] = a[2]\n  \n    return out\n}\n","module.exports = forEach;\n\nvar vec = require('./create')()\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nfunction forEach(a, stride, offset, count, fn, arg) {\n        var i, l\n        if(!stride) {\n            stride = 3\n        }\n\n        if(!offset) {\n            offset = 0\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length)\n        } else {\n            l = a.length\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i] \n            vec[1] = a[i+1] \n            vec[2] = a[i+2]\n            fn(vec, vec, arg)\n            a[i] = vec[0] \n            a[i+1] = vec[1] \n            a[i+2] = vec[2]\n        }\n        \n        return a\n}","module.exports = {\n  EPSILON: require('./epsilon')\n  , create: require('./create')\n  , clone: require('./clone')\n  , angle: require('./angle')\n  , fromValues: require('./fromValues')\n  , copy: require('./copy')\n  , set: require('./set')\n  , equals: require('./equals')\n  , exactEquals: require('./exactEquals')\n  , add: require('./add')\n  , subtract: require('./subtract')\n  , sub: require('./sub')\n  , multiply: require('./multiply')\n  , mul: require('./mul')\n  , divide: require('./divide')\n  , div: require('./div')\n  , min: require('./min')\n  , max: require('./max')\n  , floor: require('./floor')\n  , ceil: require('./ceil')\n  , round: require('./round')\n  , scale: require('./scale')\n  , scaleAndAdd: require('./scaleAndAdd')\n  , distance: require('./distance')\n  , dist: require('./dist')\n  , squaredDistance: require('./squaredDistance')\n  , sqrDist: require('./sqrDist')\n  , length: require('./length')\n  , len: require('./len')\n  , squaredLength: require('./squaredLength')\n  , sqrLen: require('./sqrLen')\n  , negate: require('./negate')\n  , inverse: require('./inverse')\n  , normalize: require('./normalize')\n  , dot: require('./dot')\n  , cross: require('./cross')\n  , lerp: require('./lerp')\n  , random: require('./random')\n  , transformMat4: require('./transformMat4')\n  , transformMat3: require('./transformMat3')\n  , transformQuat: require('./transformQuat')\n  , rotateX: require('./rotateX')\n  , rotateY: require('./rotateY')\n  , rotateZ: require('./rotateZ')\n  , forEach: require('./forEach')\n}\n","import vec3 from \"gl-vec3\";\n\nimport { Coords2, Coords3 } from \"../types\";\n\n/**\n * A utility class for all things related to chunks and chunk coordinates.\n *\n * # Example\n * ```ts\n * // Get the chunk coordinates of a voxel, (0, 0) with `chunkSize=16`.\n * const chunkCoords = ChunkUtils.mapVoxelToChunk([1, 10, 12]);\n * ```\n *\n * @category Utils\n */\nexport class ChunkUtils {\n  /**\n   * Convert a 2D chunk coordinate to a string representation.\n   *\n   * @param coords The coordinates to convert.\n   * @param concat The concatenation string to use.\n   * @returns The string representation of the coordinates.\n   */\n  static getChunkName = (coords: Coords2, concat = \"|\") => {\n    return coords[0] + concat + coords[1];\n  };\n\n  /**\n   * Convert a 3D voxel coordinate to a string representation.\n   *\n   * @param coords The coordinates to convert.\n   * @param concat The concatenation string to use.\n   * @returns The string representation of the coordinates.\n   */\n  static getVoxelName = (coords: Coords3, concat = \"|\") => {\n    return (\n      (coords[0] | 0) + concat + (coords[1] | 0) + concat + (coords[2] | 0)\n    );\n  };\n\n  /**\n   * Given a chunk representation, parse the chunk coordinates.\n   *\n   * @param name The string representation of the chunk.\n   * @param concat The concatenation string used.\n   * @returns The parsed chunk coordinates.\n   */\n  static parseChunkName = (name: string, concat = \"|\") => {\n    return name.split(concat).map((s: string) => parseInt(s, 10));\n  };\n\n  /**\n   * Scale and floor a 3D coordinate.\n   *\n   * @param coords The coordinates to scale and floor.\n   * @param factor The factor to scale by.\n   * @returns The scaled and floored coordinates.\n   */\n  static scaleCoordsF = (coords: Coords3, factor: number): Coords3 => {\n    const result = [0, 0, 0];\n    const scaled = vec3.scale(result, coords, factor);\n    return <Coords3>vec3.floor(scaled, scaled);\n  };\n\n  /**\n   * Map a 3D voxel coordinate to the local 3D voxel coordinate in the situated chunk.\n   *\n   * @param voxelPos The voxel coordinate to map.\n   * @param chunkSize The horizontal dimension of a chunk.\n   * @returns The mapped coordinate.\n   */\n  static mapVoxelToChunkLocal = (\n    voxelPos: Coords3,\n    chunkSize: number\n  ): Coords3 => {\n    const [cx, cz] = ChunkUtils.mapVoxelToChunk(voxelPos, chunkSize);\n    const [vx, vy, vz] = voxelPos;\n\n    return [vx - cx * chunkSize, vy, vz - cz * chunkSize];\n  };\n\n  /**\n   * Map a 3D voxel coordinate to the 2D chunk coordinate.\n   *\n   * @param voxelPos The voxel coordinate to map.\n   * @param chunkSize  The horizontal dimension of a chunk.\n   * @returns The mapped coordinate.\n   */\n  static mapVoxelToChunk = (voxelPos: Coords3, chunkSize: number): Coords2 => {\n    const coords3 = ChunkUtils.scaleCoordsF(voxelPos, 1 / chunkSize);\n    return [coords3[0], coords3[2]];\n  };\n\n  /**\n   * Map a 2D chunk coordinate to the 3D voxel coordinate.\n   *\n   * @param chunkPos The chunk coordinate to map.\n   * @param chunkSize The horizontal dimension of a chunk.\n   * @returns The mapped coordinate.\n   */\n  static mapChunkToVoxel = (chunkPos: Coords2, chunkSize: number): Coords3 => {\n    const result = <Coords3>[0, 0, 0];\n\n    vec3.copy(result, [chunkPos[0], 0, chunkPos[1]]);\n    vec3.scale(result, result, chunkSize);\n\n    return result;\n  };\n\n  /**\n   * Map a 3D world coordinate to the 3D voxel coordinate. Since a voxel is\n   * exactly 1 unit in size, this is just a floor operation.\n   *\n   * @param worldPos The world coordinate to map.\n   * @returns The mapped coordinate.\n   */\n  static mapWorldToVoxel = (worldPos: Coords3): Coords3 => {\n    return ChunkUtils.scaleCoordsF(worldPos, 1);\n  };\n\n  private constructor() {\n    // NOTHING\n  }\n}\n","/**\n * A utility class for extracting and inserting light data from and into numbers.\n *\n * The light data is stored in the following format:\n * - Sunlight: `0xff000000`\n * - Red light: `0x00ff0000`\n * - Green light: `0x0000ff00`\n * - Blue light: `0x000000ff`\n *\n * TODO-DOCS\n * For more information about lighting data, see [here](/)\n *\n * # Example\n * ```ts\n * // Insert a level 13 sunlight into zero.\n * const number = LightUtils.insertSunlight(0, 13);\n * ```\n *\n * @category Utils\n */\nexport class LightUtils {\n  /**\n   * Extract the sunlight level from a number.\n   *\n   * @param light The light value to extract from.\n   * @returns The extracted sunlight value.\n   */\n  static extractSunlight = (light: number) => {\n    return (light >> 12) & 0xf;\n  };\n\n  /**\n   * Insert a sunlight level into a number.\n   *\n   * @param light The light value to insert the level into.\n   * @param level The sunlight level to insert.\n   * @returns The inserted light value.\n   */\n  static insertSunlight = (light: number, level: number) => {\n    return (light & 0xfff) | (level << 12);\n  };\n\n  /**\n   * Extract the red light level from a number.\n   *\n   * @param light The light value to extract from.\n   * @returns The extracted red light value.\n   */\n  static extractRedLight = (light: number) => {\n    return (light >> 8) & 0xf;\n  };\n\n  /**\n   * Insert a red light level into a number.\n   *\n   * @param light The light value to insert the level into.\n   * @param level The red light level to insert.\n   * @returns The inserted light value.\n   */\n  static insertRedLight = (light: number, level: number) => {\n    return (light & 0xf0ff) | (level << 8);\n  };\n\n  /**\n   * Extract the green light level from a number.\n   *\n   * @param light The light value to extract from.\n   * @returns The extracted green light value.\n   */\n  static extractGreenLight = (light: number) => {\n    return (light >> 4) & 0xf;\n  };\n\n  /**\n   * Insert a green light level into a number.\n   *\n   * @param light The light value to insert the level into.\n   * @param level The green light level to insert.\n   * @returns The inserted light value.\n   */\n  static insertGreenLight = (light: number, level: number) => {\n    return (light & 0xff0f) | (level << 4);\n  };\n\n  /**\n   * Extract the blue light level from a number.\n   *\n   * @param light The light value to extract from.\n   * @returns The extracted blue light value.\n   */\n  static extractBlueLight = (light: number) => {\n    return light & 0xf;\n  };\n\n  /**\n   * Insert a blue light level into a number.\n   *\n   * @param light The light value to insert the level into.\n   * @param level The blue light level to insert.\n   * @returns The inserted light value.\n   */\n  static insertBlueLight = (light: number, level: number) => {\n    return (light & 0xfff0) | level;\n  };\n\n  /**\n   * Check to see if light can go \"into\" one block, disregarding the source.\n   *\n   * @param target The target block's transparency.\n   * @param dx The change in x direction.\n   * @param dy The change in y direction.\n   * @param dz The change in z direction.\n   * @returns Whether light can enter into the target block.\n   */\n  static canEnterInto = (\n    target: boolean[],\n    dx: number,\n    dy: number,\n    dz: number\n  ) => {\n    if (Math.abs(dx + dy + dz) !== 1) {\n      throw new Error(\n        \"This isn't supposed to happen. Light neighboring direction should be on 1 axis only.\"\n      );\n    }\n\n    const [px, py, pz, nx, ny, nz] = target;\n\n    // Going into the NX of the target.\n    if (dx === 1) {\n      return nx;\n    }\n\n    // Going into the PX of the target.\n    if (dx === -1) {\n      return px;\n    }\n\n    // Going into the NY of the target.\n    if (dy === 1) {\n      return ny;\n    }\n\n    // Going into the PY of the target.\n    if (dy === -1) {\n      return py;\n    }\n\n    // Going into the NZ of the target.\n    if (dz === 1) {\n      return nz;\n    }\n\n    // Going into the PZ of the target.\n    return pz;\n  };\n\n  /**\n   * Check to see if light can enter from one block to another.\n   *\n   * @param source The source block's transparency.\n   * @param target The target block's transparency.\n   * @param dx The change in x direction.\n   * @param dy The change in y direction.\n   * @param dz The change in z direction.\n   * @returns Whether light can enter from the source block to the target block.\n   */\n  static canEnter = (\n    source: boolean[],\n    target: boolean[],\n    dx: number,\n    dy: number,\n    dz: number\n  ) => {\n    if (Math.abs(dx + dy + dz) !== 1) {\n      throw new Error(\n        \"This isn't supposed to happen. Light neighboring direction should be on 1 axis only.\"\n      );\n    }\n\n    const [spx, spy, spz, snx, sny, snz] = source;\n    const [tpx, tpy, tpz, tnx, tny, tnz] = target;\n\n    // Going from PX of source to NX of target\n    if (dx === 1) {\n      return spx && tnx;\n    }\n\n    // Going from NX of source to PX of target\n    if (dx === -1) {\n      return snx && tpx;\n    }\n\n    // Going from PY of source to NY of target\n    if (dy === 1) {\n      return spy && tny;\n    }\n\n    // Going from NY of source to PY of target\n    if (dy === -1) {\n      return sny && tpy;\n    }\n\n    // Going from PZ of source to NZ of target\n    if (dz === 1) {\n      return spz && tnz;\n    }\n\n    // Going from NZ of source to PZ of target\n    return snz && tpz;\n  };\n\n  private constructor() {\n    // NOTHING\n  }\n}\n\n/**\n * The string representation of red light.\n */\nexport const RED_LIGHT = \"RED\";\n\n/**\n * The string representation of green light.\n */\nexport const GREEN_LIGHT = \"GREEN\";\n\n/**\n * The string representation of blue light.\n */\nexport const BLUE_LIGHT = \"BLUE\";\n\n/**\n * The string representation of sunlight.\n */\nexport const SUNLIGHT = \"SUNLIGHT\";\n\n/**\n * Sunlight or the color of torch light.\n */\nexport type LightColor = \"RED\" | \"GREEN\" | \"BLUE\" | \"SUNLIGHT\";\n","import { Matrix4, Quaternion, Vector3 } from \"three\";\n\nconst TWO_PI = Math.PI * 2;\n\n/**\n * A utility class for doing math operations.\n *\n * @category Utils\n */\nexport class MathUtils {\n  /**\n   * Round a number to a given precision.\n   *\n   * @param n The number to round.\n   * @param digits The number of digits after decimal to round to.\n   * @returns The rounded number.\n   */\n  static round = (n: number, digits: number) => {\n    return Math.round(n * 10 ** digits) / 10 ** digits;\n  };\n\n  /**\n   * Normalizes an angle to be between -2PI and 2PI.\n   *\n   * @param angle The angle to normalize.\n   * @returns The normalized angle.\n   */\n  static normalizeAngle = (angle: number) => {\n    return angle - TWO_PI * Math.floor((angle + Math.PI) / TWO_PI);\n  };\n\n  /**\n   * Convert a direction vector to a quaternion.\n   *\n   * @param dx X component of the direction vector.\n   * @param dy Y component of the direction vector.\n   * @param dz Z component of the direction vector.\n   * @returns The quaternion representing the direction vector.\n   */\n  static directionToQuaternion = (dx: number, dy: number, dz: number) => {\n    const toQuaternion = (() => {\n      const m = new Matrix4();\n      const q = new Quaternion();\n      const zero = new Vector3(0, 0, 0);\n      const one = new Vector3(0, 1, 0);\n\n      return () => {\n        return q.setFromRotationMatrix(\n          m.lookAt(new Vector3(-dx, -dy, -dz), zero, one)\n        );\n      };\n    })();\n\n    return toQuaternion();\n  };\n\n  private constructor() {\n    // NOTHING\n  }\n}\n","import {\n  BoxGeometry,\n  Color,\n  FrontSide,\n  Group,\n  LinearMipMapLinearFilter,\n  Mesh,\n  MeshBasicMaterial,\n  NearestFilter,\n  RepeatWrapping,\n  Side,\n  Texture,\n} from \"three\";\n\nimport { DOMUtils } from \"../utils\";\n\n/**\n * Parameters to create a canvas box.\n */\nexport type CanvasBoxOptions = {\n  /**\n   * The gap between the layers of the box. Defaults to `0`.\n   */\n  gap: number;\n\n  /**\n   * The number of layers of this box. Defaults to `1`.\n   */\n  layers: number;\n\n  /**\n   * THe width of the box. Defaults to `1`.\n   */\n  width: number;\n\n  /**\n   * The height of the box. Defaults to whatever `width` is.\n   */\n  height?: number;\n\n  /**\n   * The depth of the box. Defaults to whatever `width` is.\n   */\n  depth?: number;\n\n  /**\n   * The width segments of the box, which is the number of pixels of the canvases along the width.\n   * Defaults to `8`.\n   */\n  widthSegments: number;\n\n  /**\n   * The height segments of the box, which is the number of pixels of the canvases along the height.\n   * Defaults to whatever `widthSegments` is.\n   */\n  heightSegments?: number;\n\n  /**\n   * The depth segments of the box, which is the number of pixels of the canvases along the depth.\n   * Defaults to whatever `widthSegments` is.\n   */\n  depthSegments?: number;\n\n  /**\n   * The side of the box to render. Defaults to `THREE.FrontSide`.\n   */\n  side: Side;\n\n  /**\n   * Whether or not should this canvas box be rendered as transparent. Defaults to `false`.\n   */\n  transparent?: boolean;\n};\n\n/**\n * A function to programmatically draw on a canvas.\n */\nexport type ArtFunction = (\n  context: CanvasRenderingContext2D,\n  canvas: HTMLCanvasElement\n) => void;\n\n/**\n * The sides of a canvas box.\n *\n * `\"all\"` means all six sides, and `\"sides\"` means all the sides except the top and bottom.\n */\nexport type BoxSides =\n  | \"back\"\n  | \"front\"\n  | \"top\"\n  | \"bottom\"\n  | \"left\"\n  | \"right\"\n  | \"sides\"\n  | \"all\";\n\nconst defaultOptions: CanvasBoxOptions = {\n  gap: 0,\n  layers: 1,\n  width: 1,\n  widthSegments: 8,\n  side: FrontSide,\n  transparent: false,\n};\n\n/**\n * The six default faces of a canvas box.\n */\nexport const BOX_SIDES: BoxSides[] = [\n  \"back\",\n  \"front\",\n  \"top\",\n  \"bottom\",\n  \"left\",\n  \"right\",\n];\n\n/**\n * A layer of a canvas box. This is a group of six canvases that are rendered as a single mesh.\n *\n * @noInheritDoc\n */\nexport class BoxLayer extends Mesh {\n  /**\n   * The materials of the six faces of this box layer.\n   */\n  public materials: Map<string, MeshBasicMaterial> = new Map();\n\n  /**\n   * The width of the box layer.\n   */\n  public width: number;\n\n  /**\n   * The height of the box layer.\n   */\n  public height: number;\n\n  /**\n   * The depth of the box layer.\n   */\n  public depth: number;\n\n  /**\n   * The width segments of the box layer.\n   */\n  public widthSegments: number;\n\n  /**\n   * The height segments of the box layer.\n   */\n  public heightSegments: number;\n\n  /**\n   * The depth segments of the box layer.\n   */\n  public depthSegments: number;\n\n  /**\n   * The side of the box layer to render.\n   */\n  private side: Side;\n\n  /**\n   * Whether or not should this canvas box be rendered as transparent.\n   */\n  private transparent: boolean;\n\n  /**\n   * Create a six-sided canvas box layer.\n   *\n   * @param width The width of the box layer.\n   * @param height The height of the box layer.\n   * @param depth The depth of the box layer.\n   * @param widthSegments The width segments of the box layer.\n   * @param heightSegments The height segments of the box layer.\n   * @param depthSegments The depth segments of the box layer.\n   * @param side The side of the box layer to render.\n   * @param transparent Whether or not should this canvas box be rendered as transparent.\n   */\n  constructor(\n    /**\n     * Test\n     */\n    width: number,\n    height: number,\n    depth: number,\n    widthSegments: number,\n    heightSegments: number,\n    depthSegments: number,\n    side: Side,\n    transparent: boolean\n  ) {\n    super(new BoxGeometry(width, height, depth));\n\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.widthSegments = widthSegments;\n    this.heightSegments = heightSegments;\n    this.depthSegments = depthSegments;\n    this.side = side;\n    this.transparent = transparent;\n\n    for (const face of BOX_SIDES) {\n      this.materials.set(face, this.createCanvasMaterial(face));\n    }\n\n    const materials = Array.from(this.materials.values());\n    const temp = materials[0];\n    materials[0] = materials[1];\n    materials[1] = temp;\n\n    this.material = materials;\n\n    this.rotation.y = Math.PI / 2;\n  }\n\n  /**\n   * Add art to the canvas(s) of this box layer.\n   \n   * @param side The side(s) of the box layer to draw on.\n   * @param art The art or art function to draw on the box layer's side.\n   */\n  paint = (side: BoxSides[] | BoxSides, art: ArtFunction | Color | Texture) => {\n    const actualSides =\n      side === \"all\"\n        ? BOX_SIDES\n        : side === \"sides\"\n        ? ([\"front\", \"back\", \"left\", \"right\"] as BoxSides[])\n        : Array.isArray(side)\n        ? side\n        : [side];\n\n    for (const face of actualSides) {\n      const material = this.materials.get(face);\n      if (!material) continue;\n\n      const canvas = <HTMLCanvasElement>material.map?.image;\n      if (!canvas) continue;\n\n      const context = canvas.getContext(\"2d\");\n      if (!context) continue;\n\n      context.imageSmoothingEnabled = false;\n\n      const { width, height } = this.getDimensionFromSide(face);\n\n      if (art instanceof Texture) {\n        context.drawImage(art.image, 0, 0, width, height);\n      } else {\n        if (art instanceof Color) {\n          context.save();\n          context.fillStyle = `rgb(${art.r * 255},${art.g * 255},${\n            art.b * 255\n          })`;\n          context.fillRect(0, 0, width, height);\n          context.restore();\n        } else if (typeof art === \"function\") {\n          art(context, canvas);\n        } else {\n          console.warn(\"Invalid art type: \", art);\n        }\n      }\n\n      material.needsUpdate = true;\n      material.map.needsUpdate = true;\n    }\n  };\n\n  /**\n   * Create a canvas material for a given side of the box layer.\n   */\n  private createCanvasMaterial = (face: BoxSides) => {\n    const canvas = document.createElement(\"canvas\");\n\n    const { width, height } = this.getDimensionFromSide(face);\n    canvas.width = width;\n    canvas.height = height;\n\n    const material = new MeshBasicMaterial({\n      side: this.side,\n      map: new Texture(canvas),\n      transparent: this.transparent,\n      name: face,\n    });\n\n    material.toneMapped = false;\n\n    if (material.map) {\n      material.map.magFilter = NearestFilter;\n      material.map.minFilter = LinearMipMapLinearFilter;\n      material.map.wrapS = RepeatWrapping;\n      material.map.wrapT = RepeatWrapping;\n      material.map.needsUpdate = true;\n    }\n\n    return material;\n  };\n\n  /**\n   * Get the width and height of a given side of the box layer.\n   */\n  private getDimensionFromSide = (side: BoxSides) => {\n    switch (side) {\n      case \"front\":\n      case \"back\": {\n        return { width: this.widthSegments, height: this.heightSegments };\n      }\n      case \"left\":\n      case \"right\": {\n        return { width: this.depthSegments, height: this.heightSegments };\n      }\n      case \"top\":\n      case \"bottom\": {\n        return { width: this.widthSegments, height: this.heightSegments };\n      }\n      default: {\n        throw new Error(\"Cannot derive width/height from unknown side.\");\n      }\n    }\n  };\n}\n\n/**\n * A canvas box is a group of `BoxLayer`s that are rendered as a single mesh.\n * Each box layer is a group of six canvases that are also rendered as a single mesh.\n * You can then paint on each canvas individually by calling `box.paint()`.\n *\n * # Example\n * ```ts\n * const box = new VOXELIZE.CanvasBox();\n *\n * box.paint(\"all\", (ctx, canvas) => {\n *   ctx.fillStyle = \"red\";\n *   ctx.fillRect(0, 0, canvas.width, canvas.height);\n * });\n * ```\n *\n * ![Bobby from King of the Hill](/img/docs/bobby-canvas-box.png)\n *\n * @noInheritDoc\n */\nexport class CanvasBox extends Group {\n  /**\n   * Parameters for creating a canvas box.\n   */\n  public options: CanvasBoxOptions;\n\n  /**\n   * The inner layers of the canvas box.\n   */\n  public boxLayers: BoxLayer[] = [];\n\n  /**\n   * The width of the canvas box.\n   */\n  public width: number;\n\n  /**\n   * The height of the canvas box.\n   */\n  public height: number;\n\n  /**\n   * The depth of the canvas box.\n   */\n  public depth: number;\n\n  /**\n   * Create a new canvas box.\n   *\n   * @param options The options for creating a canvas box.\n   */\n  constructor(options: Partial<CanvasBoxOptions> = {}) {\n    super();\n\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.makeBoxes();\n  }\n\n  /**\n   * Add art to the canvas(s) of this box layer.\n   *\n   * @param side The side(s) of the box layer to draw on.\n   * @param art The art or art function to draw on the box layer's side.\n   * @param layer The layer to draw on.\n   */\n  paint = (\n    side: BoxSides[] | BoxSides,\n    art: ArtFunction | Color | Texture,\n    layer = 0\n  ) => {\n    if (layer >= this.boxLayers.length) {\n      throw new Error(\"Canvas box layer does not exist.\");\n    }\n\n    this.boxLayers[layer].paint(side, art);\n  };\n\n  /**\n   * The first layer of the canvas box.\n   */\n  get boxMaterials() {\n    return this.boxLayers[0].materials;\n  }\n\n  private makeBoxes = () => {\n    const {\n      layers,\n      gap,\n      side,\n      width,\n      height,\n      depth,\n      widthSegments,\n      heightSegments,\n      depthSegments,\n      transparent,\n    } = this.options;\n\n    if (!width) {\n      throw new Error(\"CanvasBox width must be specified.\");\n    }\n\n    this.width = width;\n    this.height = height || width;\n    this.depth = depth || width;\n\n    for (let i = 0; i < layers; i++) {\n      const newBoxLayer = new BoxLayer(\n        width + i * gap * 2,\n        (height ? height : width) + i * gap * 2,\n        (depth ? depth : width) + i * gap * 2,\n        widthSegments,\n        heightSegments ? heightSegments : widthSegments,\n        depthSegments ? depthSegments : widthSegments,\n        side,\n        transparent\n      );\n      this.boxLayers.push(newBoxLayer);\n      this.add(newBoxLayer);\n    }\n  };\n}\n\n/**\n * Draw a sun to a canvas box. This can be used on sky, as sky is essentially a canvas box.\n *\n * @param context The canvas context to draw on.\n * @param canvas The canvas to draw on.\n */\nconst drawSun =\n  (sunRadius = 50, sunColor = \"#f8ffb5\") =>\n  (context: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    const color = new Color(sunColor);\n\n    context.save();\n\n    // bg glow\n    context.beginPath();\n    let x = canvas.width / 2;\n    let y = canvas.height / 2;\n    const grd = context.createRadialGradient(x, y, 1, x, y, sunRadius * 2);\n    grd.addColorStop(0, DOMUtils.rgba(1, 1, 1, 0.3));\n    grd.addColorStop(1, DOMUtils.rgba(1, 1, 1, 0));\n    context.arc(x, y, sunRadius * 3, 0, 2 * Math.PI, false);\n    context.fillStyle = grd;\n    context.fill();\n    context.closePath();\n\n    // outer sun\n    context.beginPath();\n    x = canvas.width / 2 - sunRadius / 2;\n    y = canvas.height / 2 - sunRadius / 2;\n    context.rect(x, y, sunRadius, sunRadius);\n    context.fillStyle = DOMUtils.rgba(color.r, color.g, color.b, 1);\n    context.fill();\n    context.closePath();\n\n    // inner sun\n    context.beginPath();\n    const r = sunRadius / 1.6;\n    x = canvas.width / 2 - r / 2;\n    y = canvas.height / 2 - r / 2;\n    context.rect(x, y, r, r);\n    context.fillStyle = DOMUtils.rgba(1, 1, 1, 0.5);\n    context.fill();\n    context.closePath();\n\n    context.restore();\n  };\n\nconst drawMoon =\n  (moonRadius = 20, moonColor = \"#e6e2d1\", phase = 1) =>\n  (context: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    const color = new Color(moonColor);\n\n    const x = canvas.width / 2;\n    const y = canvas.height / 2;\n\n    // bg glow\n    context.beginPath();\n    const grd = context.createRadialGradient(\n      x + moonRadius / 2,\n      y + moonRadius / 2,\n      1,\n      x + moonRadius / 2,\n      y + moonRadius / 2,\n      moonRadius * 2\n    );\n    grd.addColorStop(0, DOMUtils.rgba(1, 1, 1, 0.3));\n    grd.addColorStop(1, DOMUtils.rgba(1, 1, 1, 0));\n    context.arc(\n      x + moonRadius / 2,\n      y + moonRadius / 2,\n      moonRadius * 2,\n      0,\n      2 * Math.PI,\n      false\n    );\n    context.fillStyle = grd;\n    context.fill();\n    context.closePath();\n\n    // clipping region\n    context.save();\n    context.beginPath();\n    context.rect(x, y, moonRadius, moonRadius);\n    context.clip();\n\n    // moon bg\n    context.beginPath();\n    context.rect(x, y, moonRadius, moonRadius);\n    context.fillStyle = DOMUtils.rgba(color.r, color.g, color.b, 1);\n    context.fill();\n\n    context.translate(x, y);\n\n    // lighter inside\n    context.beginPath();\n    context.rect(4, 4, moonRadius - 8, moonRadius - 8);\n    context.fillStyle = DOMUtils.rgba(1, 1, 1, 0.8);\n    context.fill();\n\n    // moon phase\n    const px = phase * moonRadius * 2 - moonRadius;\n    context.beginPath();\n    context.rect(px, 0, moonRadius, moonRadius);\n    context.fillStyle = DOMUtils.rgba(0, 0, 0, 0.8);\n    context.fill();\n    context.beginPath();\n    context.rect(2 + px, 2, moonRadius - 4, moonRadius - 4);\n    context.fillStyle = DOMUtils.rgba(0, 0, 0, 0.9);\n    context.fill();\n\n    context.restore();\n  };\n\nconst drawStars =\n  (\n    starCount = 100,\n    starColors = [\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#FFFFFF\",\n      \"#8589FF\",\n      \"#FF8585\",\n    ]\n  ) =>\n  (context: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    const alpha = context.globalAlpha;\n    for (let i = 0; i < starCount; i++) {\n      context.globalAlpha = Math.random() * 1 + 0.5;\n      context.beginPath();\n      context.arc(\n        Math.random() * canvas.width,\n        Math.random() * canvas.height,\n        Math.random() * 0.5,\n        0,\n        2 * Math.PI,\n        false\n      );\n      context.fillStyle =\n        starColors[Math.floor(Math.random() * starColors.length)];\n      context.fill();\n    }\n\n    context.globalAlpha = alpha;\n  };\n\n/**\n * An art function to draw a crown to a canvas box.\n *\n * @param context The canvas context to draw on.\n *\n * # Example\n * ```ts\n * const box = new VOXELIZE.CanvasBox();\n * box.paint(\"sides\", VOXELIZE.drawCrown);\n */\nconst drawCrown: ArtFunction = (context: CanvasRenderingContext2D) => {\n  const gold = [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [1, 2],\n    [2, 2],\n    [2, 1],\n    [3, 0],\n    [3, 2],\n    [4, 0],\n    [4, 2],\n    [5, 1],\n    [5, 2],\n    [6, 2],\n    [7, 0],\n    [7, 1],\n    [7, 2],\n  ];\n\n  const blue = [\n    [1, 1],\n    [6, 1],\n  ];\n\n  context.fillStyle = \"#f7ea00\";\n  gold.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\n  context.fillStyle = \"#51c2d5\";\n  blue.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\n  context.fillStyle = \"#ff005c\";\n  context.fillRect(3, 1, 1, 1);\n  context.fillRect(4, 1, 1, 1);\n};\n\n/**\n * A preset of art functions to draw on canvas boxes.\n */\nexport const artFunctions = {\n  drawCrown,\n  drawSun,\n  drawMoon,\n  drawStars,\n};\n","import {\n  BackSide,\n  Color,\n  DodecahedronGeometry,\n  Mesh,\n  ShaderMaterial,\n  Vector3,\n} from \"three\";\n\nimport { CanvasBox, CanvasBoxOptions } from \"../../libs/canvas-box\";\nimport SkyFragmentShader from \"../../shaders/sky/fragment.glsl\";\nimport SkyVertexShader from \"../../shaders/sky/vertex.glsl\";\n\nexport type SkyShadingCycleData = {\n  start: number;\n  name: string;\n  color: {\n    top: Color | string;\n    middle: Color | string;\n    bottom: Color | string;\n  };\n  skyOffset: number;\n  voidOffset: number;\n};\n\nexport type SkyOptions = {\n  /**\n   * The dimension of the dodecahedron sky. The inner canvas box is 0.8 times this dimension.\n   */\n  dimension: number;\n\n  /**\n   * The lerp factor for the sky gradient. The sky gradient is updated every frame by lerping the current color to the target color.\n   * set by the `setTopColor`, `setMiddleColor`, and `setBottomColor` methods.\n   */\n  lerpFactor: number;\n\n  transitionSpan: number;\n};\n\nconst defaultOptions: SkyOptions = {\n  dimension: 2000,\n  lerpFactor: 0.1,\n  transitionSpan: 0.05,\n};\n\n/**\n * Sky consists of both a large dodecahedron used to render the 3-leveled sky gradient and a {@link CanvasBox} that renders custom sky textures (\n * for a sky box) within the dodecahedron sky.\n *\n * # Example\n * ```ts\n * // Create the sky texture.\n * const sky = new VOXELIZE.Sky();\n *\n * // Load a texture and paint it to the top of the sky.\n * world.loader.addTexture(ExampleImage, (texture) => {\n *   sky.paint(\"top\", texture);\n * })\n *\n * // Add the sky to the scene.\n * world.add(sky);\n *\n * // Update the sky per frame.\n * sky.update(camera.position);\n * ```\n *\n * ![Sky](/img/docs/sky.png)\n *\n */\nexport class Sky extends CanvasBox {\n  public options: CanvasBoxOptions & SkyOptions;\n\n  /**\n   * The top color of the sky gradient. Change this by calling {@link Sky.setTopColor}.\n   */\n  public uTopColor: {\n    value: Color;\n  };\n\n  /**\n   * The middle color of the sky gradient. Change this by calling {@link Sky.setMiddleColor}.\n   */\n  public uMiddleColor: {\n    value: Color;\n  };\n\n  /**\n   * The bottom color of the sky gradient. Change this by calling {@link Sky.setBottomColor}.\n   */\n  public uBottomColor: {\n    value: Color;\n  };\n\n  public uSkyOffset: {\n    value: number;\n  };\n\n  public uVoidOffset: {\n    value: number;\n  };\n\n  public shadingData: SkyShadingCycleData[] = [];\n\n  /**\n   * Create a new sky instance.\n   *\n   * @param dimension The dimension of the dodecahedron sky. The inner canvas box is 0.8 times this dimension.\n   * @param lerpFactor The lerp factor for the sky gradient. The sky gradient is updated every frame by lerping the current color to the target color.\n   */\n  constructor(options: Partial<SkyOptions> = {}) {\n    super({\n      width:\n        (options.dimension ? options.dimension : defaultOptions.dimension) *\n        0.8,\n      side: BackSide,\n      transparent: true,\n      widthSegments: 512,\n      heightSegments: 512,\n      depthSegments: 512,\n    });\n\n    this.options = {\n      ...this.options,\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.boxMaterials.forEach((m) => (m.depthWrite = false));\n    this.frustumCulled = false;\n    this.renderOrder = -1;\n\n    this.createSkyShading();\n  }\n\n  setShadingPhases = (data: SkyShadingCycleData[]) => {\n    if (data.length === 0) {\n      return;\n    }\n\n    if (data.length === 1) {\n      const { top, middle, bottom } = data[0].color;\n      const topColor = new Color(top).convertLinearToSRGB();\n      const middleColor = new Color(middle).convertLinearToSRGB();\n      const bottomColor = new Color(bottom).convertLinearToSRGB();\n\n      this.uTopColor.value.copy(topColor);\n      this.uMiddleColor.value.copy(middleColor);\n      this.uBottomColor.value.copy(bottomColor);\n      this.uSkyOffset.value = data[0].skyOffset;\n      this.uVoidOffset.value = data[0].voidOffset;\n    }\n\n    this.shadingData = data;\n\n    // Sort the shading data by start\n\n    this.shadingData.sort((a, b) => a.start - b.start);\n  };\n\n  /**\n   * Get the current top color of the sky gradient. This can be used as shader uniforms's value.\n   *\n   * @returns The current top color of the sky gradient.\n   */\n  getTopColor = () => {\n    return this.uTopColor.value;\n  };\n\n  /**\n   * Get the current middle color of the sky gradient. This can be used as shader uniforms's value. For instance,\n   * this can be used to set the color of the fog in the world.\n   *\n   * @returns The current middle color of the sky gradient.\n   */\n  getMiddleColor = () => {\n    return this.uMiddleColor.value;\n  };\n\n  /**\n   * Get the current bottom color of the sky gradient. This can be used as shader uniforms's value.\n   *\n   * @returns The current bottom color of the sky gradient.\n   */\n  getBottomColor = () => {\n    return this.uBottomColor.value;\n  };\n\n  /**\n   * Update the position of the sky box to the camera's x/z position, and lerp the sky gradient colors.\n   *\n   * @param position The new position to center the sky at.\n   */\n  update = (position: Vector3, time: number, timePerDay: number) => {\n    this.rotation.z = Math.PI * 2 * (time / timePerDay);\n\n    [\"top\", \"right\", \"left\", \"front\", \"back\"].forEach((face) => {\n      const mat = this.boxMaterials.get(face);\n      if (mat) {\n        // Update sky opacity to hide stars when the sun is up.\n      }\n    });\n\n    this.position.copy(position);\n\n    if (this.shadingData.length <= 1) {\n      return;\n    }\n\n    const shadingStack: [number, SkyShadingCycleData][] = [];\n    const transitionTime = this.options.transitionSpan * timePerDay;\n\n    for (let i = 0; i < this.shadingData.length; i++) {\n      const data = this.shadingData[i];\n      const nextData = this.shadingData[(i + 1) % this.shadingData.length];\n\n      const { start } = data;\n      const startTime = start * timePerDay;\n      const nextStartTime = nextData.start * timePerDay;\n\n      if (\n        startTime < nextStartTime\n          ? time >= startTime && time < nextStartTime\n          : time < nextStartTime || time >= startTime\n      ) {\n        const weight = Math.max(\n          Math.min(\n            time >= startTime\n              ? (time - startTime) / transitionTime\n              : (time + timePerDay - startTime) / transitionTime,\n            1.0\n          ),\n          0.0\n        );\n\n        shadingStack.push([weight, data]);\n\n        if (\n          time >= startTime\n            ? time < startTime + transitionTime\n            : time + timePerDay < startTime + transitionTime\n        ) {\n          const previousData =\n            this.shadingData[\n              (i - 1 < 0 ? i - 1 + this.shadingData.length : i - 1) %\n                this.shadingData.length\n            ];\n\n          shadingStack.push([1 - weight, previousData]);\n        }\n\n        break;\n      }\n    }\n\n    const weightedTopRGB = [0, 0, 0];\n    const weightedMiddleRGB = [0, 0, 0];\n    const weightedBottomRGB = [0, 0, 0];\n    let weightedSkyOffset = 0;\n    let weightedVoidOffset = 0;\n\n    const emptyRGB = {\n      r: 0,\n      g: 0,\n      b: 0,\n    };\n\n    shadingStack.forEach(([weight, data]) => {\n      const {\n        skyOffset,\n        voidOffset,\n        color: { top, middle, bottom },\n      } = data;\n\n      const topColor = new Color(top).convertLinearToSRGB();\n      const middleColor = new Color(middle).convertLinearToSRGB();\n      const bottomColor = new Color(bottom).convertLinearToSRGB();\n\n      topColor.getRGB(emptyRGB);\n      weightedTopRGB[0] += emptyRGB.r * weight;\n      weightedTopRGB[1] += emptyRGB.g * weight;\n      weightedTopRGB[2] += emptyRGB.b * weight;\n\n      middleColor.getRGB(emptyRGB);\n      weightedMiddleRGB[0] += emptyRGB.r * weight;\n      weightedMiddleRGB[1] += emptyRGB.g * weight;\n      weightedMiddleRGB[2] += emptyRGB.b * weight;\n\n      bottomColor.getRGB(emptyRGB);\n      weightedBottomRGB[0] += emptyRGB.r * weight;\n      weightedBottomRGB[1] += emptyRGB.g * weight;\n      weightedBottomRGB[2] += emptyRGB.b * weight;\n\n      weightedSkyOffset += weight * skyOffset;\n      weightedVoidOffset += weight * voidOffset;\n    });\n\n    this.uTopColor.value.setRGB(\n      weightedTopRGB[0],\n      weightedTopRGB[1],\n      weightedTopRGB[2]\n    );\n\n    this.uMiddleColor.value.setRGB(\n      weightedMiddleRGB[0],\n      weightedMiddleRGB[1],\n      weightedMiddleRGB[2]\n    );\n\n    this.uBottomColor.value.setRGB(\n      weightedBottomRGB[0],\n      weightedBottomRGB[1],\n      weightedBottomRGB[2]\n    );\n\n    this.uSkyOffset.value = weightedSkyOffset;\n    this.uVoidOffset.value = weightedVoidOffset;\n  };\n\n  /**\n   * Create the dodecahedron sky gradient.\n   */\n  private createSkyShading = () => {\n    const {\n      color: { top, middle, bottom },\n      skyOffset,\n      voidOffset,\n    } = {\n      color: {\n        top: \"#222\",\n        middle: \"#222\",\n        bottom: \"#222\",\n      },\n      skyOffset: 0,\n      voidOffset: 1200,\n    };\n\n    this.uTopColor = {\n      value: new Color(top),\n    };\n    this.uMiddleColor = {\n      value: new Color(middle),\n    };\n    this.uBottomColor = {\n      value: new Color(bottom),\n    };\n    this.uSkyOffset = {\n      value: skyOffset,\n    };\n    this.uVoidOffset = {\n      value: voidOffset,\n    };\n\n    const shadingGeometry = new DodecahedronGeometry(this.options.dimension, 2);\n    const shadingMaterial = new ShaderMaterial({\n      uniforms: {\n        uTopColor: this.uTopColor,\n        uMiddleColor: this.uMiddleColor,\n        uBottomColor: this.uBottomColor,\n        uSkyOffset: this.uSkyOffset,\n        uVoidOffset: this.uVoidOffset,\n        uExponent: { value: 0.6 },\n        uExponent2: { value: 1.2 },\n      },\n      vertexShader: SkyVertexShader,\n      fragmentShader: SkyFragmentShader,\n      depthWrite: false,\n      side: BackSide,\n    });\n    const shadingMesh = new Mesh(shadingGeometry, shadingMaterial);\n\n    // We use attach here so that the sky shading is not affected by the box's rotation.\n    this.attach(shadingMesh);\n  };\n}\n","import {\n  ArrowHelper,\n  Color,\n  CylinderGeometry,\n  Mesh,\n  MeshBasicMaterial,\n} from \"three\";\n\n/**\n * Parameters to create an arrow.\n */\nexport type ArrowOptions = {\n  /**\n   * The radius of the body of the arrow. Defaults to `0.1`.\n   */\n  radius: number;\n\n  /**\n   * The height of the body of the arrow. Defaults to `0.8`.\n   */\n  height: number;\n\n  /**\n   * The radius of the head of the arrow. Defaults to `0.2`.\n   */\n  coneRadius: number;\n\n  /**\n   * The height of the head of the arrow. Defaults to `0.2`.\n   */\n  coneHeight: number;\n\n  /**\n   * The color of the arrow. Defaults to `red`.\n   */\n  color: string | Color;\n};\n\nconst defaultOptions: ArrowOptions = {\n  radius: 0.1,\n  height: 0.8,\n  coneRadius: 0.2,\n  coneHeight: 0.2,\n  color: \"red\",\n};\n\n/**\n * A helper for visualizing a direction. This is useful for debugging.\n *\n * This arrow is essentially a Voxelize version of the [`ArrowHelper`](https://threejs.org/docs/#api/en/helpers/ArrowHelper) from Three.js.\n *\n * # Example\n * ```ts\n * const arrow = new VOXELIZE.Arrow();\n *\n * arrow.position.set(10, 0, 10);\n * arrow.setDirection(new THREE.Vector3(1, 0, 0));\n *\n * world.add(arrow);\n * ```\n *\n * ![Arrow](/img/docs/arrow.png)\n *\n * @noInheritDoc\n */\nexport class Arrow extends ArrowHelper {\n  /**\n   * Parameters used to create the arrow.\n   */\n  public options: ArrowOptions;\n\n  /**\n   * Create a new arrow.\n   *\n   * @param options - Parameters to create the arrow.\n   */\n  constructor(options: Partial<ArrowOptions> = {}) {\n    super();\n\n    const { radius, height, coneRadius, coneHeight } = (this.options = {\n      ...defaultOptions,\n      ...options,\n    });\n\n    const color =\n      typeof this.options.color === \"string\"\n        ? new Color(this.options.color)\n        : this.options.color;\n\n    [...this.children].forEach((child) => this.remove(child));\n\n    this.add(\n      new Mesh(\n        new CylinderGeometry(radius, radius, height),\n        new MeshBasicMaterial({ color })\n      )\n    );\n\n    const cone = new Mesh(\n      new CylinderGeometry(0, coneRadius, coneHeight),\n      new MeshBasicMaterial({ color })\n    );\n    cone.position.y = (coneHeight + height) / 2;\n\n    this.add(cone);\n  }\n}\n","/**\n * This module is used to separate plain text into colored text objects to be further rendered.\n *\n * # Example\n * ```ts\n * const text = \"$green$Hello, world!$yellow$The rest is yellow.\";\n *\n * // Change the default splitter.\n * ColorText.SPLITTER = \"$\";\n *\n * // Parse the text into colored text objects.\n * const splitted = ColorText.split(text);\n *\n * // Expected:\n * // [\n * //   {\n * //     text: \"Hello, world!\",\n * //     color: \"green\"\n * //   },\n * //   {\n * //     text: \"The rest is yellow.\",\n * //     color: \"yellow\"\n * //   },\n * // ]\n * ```\n *\n * ![ColorText](/img/docs/colortext.png)\n *\n * @category Effects\n */\nexport class ColorText {\n  /**\n   * The symbol used to separate a text into a colored text object array.\n   */\n  public static SPLITTER = \"∆\";\n\n  /**\n   * Split a text into a colored text object array by {@link ColorText.SPLITTER}.\n   *\n   * @param text The text to split.\n   * @param defaultColor The default color to apply to the text.\n   * @returns An array of colored text objects.\n   */\n  public static split(\n    text: string,\n    defaultColor = \"black\"\n  ): { color: string; text: string }[] {\n    const splitted = text\n      .split(\n        new RegExp(\n          `(\\\\${ColorText.SPLITTER}[^\\\\${ColorText.SPLITTER}]*\\\\${ColorText.SPLITTER})`\n        )\n      )\n      .filter(Boolean);\n\n    if (splitted.length) {\n      if (!splitted[0].includes(ColorText.SPLITTER)) {\n        splitted.unshift(\n          `${ColorText.SPLITTER}${defaultColor}${ColorText.SPLITTER}`\n        );\n      }\n\n      if (splitted[splitted.length - 1].includes(ColorText.SPLITTER)) {\n        splitted.push(\"\");\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < splitted.length; i += 2) {\n      const color = splitted[i].substring(1, splitted[i].length - 1);\n      const text = splitted[i + 1];\n\n      result.push({ color, text });\n    }\n\n    return result;\n  }\n}\n","import { LinearFilter, Sprite, SpriteMaterial, Texture } from \"three\";\n\nimport { ColorText } from \"./color-text\";\n\n/**\n * A sprite that can be used to display text. This is highly inspired by the\n * [THREE.SpriteText](https://github.com/vasturiano/three-spritetext) library.\n *\n * Sprite text uses {@link ColorText} internally to generate the texture that supports\n * multiple colors in the same text.\n *\n * ![Sprite text](/img/docs/sprite-text.png)\n *\n * @noInheritDoc\n */\nexport class SpriteText extends Sprite {\n  private _text: string;\n  private _textHeight: number;\n  private _backgroundColor: false | string;\n\n  private _padding = 0;\n  private _borderWidth = 0;\n  private _borderRadius = 0;\n  private _borderColor = \"white\";\n\n  private _strokeWidth = 0;\n  private _strokeColor = \"white\";\n\n  private _fontFace = \"Arial\";\n  private _fontSize = 90;\n  private _fontWeight = \"normal\";\n\n  private _canvas = document.createElement(\"canvas\");\n\n  /**\n   * Create a new sprite text.\n   *\n   * @param text The text to display.\n   * @param textHeight The height of the text in pixels.\n   */\n  constructor(text = \"\", textHeight = 10) {\n    super(new SpriteMaterial());\n\n    this._text = `${text}`;\n    this._textHeight = textHeight;\n    this._backgroundColor = false;\n\n    this.generate();\n  }\n\n  /**\n   * Get the text rendered in the sprite.\n   */\n  get text() {\n    return this._text;\n  }\n\n  /**\n   * Set the text to display. This will regenerate the sprite.\n   */\n  set text(text) {\n    this._text = text;\n    this.generate();\n  }\n\n  /**\n   * Get the text height in pixels.\n   */\n  get textHeight() {\n    return this._textHeight;\n  }\n\n  /**\n   * Set the text height to display. This will regenerate the sprite.\n   */\n  set textHeight(textHeight) {\n    this._textHeight = textHeight;\n    this.generate();\n  }\n\n  /**\n   * Get the background color of the sprite text.\n   */\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  /**\n   * Set the background color of the sprite text. This will regenerate the sprite.\n   */\n  set backgroundColor(color) {\n    this._backgroundColor = color;\n    this.generate();\n  }\n\n  /**\n   * Get the padding of the sprite text. This is the space between the text and\n   * the border.\n   */\n  get padding() {\n    return this._padding;\n  }\n\n  /**\n   * Set the padding of the sprite text. This is the space between the text and\n   * the border. This will regenerate the sprite.\n   */\n  set padding(padding) {\n    this._padding = padding;\n    this.generate();\n  }\n\n  /**\n   * Get the border width of the sprite text.\n   */\n  get borderWidth() {\n    return this._borderWidth;\n  }\n\n  /**\n   * Set the border width of the sprite text. This will regenerate the sprite.\n   */\n  set borderWidth(borderWidth) {\n    this._borderWidth = borderWidth;\n    this.generate();\n  }\n\n  /**\n   * Get the border radius of the sprite text.\n   */\n  get borderRadius() {\n    return this._borderRadius;\n  }\n\n  /**\n   * Set the border radius of the sprite text. This will regenerate the sprite.\n   */\n  set borderRadius(borderRadius) {\n    this._borderRadius = borderRadius;\n    this.generate();\n  }\n\n  /**\n   * Get the border color of the sprite text.\n   */\n  get borderColor() {\n    return this._borderColor;\n  }\n\n  /**\n   * Set the border color of the sprite text. This will regenerate the sprite.\n   */\n  set borderColor(borderColor) {\n    this._borderColor = borderColor;\n    this.generate();\n  }\n\n  /**\n   * Get the font face of the sprite text.\n   */\n  get fontFace() {\n    return this._fontFace;\n  }\n\n  /**\n   * Set the font face of the sprite text. This will regenerate the sprite.\n   */\n  set fontFace(fontFace) {\n    this._fontFace = fontFace;\n    this.generate();\n  }\n\n  /**\n   * Get the font size of the sprite text.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n\n  /**\n   * Set the font size of the sprite text. This will regenerate the sprite.\n   */\n  set fontSize(fontSize) {\n    this._fontSize = fontSize;\n    this.generate();\n  }\n\n  /**\n   * Get the font weight of the sprite text.\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n\n  /**\n   * Set the font weight of the sprite text. This will regenerate the sprite.\n   */\n  set fontWeight(fontWeight) {\n    this._fontWeight = fontWeight;\n    this.generate();\n  }\n\n  /**\n   * Get the stroke width of the sprite text.\n   */\n  get strokeWidth() {\n    return this._strokeWidth;\n  }\n\n  /**\n   * Set the stroke width of the sprite text. This will regenerate the sprite.\n   */\n  set strokeWidth(strokeWidth) {\n    this._strokeWidth = strokeWidth;\n    this.generate();\n  }\n\n  /**\n   * Get the stroke color of the sprite text. In other words, the color of the\n   * text.\n   */\n  get strokeColor() {\n    return this._strokeColor;\n  }\n\n  /**\n   * Set the stroke color of the sprite text. In other words, the color of the\n   * text. This will regenerate the sprite.\n   */\n  set strokeColor(strokeColor) {\n    this._strokeColor = strokeColor;\n    this.generate();\n  }\n\n  /**\n   * Regenerate the sprite text.\n   */\n  private generate = () => {\n    const canvas = this._canvas;\n    const ctx = canvas.getContext(\"2d\");\n\n    const border = Array.isArray(this.borderWidth)\n      ? this.borderWidth\n      : [this.borderWidth, this.borderWidth]; // x,y border\n    const relBorder = border.map((b) => b * this.fontSize * 0.1) as [\n      number,\n      number\n    ]; // border in canvas units\n\n    const borderRadius = Array.isArray(this.borderRadius)\n      ? this.borderRadius\n      : [\n          this.borderRadius,\n          this.borderRadius,\n          this.borderRadius,\n          this.borderRadius,\n        ]; // tl tr br bl corners\n    const relBorderRadius = borderRadius.map((b) => b * this.fontSize * 0.1); // border radius in canvas units\n\n    const padding = Array.isArray(this.padding)\n      ? this.padding\n      : [this.padding, this.padding]; // x,y padding\n    const relPadding = padding.map((p) => p * this.fontSize * 0.1) as [\n      number,\n      number\n    ]; // padding in canvas units\n\n    const lines = this.text.split(\"\\n\");\n    const font = `${this.fontWeight} ${this.fontSize}px ${this.fontFace}`;\n\n    ctx.font = font; // measure canvas with appropriate font\n    const innerWidth = Math.max(\n      ...lines.map((line) => {\n        const splitted = ColorText.split(line);\n\n        let sumLength = 0;\n        splitted.forEach(\n          ({ text }) => (sumLength += ctx.measureText(text).width)\n        );\n\n        return sumLength;\n      })\n    );\n    const innerHeight = this.fontSize * lines.length;\n    canvas.width = innerWidth + relBorder[0] * 2 + relPadding[0] * 2;\n    canvas.height = innerHeight + relBorder[1] * 2 + relPadding[1] * 2;\n\n    // paint border\n    if (this.borderWidth) {\n      ctx.strokeStyle = this.borderColor;\n\n      if (relBorder[0]) {\n        // left + right borders\n        const hb = relBorder[0] / 2;\n        ctx.lineWidth = relBorder[0];\n        ctx.beginPath();\n        ctx.moveTo(hb, relBorderRadius[0]);\n        ctx.lineTo(hb, canvas.height - relBorderRadius[3]);\n        ctx.moveTo(canvas.width - hb, relBorderRadius[1]);\n        ctx.lineTo(canvas.width - hb, canvas.height - relBorderRadius[2]);\n        ctx.stroke();\n      }\n\n      if (relBorder[1]) {\n        // top + bottom borders\n        const hb = relBorder[1] / 2;\n        ctx.lineWidth = relBorder[1];\n        ctx.beginPath();\n        ctx.moveTo(Math.max(relBorder[0], relBorderRadius[0]), hb);\n        ctx.lineTo(\n          canvas.width - Math.max(relBorder[0], relBorderRadius[1]),\n          hb\n        );\n        ctx.moveTo(\n          Math.max(relBorder[0], relBorderRadius[3]),\n          canvas.height - hb\n        );\n        ctx.lineTo(\n          canvas.width - Math.max(relBorder[0], relBorderRadius[2]),\n          canvas.height - hb\n        );\n        ctx.stroke();\n      }\n\n      if (this.borderRadius) {\n        // strike rounded corners\n        const cornerWidth = Math.max(...relBorder);\n        const hb = cornerWidth / 2;\n        ctx.lineWidth = cornerWidth;\n        ctx.beginPath();\n        [\n          !!relBorderRadius[0] && [\n            relBorderRadius[0],\n            hb,\n            hb,\n            relBorderRadius[0],\n          ],\n          !!relBorderRadius[1] && [\n            canvas.width - relBorderRadius[1],\n            canvas.width - hb,\n            hb,\n            relBorderRadius[1],\n          ],\n          !!relBorderRadius[2] && [\n            canvas.width - relBorderRadius[2],\n            canvas.width - hb,\n            canvas.height - hb,\n            canvas.height - relBorderRadius[2],\n          ],\n          !!relBorderRadius[3] && [\n            relBorderRadius[3],\n            hb,\n            canvas.height - hb,\n            canvas.height - relBorderRadius[3],\n          ],\n        ]\n          .filter((d) => d)\n          .forEach(([x0, x1, y0, y1]) => {\n            ctx.moveTo(x0, y0);\n            ctx.quadraticCurveTo(x1, y0, x1, y1);\n          });\n        ctx.stroke();\n      }\n    }\n\n    // paint background\n    if (this.backgroundColor) {\n      ctx.fillStyle = this.backgroundColor;\n      if (!this.borderRadius) {\n        ctx.fillRect(\n          relBorder[0],\n          relBorder[1],\n          canvas.width - relBorder[0] * 2,\n          canvas.height - relBorder[1] * 2\n        );\n      } else {\n        // fill with rounded corners\n        ctx.beginPath();\n        ctx.moveTo(relBorder[0], relBorderRadius[0]);\n        [\n          [\n            relBorder[0],\n            relBorderRadius[0],\n            canvas.width - relBorderRadius[1],\n            relBorder[1],\n            relBorder[1],\n            relBorder[1],\n          ], // t\n          [\n            canvas.width - relBorder[0],\n            canvas.width - relBorder[0],\n            canvas.width - relBorder[0],\n            relBorder[1],\n            relBorderRadius[1],\n            canvas.height - relBorderRadius[2],\n          ], // r\n          [\n            canvas.width - relBorder[0],\n            canvas.width - relBorderRadius[2],\n            relBorderRadius[3],\n            canvas.height - relBorder[1],\n            canvas.height - relBorder[1],\n            canvas.height - relBorder[1],\n          ], // b\n          [\n            relBorder[0],\n            relBorder[0],\n            relBorder[0],\n            canvas.height - relBorder[1],\n            canvas.height - relBorderRadius[3],\n            relBorderRadius[0],\n          ], // t\n        ].forEach(([x0, x1, x2, y0, y1, y2]) => {\n          ctx.quadraticCurveTo(x0, y0, x1, y1);\n          ctx.lineTo(x2, y2);\n        });\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n\n    ctx.translate(...relBorder);\n    ctx.translate(...relPadding);\n\n    // paint text\n    ctx.font = font; // Set font again after canvas is resized, as context properties are reset\n    ctx.textBaseline = \"bottom\";\n\n    const drawTextStroke = this.strokeWidth > 0;\n    if (drawTextStroke) {\n      ctx.lineWidth = (this.strokeWidth * this.fontSize) / 10;\n      ctx.strokeStyle = this.strokeColor;\n    }\n\n    lines.forEach((line, index) => {\n      const splitted = ColorText.split(line, this.strokeColor);\n\n      let sumLength = 0;\n      splitted.forEach(\n        ({ text }) => (sumLength += ctx.measureText(text).width)\n      );\n\n      let lineX = (innerWidth - sumLength) / 2;\n      const lineY = (index + 1) * this.fontSize;\n\n      splitted.forEach(({ color, text }) => {\n        ctx.fillStyle = color;\n        ctx.fillText(text, lineX, lineY);\n        drawTextStroke && ctx.strokeText(text, lineX, lineY);\n        ctx.fillText(text, lineX, lineY);\n        lineX += ctx.measureText(text).width;\n      });\n    });\n\n    // Inject canvas into sprite\n    if (this.material.map) this.material.map.dispose(); // gc previous texture\n    const texture = (this.material.map = new Texture(canvas));\n    texture.minFilter = LinearFilter;\n    texture.needsUpdate = true;\n\n    const yScale =\n      this.textHeight * lines.length + border[1] * 2 + padding[1] * 2;\n    this.scale.set((yScale * canvas.width) / canvas.height, yScale, 0);\n  };\n}\n","import { NearestFilter } from \"three\";\n\nimport { SpriteText } from \"./sprite-text\";\n\n/**\n * Parameters to create a name tag.\n */\nexport type NameTagOptions = {\n  /**\n   * The font face to create the name tag. Defaults to `\"monospace\"`.\n   */\n  fontFace?: string;\n\n  /**\n   * The font size to create the name tag. Defaults to `0.1`.\n   */\n  fontSize?: number;\n\n  /**\n   * The y-offset of the nametag moved upwards. Defaults to `0`.\n   */\n  yOffset?: number;\n\n  /**\n   * The color of the name tag. Defaults to `0xffffff`.\n   */\n  color?: string;\n\n  /**\n   * The background color of the name tag. Defaults to `0x00000077`.\n   */\n  backgroundColor?: string;\n};\n\nconst defaultOptions: NameTagOptions = {\n  fontFace: \"monospace\",\n  fontSize: 0.1,\n  yOffset: 0,\n  color: \"#ffffff\",\n  backgroundColor: \"#00000077\",\n};\n\n/**\n * A class that allows you to create a name tag mesh. This name tag mesh also supports colored text\n * using the {@link ColorText} syntax. Name tags can be treated like any other mesh.\n *\n * ![Name tag](/img/docs/nametag.png)\n *\n * @noInheritDoc\n */\nexport class NameTag extends SpriteText {\n  constructor(text: string, options: Partial<NameTagOptions> = {}) {\n    super(text, options.fontSize ?? defaultOptions.fontSize);\n\n    const { fontFace, yOffset, backgroundColor, color } = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.fontFace = fontFace;\n    this.position.y += yOffset;\n    this.backgroundColor = backgroundColor;\n    this.material.depthTest = false;\n    this.renderOrder = 1000000000000;\n    this.strokeColor = color;\n\n    const image = this.material.map;\n\n    if (image) {\n      image.minFilter = NearestFilter;\n      image.magFilter = NearestFilter;\n    }\n  }\n}\n","import {\n  Color,\n  DoubleSide,\n  Group,\n  MathUtils,\n  Quaternion,\n  Vector3,\n} from \"three\";\n\nimport { MathUtils as VoxMathUtils } from \"../utils\";\n\nimport { CanvasBox, CanvasBoxOptions } from \"./canvas-box\";\nimport { NameTag, NameTagOptions } from \"./nametag\";\n\nconst CHARACTER_SCALE = 0.9;\n\nexport const ARM_COLOR = \"#548ca8\";\n\n/**\n * Parameters to create a character's head.\n * Defaults to:\n * ```ts\n * {\n *   gap: 0.1 * CHARACTER_SCALE,\n *   layers: 1,\n *   side: THREE.DoubleSide,\n *   width: 0.5 * CHARACTER_SCALE,\n *   widthSegments: 16,\n *   height: 0.25 * CHARACTER_SCALE,\n *   heightSegments: 8,\n *   depth: 0.5 * CHARACTER_SCALE,\n *   depthSegments: 16,\n *   neckGap: 0.05 * CHARACTER_SCALE,\n * }\n * ```\n * where `CHARACTER_SCALE` is 0.9.\n */\nexport type HeadOptions = CanvasBoxOptions & {\n  /**\n   * The distance between the head and the body.\n   */\n  neckGap?: number;\n};\n\n/**\n * Parameters to create a character's body.\n * Defaults to:\n * ```ts\n * {\n *   gap: 0.1 * CHARACTER_SCALE,\n *   layers: 1,\n *   side: THREE.DoubleSide,\n *   width: 1 * CHARACTER_SCALE,\n *   widthSegments: 16,\n * }\n * ```\n * where `CHARACTER_SCALE` is 0.9.\n */\nexport type BodyOptions = CanvasBoxOptions;\n\n/**\n * Parameters to create the legs of a character.\n * Defaults to:\n * ```ts\n * {\n *   gap: 0.1 * CHARACTER_SCALE,\n *   layers: 1,\n *   side: THREE.DoubleSide,\n *   width: 0.25 * CHARACTER_SCALE,\n *   widthSegments: 3,\n *   height: 0.25 * CHARACTER_SCALE,\n *   heightSegments: 3,\n *   depth: 0.25 * CHARACTER_SCALE,\n *   depthSegments: 3,\n *   betweenLegsGap: 0.2 * CHARACTER_SCALE,\n * }\n * ```\n * where `CHARACTER_SCALE` is 0.9.\n */\n\nexport type LegOptions = CanvasBoxOptions & {\n  /**\n   * The gap between the legs.\n   */\n  betweenLegsGap?: number;\n};\n\n/**\n * Parameters to create a character's arms.\n * Defaults to:\n * ```ts\n * {\n *   gap: 0.1 * CHARACTER_SCALE,\n *   layers: 1,\n *   side: THREE.DoubleSide,\n *   width: 0.25 * CHARACTER_SCALE,\n *   widthSegments: 8,\n *   height: 0.5 * CHARACTER_SCALE,\n *   heightSegments: 16,\n *   depth: 0.25 * CHARACTER_SCALE,\n *   depthSegments: 8,\n *   shoulderGap: 0.05 * CHARACTER_SCALE,\n *   shoulderDrop: 0.25 * CHARACTER_SCALE,\n * }\n * ```\n */\nexport type ArmsOptions = CanvasBoxOptions & {\n  /**\n   * The distance from the top of the body to the top of the arms.\n   */\n  shoulderDrop?: number;\n\n  /**\n   * The distance between the body and each arm.\n   */\n  shoulderGap?: number;\n};\n\n/**\n * Parameters to create a character.\n */\nexport type CharacterOptions = {\n  /**\n   * The lerp factor of the swinging motion of the arms and legs. Defaults to `0.8`.\n   */\n  swingLerp?: number;\n\n  /**\n   * The speed at which the arms swing when the character is moving. Defaults to `1.4`.\n   */\n  walkingSpeed?: number;\n\n  /**\n   * The speed at which the arms swing when the character is idle. Defaults to `0.06`.\n   */\n  idleArmSwing?: number;\n\n  /**\n   * The lerp factor of the character's position change. Defaults to `0.7`.\n   */\n  positionLerp?: number;\n\n  /**\n   * The lerp factor of the character's rotation change. Defaults to `0.2`.\n   */\n  rotationLerp?: number;\n\n  nameTagOptions?: Partial<NameTagOptions>;\n\n  /**\n   * Parameters to create the character's head.\n   */\n  head?: Partial<HeadOptions>;\n\n  /**\n   * Parameters to create the character's body.\n   */\n  body?: Partial<BodyOptions>;\n\n  /**\n   * Parameters to create the character's legs.\n   */\n  legs?: Partial<LegOptions>;\n\n  /**\n   * Parameters to create the character's arms.\n   */\n  arms?: Partial<ArmsOptions>;\n};\n\nconst defaultCharacterOptions: CharacterOptions = {\n  swingLerp: 0.8,\n  walkingSpeed: 1.4,\n  positionLerp: 0.7,\n  rotationLerp: 0.2,\n  idleArmSwing: 0.06,\n};\n\nconst defaultHeadOptions: HeadOptions = {\n  gap: 0.1 * CHARACTER_SCALE,\n  layers: 1,\n  side: DoubleSide,\n  width: 0.5 * CHARACTER_SCALE,\n  widthSegments: 16,\n  height: 0.25 * CHARACTER_SCALE,\n  heightSegments: 8,\n  depth: 0.5 * CHARACTER_SCALE,\n  depthSegments: 16,\n  neckGap: 0.05 * CHARACTER_SCALE,\n};\n\nconst defaultBodyOptions: BodyOptions = {\n  gap: 0.1 * CHARACTER_SCALE,\n  layers: 1,\n  side: DoubleSide,\n  width: 1 * CHARACTER_SCALE,\n  widthSegments: 16,\n};\n\nconst defaultArmsOptions: ArmsOptions = {\n  gap: 0.1 * CHARACTER_SCALE,\n  layers: 1,\n  side: DoubleSide,\n  width: 0.25 * CHARACTER_SCALE,\n  height: 0.5 * CHARACTER_SCALE,\n  depth: 0.25 * CHARACTER_SCALE,\n  widthSegments: 8,\n  heightSegments: 16,\n  depthSegments: 8,\n  shoulderGap: 0.05 * CHARACTER_SCALE,\n  shoulderDrop: 0.25 * CHARACTER_SCALE,\n};\n\nconst defaultLegsOptions: LegOptions = {\n  gap: 0.1 * CHARACTER_SCALE,\n  layers: 1,\n  side: DoubleSide,\n  width: 0.25 * CHARACTER_SCALE,\n  height: 0.25 * CHARACTER_SCALE,\n  depth: 0.25 * CHARACTER_SCALE,\n  widthSegments: 3,\n  heightSegments: 3,\n  depthSegments: 3,\n  betweenLegsGap: 0.2 * CHARACTER_SCALE,\n};\n\n/**\n * The default Voxelize character. This can be used in `Peers.createPeer` to apply characters onto\n * multiplayer peers. This can also be **attached** to a `RigidControls` instance to have a character\n * follow the controls.\n *\n * When `character.set` is called, the character's head will be lerp to the new rotation first, then the\n * body will be lerp to the new rotation. This is to create a more natural looking of character rotation.\n *\n * # Example\n * ```ts\n * const character = new VOXELIZE.Character();\n *\n * // Set the nametag content.\n * character.username = \"<placeholder>\";\n *\n * // Load a texture to paint on the face.\n * world.loader.addTexture(FunnyImageSrc, (texture) => {\n *   character.head.paint(\"front\", texture);\n * })\n *\n * // Attach the character to a rigid controls.\n * controls.attachCharacter(character);\n * ```\n *\n * ![Character](/img/docs/character.png)\n *\n * @noInheritDoc\n */\nexport class Character extends Group {\n  /**\n   * Parameters to create a Voxelize character.\n   */\n  public options: CharacterOptions;\n\n  /**\n   * The sub-mesh holding the character's head.\n   */\n  public headGroup: Group;\n\n  /**\n   * The sub-mesh holding the character's body.\n   */\n  public bodyGroup: Group;\n\n  /**\n   * The sub-mesh holding the character's left arm.\n   */\n  public leftArmGroup: Group;\n\n  /**\n   * The sub-mesh holding the character's right arm.\n   */\n  public rightArmGroup: Group;\n\n  /**\n   * The sub-mesh holding the character's left leg.\n   */\n  public leftLegGroup: Group;\n\n  /**\n   * The sub-mesh holding the character's right leg.\n   */\n  public rightLegGroup: Group;\n\n  /**\n   * The actual head mesh as a paint-able `CanvasBox`.\n   */\n  public head: CanvasBox;\n\n  /**\n   * The actual body mesh as a paint-able `CanvasBox`.\n   */\n  public body: CanvasBox;\n\n  /**\n   * The actual left arm mesh as a paint-able `CanvasBox`.\n   */\n  public leftArm: CanvasBox;\n\n  /**\n   * The actual right arm mesh as a paint-able `CanvasBox`.\n   */\n  public rightArm: CanvasBox;\n\n  /**\n   * The actual left leg mesh as a paint-able `CanvasBox`.\n   */\n  public leftLeg: CanvasBox;\n\n  /**\n   * The actual right leg mesh as a paint-able `CanvasBox`.\n   */\n  public rightLeg: CanvasBox;\n\n  /**\n   * The nametag of the character that floats right above the head.\n   */\n  public nametag: NameTag;\n\n  /**\n   * The speed where the character has detected movements at. When speed is 0, the\n   * arms swing slowly in idle mode, and when speed is greater than 0, the arms swing\n   * faster depending on the passed-in options.\n   */\n  public speed = 0;\n\n  /**\n   * The new position of the character. This is used to lerp the character's position\n   */\n  public newPosition = new Vector3();\n\n  /**\n   * The new body direction of the character. This is used to lerp the character's body rotation.\n   */\n  public newBodyDirection = new Quaternion();\n\n  /**\n   * The new head direction of the character. This is used to lerp the character's head rotation.\n   */\n  public newDirection = new Quaternion();\n\n  /**\n   * Somewhere to store whatever you want.\n   */\n  public extraData: any = null;\n\n  /**\n   * A listener called when a character starts moving.\n   */\n  onMove: () => void;\n\n  /**\n   * A listener called when a character stops moving.\n   */\n  onIdle: () => void;\n\n  /**\n   * Create a new Voxelize character.\n   *\n   * @param options Parameters to create a Voxelize character.\n   */\n  constructor(options: Partial<CharacterOptions> = {}) {\n    super();\n\n    this.options = {\n      ...defaultCharacterOptions,\n      ...options,\n      head: {\n        ...defaultHeadOptions,\n        ...(options.head || {}),\n        depth:\n          options.head?.depth ||\n          options.head?.width ||\n          defaultHeadOptions.width,\n        height:\n          options.head?.height ||\n          defaultHeadOptions.height ||\n          defaultHeadOptions.width,\n      },\n      body: {\n        ...defaultBodyOptions,\n        ...(options.body || {}),\n        depth:\n          options.body?.depth ||\n          defaultBodyOptions.depth ||\n          defaultBodyOptions.width,\n        height:\n          options.body?.height ||\n          defaultBodyOptions.height ||\n          defaultBodyOptions.width,\n      },\n      arms: {\n        ...defaultArmsOptions,\n        ...(options.arms || {}),\n        depth: options.arms?.depth || defaultArmsOptions.width,\n        height: options.arms?.height || defaultArmsOptions.height,\n      },\n      legs: {\n        ...defaultLegsOptions,\n        ...(options.legs || {}),\n        depth: options.legs?.depth || defaultLegsOptions.width,\n        height: options.legs?.height || defaultLegsOptions.height,\n      },\n    };\n\n    this.createModel();\n  }\n\n  /**\n   * Update the character's animation and rotation. After `set` is called, `update` must be called to\n   * actually lerp to the new position and rotation. Note that when a character is attached to a control,\n   * `update` is called automatically within the control's update loop.\n   */\n  update() {\n    this.calculateDelta();\n    this.playArmSwingAnimation();\n    this.playWalkingAnimation();\n    this.lerpAll();\n  }\n\n  /**\n   * Set the character's position and direction that its body is situated at and the head is looking\n   * at. This uses `MathUtils.directionToQuaternion` to slerp the head's rotation to the new direction.\n   *\n   * The `update` needs to be called to actually lerp to the new position and rotation.\n   *\n   * @param position The new position of the character.\n   * @param direction The new direction of the character.\n   */\n  set(position: number[], direction: number[]) {\n    if (!position || !direction) return;\n\n    this.newPosition.set(position[0], position[1], position[2]);\n\n    this.newDirection.copy(\n      VoxMathUtils.directionToQuaternion(\n        direction[0],\n        direction[1],\n        direction[2]\n      )\n    );\n    this.newBodyDirection.copy(\n      VoxMathUtils.directionToQuaternion(direction[0], 0, direction[2])\n    );\n  }\n\n  /**\n   * Change the content of the user's nametag. If the nametag is empty, nothing will be rendered.\n   */\n  set username(username: string) {\n    if (!this.nametag) {\n      this.nametag = new NameTag(username, {\n        yOffset: this.head.height / 2 + 0.2,\n        fontSize: 0.2,\n        ...(this.options.nameTagOptions ?? {}),\n      });\n      this.add(this.nametag);\n    }\n\n    if (!username) {\n      this.nametag.visible = false;\n      return;\n    }\n\n    this.nametag.text = username;\n  }\n\n  /**\n   * Get the content of the nametag of the character.\n   */\n  get username() {\n    return this.nametag ? this.nametag.text : \"\";\n  }\n\n  /**\n   * Get the height at which the eye of the character is situated at.\n   */\n  get eyeHeight() {\n    return (\n      this.options.legs.height +\n      this.options.body.height +\n      this.options.head.neckGap +\n      this.options.head.height / 2\n    );\n  }\n\n  /**\n   * Get the total height of the character, in other words, the sum of the heights of\n   * the head, body, and legs.\n   */\n  get totalHeight() {\n    return (\n      this.options.legs.height +\n      this.options.body.height +\n      this.options.head.neckGap +\n      this.options.head.height\n    );\n  }\n\n  set bodyColor(color: string) {\n    this.body.paint(\"all\", new Color(color));\n  }\n\n  set armColor(color: string) {\n    this.leftArm.paint(\"all\", new Color(color));\n    this.rightArm.paint(\"all\", new Color(color));\n  }\n\n  set legColor(color: string) {\n    this.leftLeg.paint(\"all\", new Color(color));\n    this.rightLeg.paint(\"all\", new Color(color));\n  }\n\n  set headColor(color: string) {\n    this.head.paint(\"all\", new Color(color));\n  }\n\n  set faceColor(color: string) {\n    this.head.paint(\"front\", new Color(color));\n  }\n\n  /**\n   * Create the character's model programmatically.\n   */\n  private createModel = () => {\n    const head = new CanvasBox({\n      ...defaultHeadOptions,\n      ...(this.options.head ? this.options.head : {}),\n    });\n\n    const body = new CanvasBox({\n      ...defaultBodyOptions,\n      ...(this.options.body ? this.options.body : {}),\n    });\n\n    const leftArm = new CanvasBox({\n      ...defaultArmsOptions,\n      ...(this.options.arms ? this.options.arms : {}),\n    });\n\n    const rightArm = new CanvasBox({\n      ...defaultArmsOptions,\n      ...(this.options.arms ? this.options.arms : {}),\n    });\n\n    const leftLeg = new CanvasBox({\n      ...defaultLegsOptions,\n      ...(this.options.legs ? this.options.legs : {}),\n    });\n\n    const rightLeg = new CanvasBox({\n      ...defaultLegsOptions,\n      ...(this.options.legs ? this.options.legs : {}),\n    });\n\n    this.headGroup = new Group();\n    this.bodyGroup = new Group();\n    this.leftArmGroup = new Group();\n    this.rightArmGroup = new Group();\n    this.leftLegGroup = new Group();\n    this.rightLegGroup = new Group();\n\n    this.headGroup.add(head);\n    head.position.y += head.height / 2;\n    this.headGroup.position.y += body.height + leftLeg.height;\n\n    if (this.options.head && this.options.head.neckGap) {\n      this.headGroup.position.y += this.options.head.neckGap;\n    }\n\n    this.bodyGroup.add(body);\n    body.position.y += body.height / 2;\n    this.bodyGroup.position.y += leftLeg.height;\n\n    this.leftArmGroup.add(leftArm);\n    leftArm.position.y -= leftArm.height / 2;\n    leftArm.position.x -= leftArm.width / 2;\n    this.leftArmGroup.position.y += body.height;\n    this.leftArmGroup.position.x -= body.width / 2;\n\n    this.rightArmGroup.add(rightArm);\n    rightArm.position.y -= rightArm.height / 2;\n    rightArm.position.x += rightArm.width / 2;\n    this.rightArmGroup.position.y += body.height;\n    this.rightArmGroup.position.x += body.width / 2;\n\n    if (this.options.arms) {\n      if (this.options.arms.shoulderDrop) {\n        this.leftArmGroup.position.y -= this.options.arms.shoulderDrop;\n        this.rightArmGroup.position.y -= this.options.arms.shoulderDrop;\n      }\n\n      if (this.options.arms.shoulderGap) {\n        this.leftArmGroup.position.x -= this.options.arms.shoulderGap;\n        this.rightArmGroup.position.x += this.options.arms.shoulderGap;\n      }\n    }\n\n    this.leftLegGroup.add(leftLeg);\n    leftLeg.position.y -= leftLeg.height / 2;\n    leftLeg.position.x -= leftLeg.width / 2;\n\n    this.rightLegGroup.add(rightLeg);\n    rightLeg.position.y -= rightLeg.height / 2;\n    rightLeg.position.x += rightLeg.width / 2;\n\n    if (this.options.legs && this.options.legs.betweenLegsGap) {\n      this.leftLegGroup.position.x -= this.options.legs.betweenLegsGap / 2;\n      this.rightLegGroup.position.x += this.options.legs.betweenLegsGap / 2;\n    }\n\n    head.paint(\"all\", new Color(\"#96baff\"));\n    head.paint(\"front\", new Color(\"#f99999\"));\n    body.paint(\"all\", new Color(\"#2b2e42\"));\n    leftArm.paint(\"all\", new Color(ARM_COLOR));\n    rightArm.paint(\"all\", new Color(ARM_COLOR));\n    leftLeg.paint(\"all\", new Color(\"#96baff\"));\n    rightLeg.paint(\"all\", new Color(\"#96baff\"));\n\n    this.add(this.headGroup, this.bodyGroup);\n\n    this.bodyGroup.add(\n      this.leftArmGroup,\n      this.rightArmGroup,\n      this.leftLegGroup,\n      this.rightLegGroup\n    );\n\n    // this.headGroup.position.y -= this.totalHeight / 2;\n    // this.bodyGroup.position.y -= this.totalHeight / 2;\n\n    this.headGroup.position.y -= this.eyeHeight;\n    this.bodyGroup.position.y -= this.eyeHeight;\n\n    this.head = head;\n    this.body = body;\n    this.leftArm = leftArm;\n    this.rightArm = rightArm;\n    this.leftLeg = leftLeg;\n    this.rightLeg = rightLeg;\n  };\n\n  /**\n   * Calculate the delta between the current position and the new position to determine if the character\n   * is moving or not.\n   */\n  private calculateDelta = () => {\n    const p1 = this.position.clone();\n    const p2 = this.newPosition.clone();\n    p1.y = p2.y = 0;\n    const dist = p1.distanceTo(p2);\n    if (dist > 0.00001) {\n      if (this.speed === 0) this.onMove?.();\n      this.speed = this.options.walkingSpeed;\n    } else {\n      if (this.speed > 0) this.onIdle?.();\n      this.speed = 0;\n    }\n  };\n\n  /**\n   * Lerp all character's body parts to the new position and new rotation.\n   */\n  private lerpAll = () => {\n    // POSITION FIRST!!!!\n    // or else network latency will result in a weird\n    // animation defect where body glitches out.\n    if (this.newPosition.length() !== 0) {\n      this.position.lerp(this.newPosition, this.options.positionLerp);\n    }\n\n    // Head rotates immediately.\n    if (this.newDirection.length() !== 0) {\n      this.headGroup.rotation.setFromQuaternion(this.newDirection);\n    }\n\n    if (this.newBodyDirection.length() !== 0) {\n      this.bodyGroup.quaternion.slerp(\n        this.newBodyDirection,\n        this.options.rotationLerp\n      );\n    }\n  };\n\n  /**\n   * Play the walking animation for the character, in other words the arm movements.\n   */\n  private playArmSwingAnimation = () => {\n    const scale = 100;\n    const speed = Math.max(this.speed, this.options.idleArmSwing);\n    const amplitude = speed * 1;\n\n    this.leftArmGroup.rotation.x = MathUtils.lerp(\n      this.leftArmGroup.rotation.x,\n      Math.sin((performance.now() * speed) / scale) * amplitude,\n      this.options.swingLerp\n    );\n    this.leftArmGroup.rotation.z = MathUtils.lerp(\n      this.leftArmGroup.rotation.z,\n      Math.cos((performance.now() * speed) / scale) ** 2 * amplitude * 0.1,\n      this.options.swingLerp\n    );\n\n    this.rightArmGroup.rotation.x = MathUtils.lerp(\n      this.rightArmGroup.rotation.x,\n      Math.sin((performance.now() * speed) / scale + Math.PI) * amplitude,\n      this.options.swingLerp\n    );\n    this.rightArmGroup.rotation.z = MathUtils.lerp(\n      this.rightArmGroup.rotation.z,\n      -(Math.sin((performance.now() * speed) / scale) ** 2 * amplitude * 0.1),\n      this.options.swingLerp\n    );\n  };\n\n  /**\n   * Play the walking animation for the character, in other words the leg movements.\n   */\n  private playWalkingAnimation = () => {\n    const scale = 100;\n    const amplitude = this.speed * 1;\n\n    this.leftLegGroup.rotation.x =\n      -Math.sin((performance.now() * this.speed) / scale) * amplitude;\n    this.rightLegGroup.rotation.x =\n      Math.sin((performance.now() * this.speed) / scale) * amplitude;\n  };\n}\n","import { Group } from \"three\";\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\n\nimport { DOMUtils } from \"../utils\";\n\n/**\n * Parameters to create a {@link Debug} instance.\n */\nexport type DebugOptions = {\n  /**\n   * Whether or not should [stats.js](https://github.com/mrdoob/stats.js/) be enabled. Defaults to `true`.\n   */\n  stats: boolean;\n\n  /**\n   * Whether or not should the debug panel be displayed by default when the page loads. Defaults to `true`.\n   * You can toggle the debug panel by calling {@link Debug.toggle}.\n   */\n  onByDefault: boolean;\n\n  /**\n   * Styles to apply to the wrapper of all debug entries.\n   */\n  entryStyles: Partial<CSSStyleDeclaration>;\n\n  /**\n   * A class to add to the wrapper of all debug entries.\n   */\n  entriesClass: string;\n\n  /**\n   * Styles to apply to each of the debug entry line (top left).\n   */\n  lineStyles: Partial<CSSStyleDeclaration>;\n\n  /**\n   * A class to add to each of the debug entry line (top left).\n   */\n  lineClass: string;\n\n  /**\n   * Styles to apply to the wrapper of the top-left debug panel.\n   */\n  dataStyles: Partial<CSSStyleDeclaration>;\n\n  /**\n   * A class to add to the wrapper of the top-left debug panel.\n   */\n  dataClass: string;\n\n  /**\n   * Whether or not should `Voxelize x.x.x` be displayed in the top-left debug panel. Defaults to `true`.\n   */\n  showVoxelize: boolean;\n\n  asyncPeriod: number;\n};\n\nconst defaultOptions: DebugOptions = {\n  stats: true,\n  onByDefault: true,\n  entryStyles: {},\n  entriesClass: \"debug-entries\",\n  lineStyles: {},\n  lineClass: \"debug-line\",\n  dataStyles: {},\n  dataClass: \"debug-data\",\n  showVoxelize: true,\n  asyncPeriod: 1000,\n};\n\n/**\n * A class for general debugging purposes in Voxelize, including FPS, value tracking, and real-time value testing.\n *\n * # Example\n * ```ts\n * const debug = new VOXELIZE.Debug();\n *\n * // Track the voxel property of `controls`.\n * debug.registerDisplay(\"Position\", controls, \"voxel\");\n *\n * // Add a function to track sunlight dynamically.\n * debug.registerDisplay(\"Sunlight\", () => {\n *   return world.getSunlightByVoxel(...controls.voxel);\n * });\n *\n * // In the game loop, trigger debug updates.\n * debug.update();\n * ```\n *\n * ![Debug](/img/docs/debug.png)\n *\n * @noInheritDoc\n */\nexport class Debug extends Group {\n  /**\n   * Parameters to create a {@link Debug} instance.\n   */\n  public options: DebugOptions;\n\n  /**\n   * The stats.js instance, situated in the top-left corner after the data entries.\n   */\n  public stats?: Stats;\n\n  /**\n   * The HTML element that wraps all the debug entries and stats.js instance, located\n   * on the top-left by default.\n   */\n  public dataWrapper: HTMLDivElement;\n\n  /**\n   * A HTML element wrapping all registered debug entries.\n   */\n  public entriesWrapper: HTMLDivElement;\n\n  /**\n   * The DOM element to append the debug panel to. Defaults to `document.body`.\n   */\n  public domElement: HTMLElement;\n\n  /**\n   * Data entries to track individual values.\n   */\n  private dataEntries: {\n    element: HTMLParagraphElement;\n    object?: any;\n    attribute?: any;\n    title: string;\n    formatter: (value: any) => string;\n  }[] = [];\n\n  /**\n   * Create a new {@link Debug} instance.\n   *\n   * @param domElement The DOM element to append the debug panel to.\n   * @param options Parameters to create a {@link Debug} instance.\n   */\n  constructor(\n    domElement: HTMLElement = document.body,\n    options: Partial<DebugOptions> = {}\n  ) {\n    super();\n\n    this.domElement = domElement;\n\n    const { onByDefault } = (this.options = { ...defaultOptions, ...options });\n\n    this.makeDOM();\n    this.setup();\n    this.mount();\n\n    this.toggle(onByDefault);\n  }\n\n  /**\n   * Register a new object attribute to track. Needs to call {@link Debug.update} in the game loop\n   * to update the value.\n   *\n   * @param title The title of the debug entry.\n   * @param object The object to track.\n   * @param attribute The attribute of the object to track.\n   * @param formatter A function to format the value of the attribute.\n   * @returns The debug instance for chaining.\n   */\n  registerDisplay = <T = any>(\n    title: string,\n    object?: T,\n    attribute?: keyof T,\n    formatter = (str: string) => str\n  ) => {\n    const wrapper = this.makeDataEntry();\n\n    const newEntry = {\n      title,\n      element: wrapper,\n      object: object,\n      formatter,\n      attribute,\n    };\n\n    this.dataEntries.push(newEntry);\n    this.entriesWrapper.insertBefore(wrapper, this.entriesWrapper.firstChild);\n\n    if (object.constructor.name === \"AsyncFunction\") {\n      setInterval(() => {\n        (object as any)().then((newValue: string) => {\n          wrapper.textContent = `${title ? `${title}: ` : \"\"}${formatter(\n            newValue\n          )}`;\n        });\n      }, this.options.asyncPeriod);\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove a registered object attribute from tracking.\n   *\n   * @param title The title of the debug entry.\n   */\n  removeDisplay = (title: string) => {\n    const index = this.dataEntries.findIndex((entry) => entry.title === title);\n    const entry = this.dataEntries.splice(index, 1)[0];\n\n    if (entry) {\n      this.entriesWrapper.removeChild(entry.element);\n    }\n  };\n\n  /**\n   * Add a static title to the debug entries for grouping.\n   *\n   * @param title A title to display.\n   * @returns The debug instance for chaining.\n   */\n  displayTitle = (title: string) => {\n    const newline = this.makeDataEntry(true);\n\n    newline.textContent = title;\n    this.entriesWrapper.insertBefore(newline, this.entriesWrapper.firstChild);\n\n    return this;\n  };\n\n  /**\n   * Add an empty line to the debug entries for spacing.\n   *\n   * @returns The debug instance for chaining.\n   */\n  displayNewline = () => {\n    const newline = this.makeDataEntry(true);\n    this.entriesWrapper.insertBefore(newline, this.entriesWrapper.firstChild);\n    return this;\n  };\n\n  /**\n   * Toggle the debug instance on/off.\n   *\n   * @param force Whether or not to force the debug panel to be shown/hidden.\n   */\n  toggle = (force = null) => {\n    this.visible = force !== null ? force : !this.visible;\n\n    const visibility = this.entriesWrapper.style.visibility;\n    const newVisibility = force\n      ? \"visible\"\n      : visibility === \"visible\"\n      ? \"hidden\"\n      : \"visible\";\n\n    this.entriesWrapper.style.visibility = newVisibility;\n    this.dataWrapper.style.visibility = newVisibility;\n\n    if (this.stats) {\n      this.stats.dom.style.visibility = newVisibility;\n    }\n  };\n\n  /**\n   * Update the debug entries with the latest values. This should be called in the game loop.\n   * Utilizes requestAnimationFrame to reduce lag spikes by not overloading the main thread.\n   */\n  update = () => {\n    requestAnimationFrame(() => {\n      // loop through all data entries, and get their latest updated values\n      this.dataEntries.forEach(\n        ({ element, title, attribute, object, formatter }) => {\n          if (object?.constructor?.name === \"AsyncFunction\") return;\n\n          let newValue = \"\";\n          if (object) {\n            newValue =\n              typeof object === \"function\" ? object() : object[attribute] ?? \"\";\n          }\n          element.textContent = `${title ? `${title}: ` : \"\"}${formatter(\n            newValue\n          )}`;\n        }\n      );\n    });\n\n    // fps update\n    this.stats?.update();\n  };\n  /**\n   * Make a new data entry element.\n   */\n  private makeDataEntry = (newline = false) => {\n    const dataEntry = document.createElement(\"p\");\n    dataEntry.classList.add(this.options.lineClass);\n\n    DOMUtils.applyStyles(dataEntry, {\n      ...(newline ? { height: \"16px\" } : {}),\n      ...(this.options.lineStyles || {}),\n    });\n\n    return dataEntry;\n  };\n\n  /**\n   * Prepare the debug panel to be mounted.\n   */\n  private makeDOM = () => {\n    this.dataWrapper = document.createElement(\"div\");\n    this.dataWrapper.id = \"data-wrapper\";\n    this.dataWrapper.classList.add(this.options.dataClass);\n\n    this.entriesWrapper = document.createElement(\"div\");\n    this.entriesWrapper.classList.add(this.options.entriesClass);\n\n    DOMUtils.applyStyles(this.dataWrapper, this.options.dataStyles);\n    DOMUtils.applyStyles(this.entriesWrapper, this.options.entryStyles);\n\n    if (this.options.stats) {\n      this.stats = new Stats();\n      this.stats.dom.parentNode?.removeChild(this.stats.dom);\n\n      DOMUtils.applyStyles(this.stats.dom, {\n        position: \"relative\",\n        top: \"unset\",\n        bottom: \"unset\",\n        left: \"unset\",\n        zIndex: \"1000000000000\",\n        marginTop: \"13.333px\",\n      });\n    }\n  };\n\n  /**\n   * Final setup of the debug panel.\n   */\n  private setup = () => {\n    if (this.options.showVoxelize) {\n      this.displayTitle(`Voxelize ${\"__buildVersion__\"}`);\n      this.displayNewline();\n    }\n  };\n\n  /**\n   * Mount the debug panel to the DOM.\n   */\n  private mount = () => {\n    this.dataWrapper.appendChild(this.entriesWrapper);\n\n    if (this.stats) {\n      this.dataWrapper.appendChild(this.stats?.dom);\n    }\n\n    this.domElement.appendChild(this.dataWrapper);\n  };\n}\n","import { Effect } from \"postprocessing\";\nimport { Color, PerspectiveCamera, Uniform, Vector3 } from \"three\";\n\nimport { World } from \"../../core/world\";\nimport OverlayFragmentShader from \"../../shaders/effects/overlay.frag.glsl\";\n\n/**\n * The block overlay effect is used to add a color blend whenever the camera is inside certain types of blocks.\n *\n * This module is dependent on the [`postprocessing`](https://github.com/pmndrs/postprocessing) package.\n *\n * # Example\n * ```ts\n * import { EffectComposer, RenderPass } from \"postprocessing\";\n *\n * const composer = new EffectComposer(renderer);\n * composer.addPass(new RenderPass(world, camera));\n *\n * const overlayEffect = new VOXELIZE.BlockOverlayEffect(world, camera);\n * overlayEffect.addOverlay(\"water\", new THREE.Color(\"#5F9DF7\"), 0.05);\n *\n * composer.addPass(\n *   new EffectPass(camera, overlayEffect)\n * );\n * ```\n *\n * ![Block overlay effect](/img/docs/overlay.png)\n *\n * @noInheritDoc\n * @category Effects\n */\nexport class BlockOverlayEffect extends Effect {\n  /**\n   * A map of block IDs to overlay colors.\n   */\n  private overlays: Map<number | string, [Color, number]> = new Map();\n\n  /**\n   * The old voxel ID that the camera was in.\n   */\n  private oldId: number;\n\n  /**\n   * Create a new block overlay effect.\n   *\n   * @param world The world that the effect is in.\n   * @param camera The camera that the effect is applied to.\n   */\n  constructor(public world: World, public camera: PerspectiveCamera) {\n    super(\"BlockOverlayEffect\", OverlayFragmentShader, {\n      uniforms: new Map([\n        [\"overlay\", new Uniform(new Vector3(0, 0, 1))],\n        [\"opacity\", new Uniform(0.0 as any)],\n      ]),\n    });\n  }\n\n  /**\n   * Add a new overlay to a certain voxel type.\n   *\n   * @param idOrName The block ID or name to add an overlay for.\n   * @param color The color of the overlay.\n   * @param opacity The opacity of the overlay.\n   */\n  addOverlay = (idOrName: number | string, color: Color, opacity: number) => {\n    this.overlays.set(\n      typeof idOrName === \"number\" ? idOrName : idOrName.toLowerCase(),\n      [color, opacity]\n    );\n  };\n\n  /**\n   * This is called by the effect composer to update the effect.\n   *\n   * @hidden\n   */\n  update = () => {\n    if (!this.world.isInitialized) {\n      return;\n    }\n\n    const position = new Vector3();\n    this.camera.getWorldPosition(position);\n\n    const id = this.world.getVoxelAt(position.x, position.y, position.z);\n\n    if (this.oldId !== id) {\n      this.oldId = id;\n    } else {\n      return;\n    }\n\n    const block = this.world.getBlockById(id);\n    const entry =\n      this.overlays.get(id) || this.overlays.get(block.name.toLowerCase());\n\n    if (!entry) {\n      this.opacity = 0;\n    } else {\n      this.overlay = entry[0];\n      this.opacity = entry[1];\n    }\n  };\n\n  /**\n   * Get the opacity of the overlay.\n   */\n  private get opacity() {\n    return this.uniforms.get(\"opacity\").value;\n  }\n\n  /**\n   * Set the opacity of the overlay.\n   */\n  private set opacity(value: number) {\n    this.uniforms.get(\"opacity\").value = value;\n  }\n\n  /**\n   * Get the current overlay color.\n   */\n  private get overlay() {\n    return this.uniforms.get(\"overlay\").value;\n  }\n\n  /**\n   * Set the current overlay color.\n   */\n  private set overlay(value: Color) {\n    const old = this.uniforms.get(\"overlay\").value;\n    old.x = value.r;\n    old.y = value.g;\n    old.z = value.b;\n  }\n}\n","import {\n  CircleGeometry,\n  DoubleSide,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  Vector3,\n} from \"three\";\n\nimport { World } from \"../core/world/index\";\n\n/**\n * Parameters to create a shadow.\n */\nexport type ShadowOptions = {\n  /**\n   * The maximum distance from the object to the ground to cast a shadow. The shadow's scale scales inversely with distance. Defaults to `10`.\n   */\n  maxDistance: number;\n\n  /**\n   * The maximum radius the shadow can have. That is, the radius of the shadow when the object is on the ground. Defaults to `0.5`.\n   */\n  maxRadius: number;\n};\n\nconst defaultOptions: ShadowOptions = {\n  maxDistance: 10,\n  maxRadius: 0.5,\n};\n\n/**\n * A shadow that is just a circle underneath an object that scales smaller with distance. Shadows ignore fluids.\n *\n * @noInheritDoc\n */\nexport class Shadow extends Mesh {\n  /**\n   * The options of the shadow.\n   */\n  public options: ShadowOptions;\n\n  /**\n   * The shared material for all shadows.\n   */\n  static readonly MATERIAL = new MeshBasicMaterial({\n    side: DoubleSide,\n    color: \"rgb(0,0,0)\",\n    opacity: 0.3,\n    depthWrite: false,\n    transparent: true,\n  });\n\n  /**\n   * The shared geometry for all shadows.\n   */\n  static readonly GEOMETRY = new CircleGeometry(defaultOptions.maxRadius, 30);\n\n  /**\n   * The y-offset of the shadow from the ground.\n   */\n  static readonly Y_OFFSET = 0.01;\n\n  /**\n   * Create a shadow instance.\n   *\n   * @param world The world to cast shadows in.\n   * @param options The options of the shadow.\n   */\n  constructor(public world: World, options: Partial<ShadowOptions> = {}) {\n    super(Shadow.GEOMETRY, Shadow.MATERIAL);\n\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.rotateX(Math.PI / 2);\n    this.renderOrder = -1;\n  }\n\n  /**\n   * This raycasts from the shadow's parent to the ground and determines the shadow's scale by the distance.\n   */\n  update = () => {\n    if (!this.parent) return;\n\n    const position = new Vector3();\n    this.parent.getWorldPosition(position);\n\n    const { maxDistance } = this.options;\n\n    const result = this.world.raycastVoxels(\n      position.toArray(),\n      [0, -1, 0],\n      maxDistance\n    );\n\n    this.visible = !!result;\n\n    if (!result) return;\n\n    const { point } = result;\n\n    if (isNaN(point[0])) {\n      return;\n    }\n\n    const dist = Math.sqrt(\n      (point[0] - position.x) ** 2 +\n        (point[1] - position.y) ** 2 +\n        (point[2] - position.z) ** 2\n    );\n    const scale = Math.max(1 - dist / maxDistance, 0) ** 2;\n\n    const newPosition = new Vector3(\n      point[0],\n      point[1] + Shadow.Y_OFFSET,\n      point[2]\n    );\n    newPosition.sub(position);\n\n    this.position.copy(newPosition);\n    this.scale.set(scale, scale, 1);\n  };\n}\n\n/**\n * A manager for all shadows in the world. Shadows should be updated every frame.\n *\n * # Example\n * ```ts\n * // Create a shadow manager.\n * const shadows = new VOXELIZE.Shadows(world);\n *\n * // Add a shadow to an object managed by the shadow manager.\n * shadows.add(object);\n *\n * // Update the shadows every frame.\n * shadows.update();\n * ```\n *\n * @noInheritDoc\n */\nexport class Shadows extends Array<Shadow> {\n  /**\n   * The world to cast shadows in.\n   */\n  public world: World;\n\n  /**\n   * Create a shadow manager.\n   *\n   * @param world The world to cast shadows in.\n   */\n  constructor(world: World) {\n    super();\n\n    if (!world) {\n      throw new Error(\"Shadows: world is required.\");\n    }\n\n    this.world = world;\n  }\n\n  /**\n   * Loops through all tracked shadows and updates them. This should be called every frame.\n   * This also removes any shadows that are no longer attached to an object.\n   */\n  update = () => {\n    // Remove all shadows that don't have a parent.\n    this.forEach((shadow, i) => {\n      if (!shadow.parent) {\n        this.splice(i, 1);\n      }\n    });\n\n    this.forEach((shadow) => {\n      shadow.update();\n    });\n  };\n\n  /**\n   * Add a shadow to an object under the shadow manager.\n   *\n   * @param object The object to add a shadow to.\n   * @param options The options of the shadow.\n   */\n  add = (object: Object3D, options: Partial<ShadowOptions> = {}) => {\n    const shadow = new Shadow(this.world, options);\n    object.add(shadow);\n    this.push(shadow);\n  };\n}\n","import { Color, Mesh, Object3D, Vector3 } from \"three\";\n\nimport { World } from \"../../core\";\nimport { ChunkUtils } from \"../../utils\";\nimport { NameTag } from \"../nametag\";\nimport { Shadow } from \"../shadows\";\n\nconst position = new Vector3();\n\n/**\n * Parameters to create a light shine effect.\n */\nexport type LightShinedOptions = {\n  /**\n   * The lerping factor of the brightness of each mesh. Defaults to `0.1`.\n   */\n  lerpFactor: number;\n};\n\nconst defaultOptions: LightShinedOptions = {\n  lerpFactor: 0.1,\n};\n\n/**\n * A class that allows mesh to dynamically change brightness based on the voxel light level at their position.\n *\n * By default, `VOXELIZE.Shadow` and `VOXELIZE.NameTag` is ignored by this effect.\n *\n * # Example\n * ```ts\n * // Create a light shined effect manager.\n * const lightShined = new VOXELIZE.LightShined();\n *\n * // Add the effect to a mesh.\n * lightShined.add(character);\n *\n * // In the render loop, update the effect.\n * lightShined.update();\n * ```\n *\n * ![Example](/img/docs/light-shined.png)\n *\n * @category Effects\n */\nexport class LightShined {\n  /**\n   * Parameters to customize the effect.\n   */\n  public options: LightShinedOptions;\n\n  /**\n   * A list of meshes that are effected by this effect.\n   */\n  public list: Set<Object3D> = new Set();\n\n  /**\n   * A list of types that are ignored by this effect.\n   */\n  public ignored: Set<any> = new Set();\n\n  /**\n   * Construct a light shined effect manager.\n   *\n   * @param world The world that the effect is applied to.\n   * @param options Parameters to customize the effect.\n   */\n  constructor(public world: World, options: Partial<LightShinedOptions> = {}) {\n    this.options = { ...defaultOptions, ...options };\n\n    this.ignore(Shadow);\n    this.ignore(NameTag);\n  }\n\n  /**\n   * Add an object to be affected by this effect.\n   *\n   * @param obj A THREE.JS object to be shined on.\n   */\n  add = (obj: Object3D) => {\n    this.list.add(obj);\n  };\n\n  /**\n   * Remove an object from being affected by this effect\n   *\n   * @param obj The object to be removed from the effect.\n   */\n  remove = (obj: Object3D) => {\n    this.list.delete(obj);\n  };\n\n  /**\n   * Update the light shined effect. This fetches the light level at the position of\n   * each object and recursively updates the brightness of the object.\n   *\n   * This should be called in the render loop.\n   */\n  update = () => {\n    this.list.forEach((obj) => {\n      this.recursiveUpdate(obj);\n    });\n  };\n\n  /**\n   * Ignore a certain type of object from being affected by this effect.\n   *\n   * @example\n   * ```ts\n   * // Ignore all shadows. (This is done by default)\n   * lightShined.ignore(VOXELIZE.Shadow);\n   * ```\n   *\n   * @param types A type or a list of types to be ignored by this effect.\n   */\n  ignore = (...types: any[]) => {\n    types.forEach((type) => {\n      this.ignored.add(type);\n    });\n  };\n\n  private updateObject = (obj: Object3D, color: Color) => {\n    for (const type of this.ignored) {\n      if (obj instanceof type) return;\n    }\n\n    if (obj instanceof Mesh) {\n      const materials = Array.isArray(obj.material)\n        ? obj.material\n        : [obj.material];\n      materials.forEach((mat) => {\n        if (mat && mat.color) {\n          mat.color.copy(color);\n        }\n      });\n    }\n  };\n\n  /**\n   * Recursively update an object and its children's brightness.\n   */\n  private recursiveUpdate = (obj: Object3D, color: Color | null = null) => {\n    if (!obj.parent) return;\n\n    for (const type of this.ignored) {\n      if (obj instanceof type) return;\n    }\n\n    if (color === null) {\n      obj.getWorldPosition(position);\n\n      const voxel = ChunkUtils.mapWorldToVoxel(position.toArray());\n      const chunk = this.world.getChunkByPosition(...voxel);\n\n      if (!chunk) return;\n\n      color = this.world.getLightColorAt(...voxel);\n    }\n\n    if (obj.userData.voxelizeLightShined) {\n      const oldColor = obj.userData.voxelizeLightShined;\n      const subbedColor = (oldColor as Color).sub(color);\n      const colorDifference =\n        subbedColor.r ** 2 + subbedColor.g ** 2 + subbedColor.b ** 2;\n\n      if (colorDifference < 0.01) {\n        return;\n      }\n    }\n\n    this.updateObject(obj, color);\n    obj.traverse((child) => {\n      this.updateObject(child, color);\n    });\n  };\n}\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n","import { Object3D, Vector3 } from \"three\";\n\nexport const TRANSPARENT_RENDER_ORDER = 100000;\nexport const OPAQUE_RENDER_ORDER = 100;\n\nconst empty = new Vector3();\n\nexport const TRANSPARENT_SORT = (object: Object3D) => (a: any, b: any) => {\n  // Custom chunk sorting logic, to ensure that the closest objects are rendered last.\n  if (\n    a.object &&\n    a.object.isMesh &&\n    a.object.userData.isChunk &&\n    b.object &&\n    b.object.isMesh &&\n    b.object.userData.isChunk\n  ) {\n    const aPos = new Vector3();\n    const bPos = new Vector3();\n\n    const { object: aObj } = a;\n    const { object: bObj } = b;\n\n    const { geometry: aGeo } = aObj;\n    const { geometry: bGeo } = bObj;\n\n    if (!aGeo.boundingBox) {\n      aGeo.computeBoundingBox();\n    }\n\n    if (!bGeo.boundingBox) {\n      bGeo.computeBoundingBox();\n    }\n\n    if (aGeo && aGeo.boundingBox) {\n      aGeo.boundingBox.getCenter(aPos);\n      aPos.add(aObj.getWorldPosition(empty));\n    } else {\n      aObj.getWorldPosition(aPos);\n    }\n\n    if (bGeo && bGeo.boundingBox) {\n      bGeo.boundingBox.getCenter(bPos);\n      bPos.add(bObj.getWorldPosition(empty));\n    } else {\n      bObj.getWorldPosition(bPos);\n    }\n\n    // if (aPos.distanceToSquared(bPos) < 2 ** 2) {\n    //   if (a.groupOrder !== b.groupOrder) {\n    //     return a.groupOrder - b.groupOrder;\n    //   } else if (a.renderOrder !== b.renderOrder) {\n    //     return a.renderOrder - b.renderOrder;\n    //   } else if (a.z !== b.z) {\n    //     return b.z - a.z;\n    //   } else {\n    //     return a.id - b.id;\n    //   }\n    // }\n\n    return bPos.distanceToSquared(object.position) -\n      aPos.distanceToSquared(object.position) >\n      0\n      ? 1\n      : -1;\n  }\n\n  // https://github.com/mrdoob/three.js/blob/d0af538927/src/renderers/webgl/WebGLRenderLists.js\n  if (a.groupOrder !== b.groupOrder) {\n    return a.groupOrder - b.groupOrder;\n  } else if (a.renderOrder !== b.renderOrder) {\n    return a.renderOrder - b.renderOrder;\n  } else if (a.z !== b.z) {\n    return b.z - a.z;\n  } else {\n    return a.id - b.id;\n  }\n};\n\n/**\n * Literally do nothing.\n *\n * @hidden\n */\nexport const noop = () => {\n  // Do nothing.\n};\n\nexport type CameraPerspective =\n  | \"px\"\n  | \"nx\"\n  | \"py\"\n  | \"ny\"\n  | \"pz\"\n  | \"nz\"\n  | \"pxy\"\n  | \"nxy\"\n  | \"pxz\"\n  | \"nxz\"\n  | \"pyz\"\n  | \"nyz\"\n  | \"pxyz\"\n  | \"nxyz\";\n","import merge from \"deepmerge\";\nimport {\n  DirectionalLight,\n  Object3D,\n  OrthographicCamera,\n  Scene,\n  SRGBColorSpace,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\n\nimport { CameraPerspective, noop } from \"../common\";\nimport { Inputs } from \"../core/inputs\";\nimport { DOMUtils } from \"../utils\";\n\nexport type ItemSlotsOptions = {\n  wrapperClass: string;\n  wrapperStyles: Partial<CSSStyleDeclaration>;\n\n  slotClass: string;\n  slotHoverClass: string;\n  slotFocusClass: string;\n  slotSubscriptClass: string;\n  slotMargin: number;\n  slotPadding: number;\n  slotWidth: number;\n  slotHeight: number;\n\n  slotStyles: Partial<CSSStyleDeclaration>;\n  slotSubscriptStyles: Partial<CSSStyleDeclaration>;\n\n  horizontalCount: number;\n  verticalCount: number;\n  focusFirstByDefault: boolean;\n  activatedByDefault: boolean;\n\n  zoom: number;\n  perspective: CameraPerspective;\n  scrollable?: boolean;\n};\n\nconst defaultOptions: ItemSlotsOptions = {\n  wrapperClass: \"item-slots\",\n  wrapperStyles: {},\n\n  slotClass: \"item-slots-slot\",\n  slotHoverClass: \"item-slots-slot-hover\",\n  slotFocusClass: \"item-slots-slot-focus\",\n  slotSubscriptClass: \"item-slots-slot-subscript\",\n  slotMargin: 2,\n  slotPadding: 2,\n  slotWidth: 50,\n  slotHeight: 50,\n\n  slotStyles: {},\n  slotSubscriptStyles: {},\n\n  horizontalCount: 5,\n  verticalCount: 1,\n  focusFirstByDefault: true,\n  activatedByDefault: true,\n\n  zoom: 1,\n  perspective: \"pxyz\",\n  scrollable: true,\n};\n\nexport class ItemSlot<T = number> {\n  public itemSlots: ItemSlots<T>;\n\n  public row: number;\n\n  public col: number;\n\n  public scene: Scene;\n\n  public object: Object3D;\n\n  public light: DirectionalLight;\n\n  public camera: OrthographicCamera = new OrthographicCamera(\n    -1,\n    1,\n    1,\n    -1,\n    0,\n    10\n  );\n\n  public element: HTMLDivElement;\n\n  public subscriptElement: HTMLDivElement;\n\n  public subscript: string;\n\n  public content: T;\n\n  public zoom = 1;\n\n  public lightRotationOffset = -Math.PI / 8;\n\n  public offset: Vector3 = new Vector3();\n\n  constructor(itemSlots: ItemSlots<T>, row: number, col: number) {\n    this.itemSlots = itemSlots;\n    this.row = row;\n    this.col = col;\n\n    this.scene = new Scene();\n\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 10);\n\n    this.element = document.createElement(\"div\");\n    this.subscriptElement = document.createElement(\"div\");\n    this.element.appendChild(this.subscriptElement);\n\n    this.offset = new Vector3();\n\n    this.light = new DirectionalLight(0xffffff, 3);\n    this.scene.add(this.light);\n\n    this.updateCamera();\n  }\n\n  getObject = () => this.object;\n\n  setObject = (object: Object3D) => {\n    if (this.object) {\n      this.scene.remove(this.object);\n    }\n\n    this.object = object;\n    this.scene.add(object);\n    this.triggerChange();\n  };\n\n  getContent = () => this.content;\n\n  setContent = (content: T) => {\n    this.content = content;\n    this.triggerChange();\n  };\n\n  getSubscript = () => this.subscript;\n\n  setSubscript = (subscript: string) => {\n    this.subscript = subscript;\n    this.subscriptElement.innerText = subscript;\n    this.triggerChange();\n  };\n\n  triggerChange = () => {\n    if (\n      this.row == this.itemSlots.focusedRow &&\n      this.col == this.itemSlots.focusedCol\n    )\n      this.itemSlots.triggerFocusChange(null, this);\n  };\n\n  setZoom = (zoom: number) => {\n    this.zoom = zoom;\n    this.camera.far = zoom * 3 + 1;\n    this.updateCamera();\n  };\n\n  setPerspective = (perspective: CameraPerspective) => {\n    const negative = perspective.startsWith(\"n\") ? -1 : 1;\n\n    const xFactor = perspective.includes(\"x\") ? 1 : 0;\n    const yFactor = perspective.includes(\"y\") ? 1 : 0;\n    const zFactor = perspective.includes(\"z\") ? 1 : 0;\n\n    this.offset.set(xFactor, yFactor, zFactor).multiplyScalar(negative);\n\n    this.updateCamera();\n  };\n\n  applyClass = (className: string) => {\n    this.element.classList.add(className);\n  };\n\n  removeClass = (className: string) => {\n    this.element.classList.remove(className);\n  };\n\n  applySubscriptClass = (className: string) => {\n    this.subscriptElement.classList.add(className);\n  };\n\n  removeSubscriptClass = (className: string) => {\n    this.subscriptElement.classList.remove(className);\n  };\n\n  applyStyles = (styles: Partial<CSSStyleDeclaration>) => {\n    DOMUtils.applyStyles(this.element, styles);\n  };\n\n  applySubscriptStyles = (styles: Partial<CSSStyleDeclaration>) => {\n    DOMUtils.applyStyles(this.subscriptElement, styles);\n  };\n\n  private updateCamera = () => {\n    this.camera.position.copy(\n      this.offset.clone().multiplyScalar((this.zoom || 1) * 3.5)\n    );\n\n    this.camera.lookAt(0, 0, 0);\n\n    const lightPosition = this.camera.position.clone();\n    // Rotate light position by y axis 45 degrees.\n    lightPosition.applyAxisAngle(\n      new Vector3(0, 1, 0),\n      this.lightRotationOffset\n    );\n\n    this.light.position.copy(lightPosition);\n  };\n}\n\nexport class ItemSlots<T = number> {\n  public options: ItemSlotsOptions;\n\n  public wrapper: HTMLDivElement;\n\n  public canvas: HTMLCanvasElement;\n\n  public renderer: WebGLRenderer;\n\n  public focusedRow = -1;\n\n  public focusedCol = -1;\n\n  public activated = false;\n\n  public slotTotalWidth: number;\n  public slotTotalHeight: number;\n\n  public onSlotClick: (slot: ItemSlot<T>) => void = noop;\n  public onSlotUpdate: (slot: ItemSlot<T>) => void = noop;\n  public onFocusChange = (\n    callbackFunc: (prevSlot: ItemSlot<T>, nextSlot: ItemSlot<T>) => void\n  ) => {\n    this.focusChangeCallbacks.push(callbackFunc);\n  };\n  public triggerFocusChange = (\n    prevSlot: ItemSlot<T>,\n    nextSlot: ItemSlot<T>\n  ) => {\n    for (const callback of this.focusChangeCallbacks) {\n      callback(prevSlot, nextSlot);\n    }\n  };\n\n  private slots: ItemSlot<T>[][];\n\n  private focusChangeCallbacks: ((\n    prevSlot: ItemSlot<T>,\n    nextSlot: ItemSlot<T>\n  ) => void)[] = [];\n\n  private animationFrame = -1;\n\n  constructor(options: Partial<ItemSlotsOptions> = {}) {\n    const {\n      focusFirstByDefault,\n      activatedByDefault,\n      slotHeight,\n      slotMargin,\n      slotWidth,\n      slotPadding,\n    } = (this.options = merge(defaultOptions, options));\n\n    this.slotTotalWidth = slotWidth + slotMargin * 2 + slotPadding * 2;\n    this.slotTotalHeight = slotHeight + slotMargin * 2 + slotPadding * 2;\n\n    this.generate();\n\n    if (focusFirstByDefault) {\n      this.setFocused(0, 0);\n    }\n\n    if (activatedByDefault) {\n      this.activate();\n    }\n  }\n\n  activate = () => {\n    if (this.activated) return;\n\n    this.activated = true;\n\n    DOMUtils.applyStyles(this.wrapper, {\n      display: \"flex\",\n    });\n\n    this.render();\n  };\n\n  deactivate = () => {\n    if (!this.activated) return;\n\n    this.activated = false;\n\n    DOMUtils.applyStyles(this.wrapper, {\n      display: \"none\",\n    });\n\n    cancelAnimationFrame(this.animationFrame);\n  };\n\n  setObject = (row: number, col: number, object: Object3D) => {\n    if (!this.slots[row] || !this.slots[row][col]) {\n      return;\n    }\n\n    const slot = this.slots[row][col];\n    slot.setObject(object);\n    this.onSlotUpdate?.(slot);\n  };\n\n  setContent = (row: number, col: number, content: T) => {\n    if (!this.slots[row] || !this.slots[row][col]) {\n      return;\n    }\n\n    const slot = this.slots[row][col];\n    slot.setContent(content);\n    this.onSlotUpdate?.(slot);\n  };\n\n  setSubscript = (row: number, col: number, subscript: string) => {\n    if (!this.slots[row] || !this.slots[row][col]) {\n      return;\n    }\n\n    const slot = this.slots[row][col];\n    slot.setSubscript(subscript);\n    this.onSlotUpdate?.(slot);\n  };\n\n  setFocused = (row: number, col: number) => {\n    if (row === this.focusedRow && col === this.focusedCol) {\n      return;\n    }\n\n    const hadPrevious =\n      this.focusedRow !== -1 &&\n      this.focusedCol !== -1 &&\n      (this.focusedRow !== row || this.focusedCol !== col);\n\n    let prevSlot = null;\n    if (hadPrevious) {\n      prevSlot = this.slots[this.focusedRow][this.focusedCol];\n      prevSlot.element.classList.remove(this.options.slotFocusClass);\n    }\n\n    this.focusedRow = row;\n    this.focusedCol = col;\n\n    const slot = this.slots[this.focusedRow][this.focusedCol];\n\n    this.triggerFocusChange(prevSlot, slot);\n\n    slot.element.classList.add(this.options.slotFocusClass);\n    this.onSlotClick(slot);\n  };\n\n  getObject = (row: number, col: number) => {\n    if (!this.slots[row] || !this.slots[row][col]) {\n      return null;\n    }\n\n    return this.slots[row][col].object;\n  };\n\n  getContent = (row: number, col: number) => {\n    if (!this.slots[row] || !this.slots[row][col]) {\n      return null;\n    }\n\n    return this.slots[row][col].content;\n  };\n\n  getSubscript = (row: number, col: number) => {\n    if (!this.slots[row] || !this.slots[row][col]) {\n      return null;\n    }\n\n    return this.slots[row][col].subscript;\n  };\n\n  getFocused = () => {\n    if (this.focusedRow === -1 || this.focusedCol === -1) {\n      return null;\n    }\n\n    return this.slots[this.focusedRow][this.focusedCol];\n  };\n\n  getRowColFromEvent = (event: MouseEvent) => {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    const row = y / this.slotTotalHeight;\n    const col = x / this.slotTotalWidth;\n\n    const { slotMargin, slotWidth, slotHeight } = this.options;\n    const { verticalCount, horizontalCount } = this.options;\n\n    if (row < 0 || row >= verticalCount) return { row: -1, col: -1 };\n    if (col < 0 || col >= horizontalCount) return { row: -1, col: -1 };\n    if (row % 1 < slotMargin / slotHeight) return { row: -1, col: -1 };\n    if (row % 1 > 1 - slotMargin / slotHeight) return { row: -1, col: -1 };\n    if (col % 1 < slotMargin / slotWidth) return { row: -1, col: -1 };\n    if (col % 1 > 1 - slotMargin / slotWidth) return { row: -1, col: -1 };\n\n    return {\n      row: Math.floor(row),\n      col: Math.floor(col),\n    };\n  };\n\n  getSlot = (row: number, col: number) => {\n    if (row < 0 || row >= this.options.verticalCount) return null;\n    if (col < 0 || col >= this.options.horizontalCount) return null;\n\n    return this.slots[row][col];\n  };\n\n  connect = (inputs: Inputs, namespace = \"*\") => {\n    const { slotHoverClass, scrollable } = this.options;\n\n    let mouseHoverPrevRow = null;\n    let mouseHoverPrevCol = null;\n\n    this.canvas.onmouseenter = () => {\n      if (!this.activated) return;\n\n      this.canvas.onmousemove = (event) => {\n        const { row, col } = this.getRowColFromEvent(event);\n\n        if (row === -1 || col === -1) {\n          if (mouseHoverPrevRow !== null && mouseHoverPrevCol !== null) {\n            this.slots[mouseHoverPrevRow][\n              mouseHoverPrevCol\n            ].element.classList.remove(slotHoverClass);\n            DOMUtils.applyStyles(this.canvas, {\n              cursor: \"default\",\n            });\n          }\n\n          return;\n        }\n\n        if (\n          mouseHoverPrevRow !== null &&\n          mouseHoverPrevCol !== null &&\n          (row !== mouseHoverPrevRow || col !== mouseHoverPrevCol)\n        ) {\n          this.slots[mouseHoverPrevRow][\n            mouseHoverPrevCol\n          ].element.classList.remove(slotHoverClass);\n        }\n\n        this.slots[row][col].element.classList.add(slotHoverClass);\n        DOMUtils.applyStyles(this.canvas, {\n          cursor: \"pointer\",\n        });\n\n        mouseHoverPrevRow = row;\n        mouseHoverPrevCol = col;\n      };\n    };\n\n    this.canvas.onmouseleave = () => {\n      if (!this.activated) return;\n\n      if (mouseHoverPrevRow !== null && mouseHoverPrevCol !== null) {\n        this.slots[mouseHoverPrevRow][\n          mouseHoverPrevCol\n        ].element.classList.remove(slotHoverClass);\n        DOMUtils.applyStyles(this.canvas, {\n          cursor: \"default\",\n        });\n      }\n\n      this.canvas.onmousemove = null;\n    };\n\n    this.canvas.onmousedown = (event) => {\n      if (!this.activated) return;\n\n      const { row, col } = this.getRowColFromEvent(event);\n      if (row === -1 || col === -1) return;\n\n      this.setFocused(row, col);\n    };\n\n    const unbind = scrollable\n      ? inputs.scroll(\n          // Scrolling up, inventory goes left and up\n          () => {\n            if (!this.activated) return;\n            if (this.focusedRow === -1 || this.focusedCol === -1) return;\n\n            const { horizontalCount, verticalCount } = this.options;\n\n            const row = this.focusedRow;\n            const col = this.focusedCol;\n\n            if (col === 0) {\n              this.setFocused(\n                row === 0 ? verticalCount - 1 : row - 1,\n                horizontalCount - 1\n              );\n            } else {\n              this.setFocused(row, col - 1);\n            }\n          },\n          // Scrolling down, inventory goes right and down\n          () => {\n            if (!this.activated) return;\n            if (this.focusedRow === -1 || this.focusedCol === -1) return;\n\n            const { horizontalCount, verticalCount } = this.options;\n\n            const row = this.focusedRow;\n            const col = this.focusedCol;\n\n            if (col === horizontalCount - 1) {\n              this.setFocused(row === verticalCount - 1 ? 0 : row + 1, 0);\n            } else {\n              this.setFocused(row, col + 1);\n            }\n          },\n          namespace\n        )\n      : noop;\n\n    return () => {\n      try {\n        unbind();\n        this.canvas.onmousedown = null;\n        this.canvas.onmouseenter = null;\n        this.canvas.onmouseleave = null;\n      } catch (e) {\n        // Ignore\n      }\n    };\n  };\n\n  render = () => {\n    this.animationFrame = requestAnimationFrame(this.render);\n\n    if (!this.activated) return;\n\n    const { horizontalCount, verticalCount, slotMargin, slotPadding } =\n      this.options;\n\n    const width = this.canvas.clientWidth;\n    const height = this.canvas.clientHeight;\n\n    if (this.canvas.width !== width || this.canvas.height !== height) {\n      this.renderer.setSize(width, height, false);\n    }\n\n    this.renderer.setScissorTest(false);\n    this.renderer.clear();\n    this.renderer.setScissorTest(true);\n\n    const canvasRect = this.renderer.domElement.getBoundingClientRect();\n\n    let hasRendered = false;\n\n    for (let i = 0; i < verticalCount; i++) {\n      for (let j = 0; j < horizontalCount; j++) {\n        const { scene, camera, element, object } = this.slots[i][j];\n\n        if (!object) continue;\n\n        const rect = element.getBoundingClientRect();\n\n        if (\n          rect.top + rect.height < canvasRect.top ||\n          rect.top > canvasRect.top + canvasRect.height ||\n          rect.left + rect.width < canvasRect.left ||\n          rect.left > canvasRect.left + canvasRect.width\n        ) {\n          continue;\n        }\n\n        hasRendered = true;\n\n        const width = rect.right - rect.left - slotMargin * 2 - slotPadding * 2;\n        const height =\n          rect.bottom - rect.top - slotMargin * 2 - slotPadding * 2;\n\n        if (width <= 0 || height <= 0) continue;\n\n        const left = rect.left - canvasRect.left + slotMargin + slotPadding;\n        const bottom =\n          canvasRect.height -\n          (rect.bottom - canvasRect.top) +\n          slotMargin +\n          slotPadding;\n\n        this.renderer.setViewport(left, bottom, width, height);\n        this.renderer.setScissor(left, bottom, width, height);\n        this.renderer.render(scene, camera);\n      }\n    }\n\n    if (!hasRendered) {\n      // Render transparent background\n      this.renderer.setViewport(0, 0, width, height);\n      this.renderer.setScissor(0, 0, width, height);\n      this.renderer.render(this.slots[0][0].scene, this.slots[0][0].camera);\n    }\n  };\n\n  get element() {\n    return this.wrapper;\n  }\n\n  private generate = () => {\n    const {\n      wrapperClass,\n      wrapperStyles,\n      slotClass,\n      slotStyles,\n      slotSubscriptClass,\n      slotSubscriptStyles,\n      horizontalCount,\n      verticalCount,\n      zoom,\n      perspective,\n    } = this.options;\n\n    const { slotWidth, slotHeight, slotMargin, slotPadding } = this.options;\n\n    const width =\n      (slotWidth + slotMargin * 2 + slotPadding * 2) * horizontalCount;\n    const height =\n      (slotHeight + slotMargin * 2 + slotPadding * 2) * verticalCount;\n\n    this.wrapper = document.createElement(\"div\");\n    this.wrapper.classList.add(wrapperClass);\n    DOMUtils.applyStyles(this.wrapper, {\n      ...wrapperStyles,\n      width: `${width}px`,\n      height: `${height}px`,\n      display: \"none\",\n    });\n\n    this.slots = [];\n\n    for (let row = 0; row < verticalCount; row++) {\n      this.slots[row] = [];\n\n      for (let col = 0; col < horizontalCount; col++) {\n        const slot = new ItemSlot<T>(this, row, col);\n\n        slot.applyClass(slotClass);\n        slot.applyStyles({\n          width: `${slotWidth}px`,\n          height: `${slotHeight}px`,\n          borderRadius: `${slotWidth * 0.1}px`,\n          borderWidth: `${slotWidth * 0.08}px`,\n          boxShadow: `inset 0 0 ${\n            slotWidth * 0.05\n          }px var(--item-slots-slot-color)`,\n          ...slotStyles,\n        });\n        slot.applySubscriptClass(slotSubscriptClass);\n        slot.applySubscriptStyles(slotSubscriptStyles);\n\n        slot.applyStyles({\n          position: \"absolute\",\n          top: `${\n            (slotHeight + slotMargin * 2 + slotPadding * 2) * row + slotMargin\n          }px`,\n          left: `${\n            (slotWidth + slotMargin * 2 + slotPadding * 2) * col + slotMargin\n          }px`,\n        });\n\n        slot.setZoom(zoom);\n        slot.setPerspective(perspective);\n\n        this.slots[row][col] = slot;\n\n        this.wrapper.appendChild(slot.element);\n      }\n    }\n\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = width;\n    this.canvas.height = height;\n    DOMUtils.applyStyles(this.canvas, {\n      position: \"absolute\",\n      background: \"transparent\",\n      top: \"0\",\n      left: \"0\",\n      zIndex: \"-1\",\n    });\n\n    this.wrapper.appendChild(this.canvas);\n\n    this.renderer = new WebGLRenderer({\n      canvas: this.canvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.renderer.outputColorSpace = SRGBColorSpace;\n    this.renderer.setSize(width, height);\n  };\n}\n","import { Vector3 } from \"three\";\n\nimport { RigidControls } from \"../core/controls\";\nimport { Inputs } from \"../core/inputs\";\nimport { World } from \"../core/world\";\n\n/**\n * Parameters to create a new {@link Perspective} instance.\n */\nexport type PerspectiveOptions = {\n  /**\n   * The maximum distance the camera can go from the player's center.\n   * Defaults to `5`.\n   */\n  maxDistance: number;\n\n  /**\n   * The margin between the camera and any block that the camera is colliding with.\n   * This prevents the camera from clipping into blocks. Defaults to `0.3`.\n   */\n  blockMargin: number;\n\n  /**\n   * The lerping factor for the camera's position. Defaults to `0.5`.\n   */\n  lerpFactor: number;\n\n  /**\n   * Whether or not should the camera ignore see-through block collisions. Defaults to `true`.\n   */\n  ignoreSeeThrough: boolean;\n\n  /**\n   * Whether or not should the camera ignore fluid block collisions. Defaults to `true`.\n   */\n  ignoreFluids: boolean;\n};\n\nconst defaultOptions: PerspectiveOptions = {\n  maxDistance: 5,\n  blockMargin: 0.3,\n  lerpFactor: 0.5,\n  ignoreSeeThrough: true,\n  ignoreFluids: true,\n};\n\n/**\n * A class that allows you to switch between first, second and third person perspectives for\n * a {@link RigidControls} instance. By default, the key to switch between perspectives is <kbd>C</kbd>.\n *\n * # Example\n * ```ts\n * // Initialize the perspective with the rigid controls.\n * const perspective = new VOXELIZE.Perspective(controls, world);\n *\n * // Bind the keyboard inputs to switch between perspectives.\n * perspective.connect(inputs, \"in-game\");\n *\n * // Switch to the first person perspective.\n * perspective.state = \"third\";\n *\n * // Update the perspective every frame.\n * perspective.update();\n * ```\n */\nexport class Perspective {\n  /**\n   * Parameters to configure the perspective.\n   */\n  public options: PerspectiveOptions;\n\n  /**\n   * The rigid controls that this perspective instance is attached to.\n   */\n  public controls: RigidControls;\n\n  /**\n   * The world that this perspective instance is working with.\n   */\n  public world: World;\n\n  /**\n   * The input manager that binds the perspective's keyboard inputs.\n   */\n  public inputs?: Inputs<any>;\n\n  /**\n   * The internal state of the perspective.\n   */\n  private _state: \"first\" | \"second\" | \"third\" = \"first\";\n\n  /**\n   * A cache to save the first person camera position.\n   */\n  private firstPersonPosition = new Vector3();\n\n  /**\n   * This is the identifier that is used to bind the perspective's keyboard inputs\n   * when {@link Perspective.connect} is called.\n   */\n  public static readonly INPUT_IDENTIFIER = \"voxelize-perspective\";\n\n  /**\n   * Create a new perspective instance that is attached to the given rigid controls. The default\n   * perspective is the first person perspective.\n   *\n   * @param controls The rigid controls that this perspective instance is attached to.\n   * @param world The world that this perspective instance is working with.\n   * @param options Parameters to configure the perspective.\n   */\n  constructor(\n    controls: RigidControls,\n    world: World,\n    options: Partial<PerspectiveOptions> = {}\n  ) {\n    if (!controls) {\n      throw new Error(\"Perspective: invalid rigid controls.\");\n    }\n\n    if (!world) {\n      throw new Error(\"Perspective: invalid world.\");\n    }\n\n    this.controls = controls;\n    this.world = world;\n\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.firstPersonPosition.copy(this.controls.camera.position);\n\n    this.state = \"first\";\n  }\n\n  /**\n   * A method that can be implemented and is called when the perspective's state changes.\n   */\n  onChangeState: (state: \"first\" | \"second\" | \"third\") => void;\n\n  /**\n   * Connect the perspective to the given input manager. This will bind the perspective's keyboard inputs, which\n   * by default is <kbd>C</kbd> to switch between perspectives. This function returns a function that when called\n   * unbinds the perspective's keyboard inputs. Keep in mind that remapping the original inputs will render this\n   * function useless.\n   *\n   * @param inputs The {@link Inputs} instance to bind the perspective's keyboard inputs to.\n   * @param namespace The namespace to bind the perspective's keyboard inputs to.\n   */\n  connect = (inputs: Inputs, namespace = \"*\") => {\n    const unbind = inputs.bind(\"KeyC\", this.toggle, namespace, {\n      identifier: Perspective.INPUT_IDENTIFIER,\n      checkType: \"code\",\n    });\n\n    this.inputs = inputs;\n\n    return () => {\n      try {\n        unbind();\n      } catch (e) {\n        // Ignore.\n      }\n    };\n  };\n\n  /**\n   * Toggle between the first, second and third person perspectives. The order goes from first person to\n   * third person and then to second person.\n   */\n  toggle = () => {\n    switch (this.state) {\n      case \"first\":\n        this.state = \"third\";\n        break;\n      case \"second\":\n        this.state = \"first\";\n        break;\n      case \"third\":\n        this.state = \"second\";\n        break;\n    }\n  };\n\n  /**\n   * This updates the perspective. Internally, if the perspective isn't in first person, it raycasts to find the closest\n   * block and then ensures that the camera is not clipping into any blocks.\n   */\n  update = () => {\n    const { object, camera } = this.controls;\n\n    if (this.controls.character) {\n      if (this.state === \"first\" && this.controls.character.visible) {\n        this.controls.character.visible = false;\n      } else if (this.state !== \"first\" && !this.controls.character.visible) {\n        this.controls.character.visible = true;\n      }\n    }\n\n    if (this.controls.hud) {\n      if (this.state === \"first\" && !this.controls.hud.visible) {\n        this.controls.hud.visible = true;\n      } else if (this.state !== \"first\" && this.controls.hud.visible) {\n        this.controls.hud.visible = false;\n      }\n    }\n\n    const getDistance = () => {\n      const dir = new Vector3();\n      (this.state === \"second\" ? object : camera).getWorldDirection(dir);\n      dir.normalize();\n      dir.multiplyScalar(-1);\n\n      const pos = new Vector3();\n      object.getWorldPosition(pos);\n\n      pos.add(dir.clone().multiplyScalar(this.options.blockMargin));\n\n      const result = this.world.raycastVoxels(\n        pos.toArray(),\n        dir.toArray(),\n        this.options.maxDistance,\n        {\n          ignoreFluids: this.options.ignoreFluids,\n          ignoreSeeThrough: this.options.ignoreSeeThrough,\n        }\n      );\n\n      if (!result) {\n        return this.options.maxDistance;\n      }\n\n      return pos.distanceTo(new Vector3(...result.point));\n    };\n\n    switch (this.state) {\n      case \"first\": {\n        break;\n      }\n      case \"second\": {\n        const newPos = camera.position.clone();\n        newPos.z = -getDistance();\n        camera.position.lerp(newPos, this.options.lerpFactor);\n        camera.lookAt(object.position);\n        break;\n      }\n      case \"third\": {\n        const newPos = camera.position.clone();\n        newPos.z = getDistance();\n        camera.position.lerp(newPos, this.options.lerpFactor);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Setter for the perspective's state. This will call {@link Perspective.onChangeState} if it is implemented.\n   */\n  set state(state: \"first\" | \"second\" | \"third\") {\n    const { camera } = this.controls;\n\n    if (state === \"first\") {\n      camera.position.copy(this.firstPersonPosition);\n    } else {\n      camera.position.set(0, 0, 0);\n    }\n\n    camera.quaternion.set(0, 0, 0, 0);\n\n    if (state !== this._state) {\n      this.onChangeState?.(state);\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for the perspective's state.\n   */\n  get state() {\n    return this._state;\n  }\n}\n","import {\n  DirectionalLight,\n  Object3D,\n  OrthographicCamera,\n  SRGBColorSpace,\n  Scene,\n  Vector2,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\n\nimport { CameraPerspective } from \"../common\";\n\n/**\n * Parameters to create a portrait with.\n */\nexport type PortraitOptions = {\n  /**\n   * The arbitrary zoom from the camera to the object. This is used to calculate the zoom\n   * of the camera. Defaults to `1`.\n   */\n  zoom: number;\n\n  /**\n   * The position of where the camera should be looking at. Defaults to `pxyz`, which\n   * means that the camera will be looking at the center of the object from the positive\n   * x, y, and z axis scaled by the zoom.\n   */\n  perspective: CameraPerspective;\n\n  /**\n   * The width of the portrait canvas. Defaults to `100` pixels.\n   */\n  width: number;\n\n  /**\n   * The height of the portrait canvas. Defaults to `100` pixels.\n   */\n  height: number;\n\n  /**\n   * Whether or not should this portrait only render once. Defaults to `false`.\n   */\n  renderOnce: boolean;\n\n  /**\n   * The rotation around the y axis about the camera. This is used to calculate the\n   * position of the light. Defaults to `-Math.PI / 8`.\n   */\n  lightRotationOffset: number;\n};\n\nconst defaultOptions: PortraitOptions = {\n  zoom: 1,\n  perspective: \"pxyz\",\n  width: 100,\n  height: 100,\n  renderOnce: false,\n  lightRotationOffset: -Math.PI / 8,\n};\n\n/**\n * This class allows you to render a single THREE.js object to a canvas element.\n * This is useful for generating images of objects for use in the game. However, there\n * are performance bottlenecks that you should be aware of:\n * - The THREE.js renderer is shared between all instances of this class. This is because\n *   there is a limit to how many webgl contexts can be created.\n * - Each individual portrait has their own render loop. This means that if you have a lto\n *   of portraits, you will be rendering a lot of frames per second. This can be mitigated\n *   by either using the renderOnce parameter or utilizing the {@link ItemSlots} class, which\n *   batch renders objects in a grid-like fashion.\n *\n * # Example\n * ```ts\n * const portrait = new Portrait(world.makeBlockMesh(5));\n * document.body.appendChild(portrait.canvas);\n * ```\n */\nexport class Portrait {\n  /**\n   * The shared THREE.js webgl renderer. This is shared because there is a limit to\n   * how many webgl contexts can be created.\n   */\n  public static renderer: WebGLRenderer = new WebGLRenderer({\n    antialias: false,\n  });\n\n  /**\n   * Parameters to create this portrait with.\n   */\n  public options: PortraitOptions;\n\n  /**\n   * The THREE.js camera to use for rendering this portrait.\n   */\n  public camera: OrthographicCamera;\n\n  /**\n   * The THREE.js scene to use for rendering this portrait.\n   */\n  public scene: Scene;\n\n  /**\n   * The canvas element to render this portrait to.\n   */\n  public canvas: HTMLCanvasElement;\n\n  /**\n   * The target of this portrait.\n   */\n  public object: Object3D;\n\n  /**\n   * The animation frame id of the render loop.\n   */\n  private animationFrameId = -1;\n\n  /**\n   * Create a new portrait. This automatically starts a render loop.\n   *\n   * @param object The object to render to the canvas.\n   * @param options The options to create this portrait with.\n   */\n  constructor(object: Object3D, options: Partial<PortraitOptions> = {}) {\n    if (!object) {\n      throw new Error(\"A target object is required for portraits.\");\n    }\n\n    Portrait.renderer.outputColorSpace = SRGBColorSpace;\n\n    const { width, height, zoom, perspective, lightRotationOffset } =\n      (this.options = {\n        ...defaultOptions,\n        ...options,\n      });\n\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    this.scene = new Scene();\n\n    const negative = perspective.includes(\"n\") ? -1 : 1;\n    const xFactor = perspective.includes(\"x\") ? 1 : 0;\n    const yFactor = perspective.includes(\"y\") ? 1 : 0;\n    const zFactor = perspective.includes(\"z\") ? 1 : 0;\n\n    this.camera = new OrthographicCamera(-zoom, zoom, zoom, -zoom);\n    this.camera.far = zoom * 10 + 1;\n    this.camera.near = 0.1;\n    this.camera.position.set(\n      negative * xFactor * zoom * 3.5,\n      negative * yFactor * zoom * 3.5,\n      negative * zFactor * zoom * 3.5\n    );\n    this.camera.lookAt(0, 0, 0);\n\n    const lightPosition = this.camera.position.clone();\n    // Rotate light position by y axis 45 degrees.\n    lightPosition.applyAxisAngle(new Vector3(0, 1, 0), lightRotationOffset);\n\n    const light = new DirectionalLight(0xffffff, 3);\n    light.position.copy(lightPosition);\n    this.scene.add(light);\n\n    this.setObject(object);\n\n    this.render();\n  }\n\n  /**\n   * Set the object to render to the canvas.\n   *\n   * @param object The object to render to the canvas.\n   */\n  setObject = (object: Object3D) => {\n    if (this.object) {\n      this.scene.remove(this.object);\n    }\n\n    this.scene.add(object);\n    this.object = object;\n  };\n\n  /**\n   * Dispose of this portrait. This stops the render loop and removes the object from the scene.\n   * However, it does not remove the canvas from the DOM.\n   */\n  dispose = () => {\n    cancelAnimationFrame(this.animationFrameId);\n\n    this.scene.remove(this.object);\n    this.object = null;\n  };\n\n  /**\n   * The render loop that is fired off when this portrait is created.\n   */\n  private render = () => {\n    this.animationFrameId = requestAnimationFrame(this.render);\n\n    const renderer = Portrait.renderer;\n    const { renderOnce } = this.options;\n\n    // Get the renderer's sizes\n    const { width, height } = renderer.getSize(new Vector2(0, 0));\n\n    if (width !== this.canvas.width || height !== this.canvas.height) {\n      renderer.setSize(this.canvas.width, this.canvas.height);\n    }\n\n    renderer.render(this.scene, this.camera);\n\n    const rendererCanvas = renderer.domElement;\n    const ctx = this.canvas.getContext(\"2d\");\n\n    ctx.globalCompositeOperation = \"copy\";\n    ctx.drawImage(\n      rendererCanvas,\n      0,\n      rendererCanvas.height - height,\n      width,\n      height,\n      0,\n      0,\n      width,\n      height\n    );\n\n    if (renderOnce) {\n      this.dispose();\n    }\n  };\n}\n","import TimeoutWorker from \"web-worker:./workers/timeout-worker\";\n\nexport function setWorkerTimeout(func: () => void, timeout: number) {\n  const worker = new TimeoutWorker();\n  let messageId = 0; // Unique ID for each message\n\n  const callbackWrapper = (id: number) => {\n    worker.postMessage({ signal: \"start\", timeout, id });\n  };\n\n  worker.onmessage = (e) => {\n    if (e.data.signal === \"timeout\" && e.data.id === messageId) {\n      func();\n    }\n  };\n\n  callbackWrapper(++messageId);\n\n  return () => {\n    worker.postMessage({ signal: \"stop\", id: messageId });\n    worker.terminate();\n  };\n}\n","import { setWorkerTimeout } from \"./setWorkerTimeout\";\n\nexport function requestWorkerAnimationFrame(callback: () => void) {\n  if (document.hasFocus()) {\n    return requestAnimationFrame(callback);\n  }\n\n  setWorkerTimeout(callback, 1000 / 60);\n}\n","import IntervalWorker from \"web-worker:./workers/interval-worker\";\n\nexport function setWorkerInterval(func: () => void, interval: number) {\n  const worker = new IntervalWorker();\n\n  worker.postMessage({ signal: \"start\", interval });\n\n  worker.onmessage = (e) => {\n    if (e.data === \"tick\") {\n      func();\n    }\n  };\n\n  return () => {\n    worker.postMessage({ signal: \"stop\" });\n    worker.terminate();\n  };\n}\n","/**\n * A worker pool job is queued to a worker pool and is executed by a worker.\n */\nexport type SharedWorkerPoolJob = {\n  /**\n   * A JSON serializable object that is passed to the worker.\n   */\n  message: any;\n\n  /**\n   * Any array buffers (transferable) that are passed to the worker.\n   */\n  buffers?: ArrayBufferLike[];\n\n  /**\n   * A callback that is called when the worker has finished executing the job.\n   *\n   * @param value The result of the job.\n   */\n  resolve: (value: any) => void;\n};\n\n/**\n * Parameters to create a worker pool.\n */\nexport type SharedWorkerPoolOptions = {\n  /**\n   * The maximum number of workers to create. Defaults to `8`.\n   */\n  maxWorker: number;\n};\n\nconst defaultOptions: SharedWorkerPoolOptions = {\n  maxWorker: 8,\n};\n\n/**\n * A pool of web workers that can be used to execute jobs. The pool will create\n * workers up to the maximum number of workers specified in the options.\n * When a job is queued, the pool will find the first available worker and\n * execute the job. If no workers are available, the job will be queued until\n * a worker becomes available.\n */\nexport class SharedWorkerPool {\n  /**\n   * The queue of jobs that are waiting to be executed.\n   */\n  public queue: SharedWorkerPoolJob[] = [];\n\n  /**\n   * A static count of working web workers across all worker pools.\n   */\n  static WORKING_COUNT = 0;\n\n  /**\n   * The list of workers in the pool.\n   */\n  private workers: SharedWorker[] = [];\n\n  /**\n   * The list of available workers' indices.\n   */\n  private available: number[] = [];\n\n  /**\n   * Create a new worker pool.\n   *\n   * @param Proto The worker class to create.\n   * @param options The options to create the worker pool.\n   */\n  constructor(\n    public Proto: new () => SharedWorker,\n    public options: SharedWorkerPoolOptions = defaultOptions\n  ) {\n    const { maxWorker } = options;\n\n    for (let i = 0; i < maxWorker; i++) {\n      const worker = new Proto();\n      worker.port.start();\n      this.workers.push(worker);\n      this.available.push(i);\n    }\n  }\n\n  /**\n   * Append a new job to be executed by a worker.\n   *\n   * @param job The job to queue.\n   */\n  addJob = (job: SharedWorkerPoolJob) => {\n    this.queue.push(job);\n    this.process();\n  };\n\n  /**\n   * Process the queue of jobs. This is called when a worker becomes available or\n   * when a new job is added to the queue.\n   */\n  private process = () => {\n    if (this.queue.length !== 0 && this.available.length > 0) {\n      const index = this.available.shift() as number;\n      const worker = this.workers[index];\n\n      const { message, buffers, resolve } =\n        this.queue.shift() as SharedWorkerPoolJob;\n\n      worker.port.postMessage(message, buffers || []);\n      SharedWorkerPool.WORKING_COUNT++;\n\n      const workerCallback = ({ data }: any) => {\n        SharedWorkerPool.WORKING_COUNT--;\n        worker.port.removeEventListener(\"message\", workerCallback);\n        this.available.push(index);\n        resolve(data);\n        if (this.queue.length !== 0 && this.available.length > 0) {\n          setTimeout(this.process, 0);\n        }\n      };\n\n      worker.port.addEventListener(\"message\", workerCallback);\n    }\n  };\n\n  /**\n   * Whether or not are there no available workers.\n   */\n  get isBusy() {\n    return this.available.length <= 0;\n  }\n\n  /**\n   * The number of workers that are simultaneously working.\n   */\n  get workingCount() {\n    return this.workers.length - this.available.length;\n  }\n}\n","import { AABB } from \"@voxelize/aabb\";\nimport {\n  ArrowHelper,\n  BoxGeometry,\n  Color,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  Vector3,\n} from \"three\";\n\nimport { World } from \"../core/world\";\nimport {\n  NX_ROTATION,\n  NY_ROTATION,\n  NZ_ROTATION,\n  PX_ROTATION,\n  PY_ROTATION,\n  PZ_ROTATION,\n  Y_ROT_MAP,\n} from \"../core/world/block\";\nimport { Coords3 } from \"../types\";\nimport { ChunkUtils, MathUtils } from \"../utils\";\n\nimport { Arrow } from \"./arrow\";\n\n/**\n * Parameters to customize the {@link VoxelInteract} instance.\n */\nexport type VoxelInteractOptions = {\n  /**\n   * The maximum distance of reach for the {@link VoxelInteract} instance. Defaults to `32`.\n   */\n  reachDistance: number;\n\n  /**\n   * Whether or not should the {@link VoxelInteract} instance ignore fluids when raycasting. Defaults to `true`.\n   */\n  ignoreFluids: boolean;\n\n  /**\n   * Whether or not should the {@link VoxelInteract} instance reverse the raycasting direction. Defaults to `false`.\n   */\n  inverseDirection: boolean;\n\n  /**\n   * The scale of the block highlight. Defaults to `1.002`.\n   */\n  highlightScale: number;\n\n  /**\n   * The type of the block highlight. Box would be a semi-transparent box, while outline would be 12 lines that outline the block's AABB union.\n   * Defaults to `\"box\"`.\n   */\n  highlightType: \"box\" | \"outline\";\n\n  /**\n   * The lerping factor of the highlight. Defaults to `0.8`.\n   */\n  highlightLerp: number;\n\n  /**\n   * The color of the highlight. Defaults to `0xffffff`.\n   */\n  highlightColor: Color;\n\n  /**\n   * The opacity of the highlight. Defaults to `0.8`.\n   */\n  highlightOpacity: number;\n\n  /**\n   * @debug\n   * Whether or not should there be arrows indicating the potential block placement's orientations. Defaults to `false`.\n   */\n  potentialVisuals: boolean;\n};\n\nconst defaultOptions: VoxelInteractOptions = {\n  reachDistance: 32,\n  ignoreFluids: true,\n  highlightType: \"box\",\n  highlightScale: 1.002,\n  highlightLerp: 1,\n  inverseDirection: false,\n  highlightColor: new Color(\"white\"),\n  highlightOpacity: 0.1,\n  potentialVisuals: false,\n};\n\n/**\n * The VoxelInteract class is used to interact with voxels in the {@link World} instance. It consists of two main parts:\n *\n * - {@link VoxelInteract.potential}: The potential block placement. This is the data of a block's orientation that can be placed.\n * - {@link VoxelInteract.target}: The targeted block. This is the voxel that the camera is looking at.\n *\n * You can use these two properties to place blocks, remove blocks, and more.\n *\n * # Example\n * ```ts\n * // Create a new VoxelInteract instance.\n * const voxelInteract = new VoxelInteract(camera, world);\n *\n * // Add the voxel interact to the scene.\n * world.add(voxelInteract);\n *\n * // Set the target block to air.\n * if (voxelInteract.target) {\n *   const [vx, vy, vz] = voxelInteract.target;\n *   world.updateVoxel(vx, vy, vz, 0);\n * }\n *\n * // Update the interaction every frame.\n * voxelInteract.update();\n * ```\n *\n * ![VoxelInteract](/img/docs/voxel-interact.png)\n *\n * @noInheritDoc\n */\nexport class VoxelInteract extends Group {\n  /**\n   * Parameters to customize the {@link VoxelInteract} instance.\n   */\n  public options: VoxelInteractOptions;\n\n  /**\n   * Whether or not is this {@link VoxelInteract} instance currently active.\n   */\n  public active = true;\n\n  /**\n   * The potential orientation and location of the block placement. If no block placement is possible, this will be `null`.\n   */\n  public potential: {\n    /**\n     * The 3D coordinates of the potential block placement.\n     */\n    voxel: Coords3;\n\n    /**\n     * The rotation that the block placement's major axis should be facing.\n     */\n    rotation: number;\n\n    /**\n     * The rotation along the Y axis that the block placement's major axis should be facing.\n     * This only works if rotation is {@link PY_ROTATION} or {@link NY_ROTATION}.\n     */\n    yRotation: number;\n  } | null = {\n    voxel: [0, 0, 0],\n    rotation: PY_ROTATION,\n    yRotation: 0,\n  };\n\n  /**\n   * The targeted voxel coordinates of the block that the camera is looking at. If no block is targeted, this will be `null`.\n   */\n  public target: Coords3 | null = [0, 0, 0];\n\n  /**\n   * The new scale of the target for highlighting.\n   */\n  private newTargetScale = new Vector3();\n\n  /**\n   * The new position of the target for highlighting.\n   */\n  private newTargetPosition = new Vector3();\n\n  /**\n   * A Three.js group that contains the target block's highlight.\n   */\n  private targetGroup = new Group();\n\n  /**\n   * A Three.js group that contains the potential block placement's arrows.\n   */\n  private potentialGroup = new Group();\n\n  /**\n   * An arrow that points to the major axis of the potential block placement.\n   */\n  private potentialArrow: ArrowHelper;\n\n  /**\n   * An arrow that points to the y axis rotation of the potential block placement.\n   */\n  private yRotArrow: ArrowHelper;\n\n  /**\n   * Create a new VoxelInteract instance.\n   *\n   * @param object The object that the interactions should be raycasting from.\n   * @param world The {@link World} instance that the interactions should be raycasting in.\n   * @param options Parameters to customize the {@link VoxelInteract} instance.\n   */\n  constructor(\n    public object: Object3D,\n    public world: World,\n    options: Partial<VoxelInteractOptions> = {}\n  ) {\n    super();\n\n    if (!object) {\n      throw new Error(\"VoxelInteract: object is required.\");\n    }\n\n    if (!world) {\n      throw new Error(\"VoxelInteract: a world is required to be operated on\");\n    }\n\n    const { potentialVisuals } = (this.options = {\n      ...defaultOptions,\n      ...options,\n    });\n\n    this.setup();\n\n    this.add(this.targetGroup, this.potentialGroup);\n    this.potentialGroup.visible = potentialVisuals;\n  }\n\n  /**\n   * Toggle on/off of this {@link VoxelInteract} instance.\n   *\n   * @param force Whether or not should it be a forceful toggle on/off. Defaults to `null`.\n   */\n  toggle = (force = null) => {\n    this.active = force === null ? !this.active : force;\n\n    this.potential = null;\n    this.target = null;\n\n    this.visible = this.active;\n  };\n\n  /**\n   * Raycasts from the given object's position and direction to find the targeted voxel and potential block placement.\n   * If no block is targeted, then {@link VoxelInteract.target} and {@link VoxelInteract.potential} will both be `null`.\n   */\n  update = () => {\n    if (!this.active) return;\n\n    const { reachDistance, highlightScale } = this.options;\n\n    this.targetGroup.scale.lerp(\n      this.newTargetScale,\n      this.options.highlightLerp\n    );\n    this.targetGroup.position.lerp(\n      this.newTargetPosition,\n      this.options.highlightLerp\n    );\n\n    const objPos = new Vector3();\n    const objDir = new Vector3();\n    this.object.getWorldPosition(objPos);\n    this.object.getWorldDirection(objDir);\n    objDir.normalize();\n\n    if (this.options.inverseDirection) {\n      objDir.multiplyScalar(-1);\n    }\n\n    const result = this.world.raycastVoxels(\n      objPos.toArray(),\n      objDir.toArray(),\n      reachDistance,\n      {\n        ignoreFluids: this.options.ignoreFluids,\n      }\n    );\n\n    // No target.\n    if (!result) {\n      this.visible = false;\n      this.target = null;\n      this.potential = null;\n      return;\n    }\n\n    const { voxel, normal } = result;\n\n    const [nx, ny, nz] = normal;\n    const newTarget = ChunkUtils.mapWorldToVoxel(<Coords3>voxel);\n\n    // Pointing at air.\n    const newLookingID = this.world.getVoxelAt(...newTarget);\n    if (newLookingID === 0) {\n      this.visible = false;\n      this.target = null;\n      this.potential = null;\n      return;\n    }\n\n    this.visible = true;\n    this.target = newTarget;\n\n    const { lookingAt } = this;\n\n    if (lookingAt && this.target) {\n      const { isDynamic, dynamicFn, dynamicPatterns } = lookingAt;\n\n      const aabbs = dynamicPatterns\n        ? this.world.getBlockAABBsForDynamicPatterns(\n            voxel[0],\n            voxel[1],\n            voxel[2],\n            dynamicPatterns\n          )\n        : isDynamic\n        ? dynamicFn(voxel as Coords3).aabbs\n        : lookingAt.aabbs;\n\n      if (!aabbs.length) return;\n\n      const rotation = this.world.getVoxelRotationAt(...this.target);\n\n      let union: AABB = rotation.rotateAABB(aabbs[0]);\n\n      for (let i = 1; i < aabbs.length; i++) {\n        const aabb = rotation.rotateAABB(aabbs[i]);\n        union = union.union(aabb);\n      }\n\n      union.translate(this.target);\n\n      let { width, height, depth } = union;\n\n      width *= highlightScale;\n      height *= highlightScale;\n      depth *= highlightScale;\n\n      this.newTargetScale.set(width, height, depth);\n      this.newTargetPosition.set(union.minX, union.minY, union.minZ);\n    }\n\n    const targetVoxel = [\n      this.target[0] + nx,\n      this.target[1] + ny,\n      this.target[2] + nz,\n    ] as Coords3;\n\n    // target block is look block summed with the normal\n    const rotation =\n      nx !== 0\n        ? nx > 0\n          ? PX_ROTATION\n          : NX_ROTATION\n        : ny !== 0\n        ? ny > 0\n          ? PY_ROTATION\n          : NY_ROTATION\n        : nz !== 0\n        ? nz > 0\n          ? PZ_ROTATION\n          : NZ_ROTATION\n        : 0;\n\n    const yRotation = (() => {\n      if (Math.abs(ny) !== 0) {\n        this.yRotArrow.visible = true;\n\n        const [vx, vy, vz] = [objPos.x, objPos.y, objPos.z];\n\n        const [tx, ty, tz] = [\n          targetVoxel[0] + 0.5,\n          targetVoxel[1] + 0.5,\n          targetVoxel[2] + 0.5,\n        ];\n\n        let angle =\n          ny > 0 ? Math.atan2(vx - tx, vz - tz) : Math.atan2(vz - tz, vx - tx);\n        if (ny < 0) angle += Math.PI / 2;\n        const normalized = MathUtils.normalizeAngle(angle);\n\n        let min = Infinity;\n        let closest: number;\n        let closestA: number;\n\n        Y_ROT_MAP.forEach(([a, yRot]) => {\n          if (Math.abs(normalized - a) < min) {\n            min = Math.abs(normalized - a);\n            closest = yRot;\n            closestA = a;\n          }\n        });\n\n        const x =\n          ny < 0 ? Math.cos(closestA - Math.PI / 2) : Math.sin(closestA);\n        const z =\n          ny < 0 ? Math.sin(closestA - Math.PI / 2) : Math.cos(closestA);\n        this.yRotArrow.setDirection(new Vector3(x, 0, z).normalize());\n        return closest;\n      }\n\n      this.yRotArrow.visible = false;\n      return 0;\n    })();\n\n    this.potential = {\n      voxel: targetVoxel,\n      rotation: rotation,\n      yRotation,\n      // lookingAt.rotatable ? closest : undefined,\n    };\n\n    if (this.potential) {\n      this.potentialGroup.position.set(\n        this.potential.voxel[0] + 0.5,\n        this.potential.voxel[1] + 0.5,\n        this.potential.voxel[2] + 0.5\n      );\n      this.potentialArrow.setDirection(new Vector3(nx, ny, nz));\n    }\n  };\n\n  /**\n   * Get the voxel ID of the targeted voxel. `null` if no voxel is targeted.\n   */\n  get lookingAt() {\n    if (this.target) {\n      return this.world.getBlockAt(\n        this.target[0],\n        this.target[1],\n        this.target[2]\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Setup the highlighter.\n   */\n  private setup = () => {\n    const { highlightType, highlightScale, highlightColor, highlightOpacity } =\n      this.options;\n\n    const mat = new MeshBasicMaterial({\n      color: new Color(highlightColor),\n      opacity: highlightOpacity,\n      transparent: true,\n    });\n\n    if (highlightType === \"outline\") {\n      const w = 0.01;\n      const dim = highlightScale;\n      const side = new Mesh(new BoxGeometry(dim, w, w), mat);\n\n      for (let i = -1; i <= 1; i += 2) {\n        for (let j = -1; j <= 1; j += 2) {\n          const temp = side.clone();\n\n          temp.position.y = ((dim - w) / 2) * i;\n          temp.position.z = ((dim - w) / 2) * j;\n\n          this.targetGroup.add(temp);\n        }\n      }\n\n      for (let i = -1; i <= 1; i += 2) {\n        for (let j = -1; j <= 1; j += 2) {\n          const temp = side.clone();\n\n          temp.position.z = ((dim - w) / 2) * i;\n          temp.position.x = ((dim - w) / 2) * j;\n          temp.rotation.z = Math.PI / 2;\n\n          this.targetGroup.add(temp);\n        }\n      }\n\n      for (let i = -1; i <= 1; i += 2) {\n        for (let j = -1; j <= 1; j += 2) {\n          const temp = side.clone();\n\n          temp.position.x = ((dim - w) / 2) * i;\n          temp.position.y = ((dim - w) / 2) * j;\n          temp.rotation.y = Math.PI / 2;\n\n          this.targetGroup.add(temp);\n        }\n      }\n\n      const offset = new Vector3(0.5, 0.5, 0.5);\n\n      this.targetGroup.children.forEach((child) => {\n        child.position.add(offset);\n      });\n    } else if (highlightType === \"box\") {\n      const box = new Mesh(\n        new BoxGeometry(highlightScale, highlightScale, highlightScale),\n        mat\n      );\n\n      box.position.x += 0.5;\n      box.position.y += 0.5;\n      box.position.z += 0.5;\n\n      this.targetGroup.add(box);\n    } else {\n      throw new Error(\"Invalid highlight type\");\n    }\n\n    this.potentialArrow = new Arrow({ color: \"red\" });\n    this.yRotArrow = new Arrow({ color: \"green\" });\n\n    this.potentialGroup.add(this.potentialArrow, this.yRotArrow);\n\n    this.targetGroup.frustumCulled = false;\n    this.targetGroup.renderOrder = 1000000;\n  };\n}\n","import * as THREE from \"three\";\n\nimport { Inputs } from \"../core/inputs\";\n\nimport { ARM_COLOR } from \"./character\";\n\nconst ARM_POSITION = new THREE.Vector3(1, -1, -1);\nconst ARM_QUATERION = new THREE.Quaternion().setFromEuler(\n  new THREE.Euler(-Math.PI / 4, 0, -Math.PI / 8)\n);\nconst BLOCK_POSITION = new THREE.Vector3(1, -1.8, -2);\nconst BLOCK_QUATERNION = new THREE.Quaternion().setFromAxisAngle(\n  new THREE.Vector3(0, 1, 0),\n  -Math.PI / 4\n);\n\nexport type HudOptions = {\n  armMesh?: THREE.Object3D;\n  armPosition?: THREE.Vector3;\n  armQuaternion?: THREE.Quaternion;\n  blockPosition?: THREE.Vector3;\n  blockQuaternion?: THREE.Quaternion;\n  armColor?: string;\n};\n\nconst defaultOptions: HudOptions = {\n  armMesh: undefined,\n  armPosition: ARM_POSITION,\n  armQuaternion: ARM_QUATERION,\n  blockPosition: BLOCK_POSITION,\n  blockQuaternion: BLOCK_QUATERNION,\n  armColor: ARM_COLOR,\n};\n\nexport class Hud extends THREE.Group {\n  public options: HudOptions;\n\n  private mixer: THREE.AnimationMixer;\n\n  private armSwingClip: THREE.AnimationClip;\n\n  private blockSwingClip: THREE.AnimationClip;\n\n  private blockPlaceClip: THREE.AnimationClip;\n\n  private swingAnimation: THREE.AnimationAction;\n\n  private placeAnimation: THREE.AnimationAction;\n\n  constructor(options: Partial<HudOptions> = {}) {\n    super();\n\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.armSwingClip = this.generateSwingClip(\n      this.options.armPosition,\n      this.options.armQuaternion,\n      \"armSwing\"\n    );\n    this.blockSwingClip = this.generateSwingClip(\n      this.options.blockPosition,\n      this.options.blockQuaternion,\n      \"blockSwing\"\n    );\n    this.blockPlaceClip = this.generatePlaceClip(\n      this.options.blockPosition,\n      this.options.blockQuaternion,\n      \"blockPlace\"\n    );\n\n    this.setArmMesh();\n  }\n\n  /**\n   * Connect the HUD to the given input manager. This will allow the HUD to listen to left\n   * and right clicks to play HUD animations. This function returns a function that when called\n   * unbinds the HUD's keyboard inputs.\n   *\n   * @param inputs The {@link Inputs} instance to bind the HUD's keyboard inputs to.\n   * @param namespace The namespace to bind the HUD's keyboard inputs to.\n   */\n  public connect = (inputs: Inputs, namespace = \"*\") => {\n    const unbindLeftClick = inputs.click(\"left\", this.playSwing, namespace);\n    const unbindRightClick = inputs.click(\"right\", this.playPlace, namespace);\n\n    return () => {\n      try {\n        unbindLeftClick();\n        unbindRightClick();\n      } catch (e) {\n        // Ignore.\n      }\n    };\n  };\n\n  /**\n   * Set a new mesh for the HUD. If `animate` is true, the transition will be animated.\n   *\n   * @param mesh New mesh for the HUD\n   * @param animate Whether to animate the transition\n   */\n  public setMesh = (mesh: THREE.Object3D | undefined, animate: boolean) => {\n    if (!animate) {\n      this.clear();\n\n      if (!mesh) {\n        this.setArmMesh();\n      } else {\n        this.setBlockMesh(mesh);\n      }\n    } else {\n      // TODO: Create animation of arm coming down and coming back up\n    }\n  };\n\n  private setArmMesh = () => {\n    const color = new THREE.Color(ARM_COLOR);\n    const geometry = new THREE.BoxGeometry(0.3, 1, 0.3);\n    // TODO: Make mesh appear in front of everything\n    const material = new THREE.MeshBasicMaterial({\n      color,\n      // depthTest: false,\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.set(ARM_POSITION.x, ARM_POSITION.y, ARM_POSITION.z);\n    mesh.quaternion.multiply(ARM_QUATERION);\n    // this.mesh.renderOrder = 9999999;\n\n    this.mixer = new THREE.AnimationMixer(mesh);\n    this.swingAnimation = this.mixer.clipAction(this.armSwingClip);\n    this.swingAnimation.setLoop(THREE.LoopOnce, 1);\n    this.swingAnimation.clampWhenFinished = true;\n\n    this.placeAnimation = undefined;\n\n    this.add(mesh);\n  };\n\n  private setBlockMesh = (mesh: THREE.Object3D) => {\n    mesh.position.set(BLOCK_POSITION.x, BLOCK_POSITION.y, BLOCK_POSITION.z);\n    mesh.quaternion.multiply(BLOCK_QUATERNION);\n\n    // TODO: Make mesh appear in front of everything\n    // mesh.traverse((child) => {\n    //   if (\n    //     child instanceof THREE.Mesh &&\n    //     child.material instanceof THREE.Material\n    //   ) {\n    //     child.material.depthTest = false; // Disable depth testing\n    //     child.renderOrder = 99999999; // Set a high render order\n    //   }\n    // });\n\n    this.mixer = new THREE.AnimationMixer(mesh);\n    this.swingAnimation = this.mixer.clipAction(this.blockSwingClip);\n    this.swingAnimation.setLoop(THREE.LoopOnce, 1);\n    this.swingAnimation.clampWhenFinished = true;\n\n    this.placeAnimation = this.mixer.clipAction(this.blockPlaceClip);\n    this.placeAnimation.setLoop(THREE.LoopOnce, 1);\n    this.placeAnimation.clampWhenFinished = true;\n\n    this.add(mesh);\n  };\n\n  /**\n   * Generates a \"swing\" animation clip.\n   *\n   * @param pInitial Initial position\n   * @param qInitial Initial quaternion\n   * @param name Name of the clip\n   * @returns Animation clip\n   */\n  private generateSwingClip = (\n    pInitial: THREE.Vector3,\n    qInitial: THREE.Quaternion,\n    name: string\n  ) => {\n    const timestamps = [0, 0.05, 0.1, 0.15, 0.2, 0.3];\n\n    const pMid = pInitial.clone();\n    pMid.x -= 0.34;\n    pMid.y += 0.23;\n    const pMid2 = pMid.clone();\n    pMid2.y -= 0.25;\n    const pMid3 = pMid2.clone();\n    pMid3.y -= 0.68;\n    const pMid4 = pInitial.clone();\n    pMid4.y -= 0.3;\n    const positionKF = new THREE.VectorKeyframeTrack(\".position\", timestamps, [\n      pInitial.x,\n      pInitial.y,\n      pInitial.z,\n      pMid.x,\n      pMid.y,\n      pMid.z,\n      pMid2.x,\n      pMid2.y,\n      pMid2.z,\n      pMid3.x,\n      pMid3.y,\n      pMid3.z,\n      pMid4.x,\n      pMid4.y,\n      pMid4.z,\n      pInitial.x,\n      pInitial.y,\n      pInitial.z,\n    ]);\n    const qMid = qInitial.clone();\n    qMid.x -= qInitial.x + 0.41;\n    qMid.z += 0.21 - qInitial.z;\n    const qMid2 = qMid.clone();\n    qMid2.z += 0.31;\n    const qMid3 = qMid2.clone();\n    qMid3.z += 0.23;\n    const qMid4 = qInitial.clone();\n\n    const quaternionKF = new THREE.QuaternionKeyframeTrack(\n      \".quaternion\",\n      timestamps,\n      [\n        qInitial.x,\n        qInitial.y,\n        qInitial.z,\n        qInitial.w,\n        qMid.x,\n        qMid.y,\n        qMid.z,\n        qMid.w,\n        qMid2.x,\n        qMid2.y,\n        qMid2.z,\n        qMid2.w,\n        qMid3.x,\n        qMid3.y,\n        qMid3.z,\n        qMid3.w,\n        qMid4.x,\n        qMid4.y,\n        qMid4.z,\n        qMid4.w,\n        qInitial.x,\n        qInitial.y,\n        qInitial.z,\n        qInitial.w,\n      ]\n    );\n\n    return new THREE.AnimationClip(name, 0.3, [positionKF, quaternionKF]);\n  };\n\n  /**\n   *\n   * Generates a \"place\" animation clip.\n   *\n   * @param pInitial Initial position\n   * @param qInitial Initial quaternion\n   * @param name Name of the clip\n   * @returns Animation clip\n   */\n  private generatePlaceClip = (\n    pInitial: THREE.Vector3,\n    qInitial: THREE.Quaternion,\n    name: string\n  ) => {\n    const timestamps = [0, 0.05, 0.1, 0.15, 0.2, 0.3];\n\n    const pMid = pInitial.clone();\n    pMid.x -= 0.34;\n    pMid.y += 0.23;\n    const pMid2 = pMid.clone();\n    pMid2.y -= 0.25;\n    const pMid3 = pMid2.clone();\n    pMid3.y -= 0.68;\n    const pMid4 = pInitial.clone();\n    pMid4.y -= 0.3;\n    const positionKF = new THREE.VectorKeyframeTrack(\".position\", timestamps, [\n      pInitial.x,\n      pInitial.y,\n      pInitial.z,\n      pMid.x,\n      pMid.y,\n      pMid.z,\n      pMid2.x,\n      pMid2.y,\n      pMid2.z,\n      pMid3.x,\n      pMid3.y,\n      pMid3.z,\n      pMid4.x,\n      pMid4.y,\n      pMid4.z,\n      pInitial.x,\n      pInitial.y,\n      pInitial.z,\n    ]);\n    const qMid = qInitial.clone();\n    qMid.x -= qInitial.x + 0.41;\n    qMid.z += 0.21 - qInitial.z;\n    const qMid2 = qMid.clone();\n    qMid2.z += 0.31;\n    const qMid3 = qMid2.clone();\n    qMid3.z += 0.23;\n    const qMid4 = qInitial.clone();\n\n    const quaternionKF = new THREE.QuaternionKeyframeTrack(\n      \".quaternion\",\n      timestamps,\n      [\n        qInitial.x,\n        qInitial.y,\n        qInitial.z,\n        qInitial.w,\n        qMid.x,\n        qMid.y,\n        qMid.z,\n        qMid.w,\n        qMid2.x,\n        qMid2.y,\n        qMid2.z,\n        qMid2.w,\n        qMid3.x,\n        qMid3.y,\n        qMid3.z,\n        qMid3.w,\n        qMid4.x,\n        qMid4.y,\n        qMid4.z,\n        qMid4.w,\n        qInitial.x,\n        qInitial.y,\n        qInitial.z,\n        qInitial.w,\n      ]\n    );\n\n    return new THREE.AnimationClip(name, 0.3, [positionKF, quaternionKF]);\n  };\n\n  /**\n   *\n   * Update the arm's animation. Note that when a hud is attached to a control,\n   * `update` is called automatically within the control's update loop.\n   */\n  public update(delta: number) {\n    this.mixer.update(delta);\n  }\n\n  /**\n   * Play the \"swing\" animation.\n   */\n  private playSwing = () => {\n    if (this.swingAnimation) {\n      this.swingAnimation.reset();\n      this.swingAnimation.play();\n    }\n  };\n\n  /**\n   * Play the \"place\" animation.\n   */\n  private playPlace = () => {\n    if (this.placeAnimation) {\n      this.placeAnimation.reset();\n      this.placeAnimation.play();\n    }\n  };\n}\n","import { MessageProtocol, PeerProtocol } from \"@voxelize/transport/src/types\";\nimport { Group, Object3D, Quaternion, Vector3 } from \"three\";\n\nimport { Character } from \"../libs\";\n\nimport { NetIntercept } from \"./network\";\n\nconst emptyQ = new Quaternion();\nconst emptyP = new Vector3();\n\n/**\n * Parameters to customize the peers manager.\n */\nexport type PeersOptions = {\n  /**\n   * Whether or not should the client themselves be counted as \"updated\". In other words,\n   * whether or not should the update function be called on the client's own data. Defaults\n   * to `false`.\n   */\n  countSelf: boolean;\n\n  /**\n   * Whether or not should the peers manager automatically call `update` on any children\n   * mesh. Defaults to `true`.\n   */\n  updateChildren: boolean;\n};\n\nconst defaultOptions: PeersOptions = {\n  countSelf: false,\n  updateChildren: true,\n};\n\n/**\n * A class that allows you to add multiplayer functionality to your Voxelize game. This implements\n * a {@link NetIntercept} that intercepts all peer-related messages and allows you to customize\n * the behavior of multiplayer functionality. This class also extends a `THREE.Group` that allows\n * you to dynamically turn on/off multiplayer visibility.\n *\n * Override {@link Peers.packInfo} to customize the information that is sent to other peers.\n *\n * TODO-DOC\n *\n * # Example\n * ```ts\n * // Create a peers manager.\n * const peers = new VOXELIZE.Peers<VOXELIZE.Character>();\n *\n * // Add the peers group to the world.\n * world.add(peers);\n *\n * // Define what a new peer looks like.\n * peers.createPeer = (id) => {\n *   const character = new VOXELIZE.Character();\n *   character.username = id;\n *   return character;\n * };\n *\n * // Define what happens when a peer data is received.\n * peers.onPeerUpdate = (peer, data) => {\n *   peer.set(data.position, data.direction);\n * };\n *\n * // In the render loop, update the peers manager.\n * peers.update();\n * ```\n *\n * ![Example](/img/docs/peers.png)\n *\n * @noInheritDoc\n * @param C The type of the character. Defaults to `Object3D`.\n * @param T The type of peer metadata. Defaults to `{ direction: number[], position: number[] }`.\n * @category Core\n */\nexport class Peers<\n    C extends Object3D = Object3D,\n    T = { direction: number[]; position: number[] }\n  >\n  extends Group\n  implements NetIntercept\n{\n  /**\n   * Parameters to customize the peers manager.\n   */\n  public options: PeersOptions;\n\n  /**\n   * The client's own peer ID. This is set when the client first connects to the server.\n   */\n  public ownID = \"\";\n\n  /**\n   * The client's own username. This is set when the client first connects to the server.\n   */\n  public ownUsername = \"\";\n\n  public ownPeer?: C;\n\n  /**\n   * A list of packets that will be sent to the server.\n   *\n   * @hidden\n   */\n  public packets: MessageProtocol<any, any, any, any>[] = [];\n\n  /**\n   * Create a peers manager to add multiplayer functionality to your Voxelize game.\n   *\n   * @param object The object that is used to send client's own data back to the server.\n   * @param options Parameters to customize the effect.\n   */\n  constructor(public object?: Object3D, options: Partial<PeersOptions> = {}) {\n    super();\n\n    this.options = { ...defaultOptions, ...options };\n  }\n\n  /**\n   * A function called when a new player joins the game. This function should be implemented\n   * to create and return a new peer object.\n   *\n   * @param id The ID of the new peer.\n   */\n  createPeer: (id: string) => C;\n\n  /**\n   * A function called when a player joins the game. By default, the function calls the {@link Peers.createPeer}\n   * function to create a new peer object and adds it to the peers group. Customize this function to add additional\n   * behavior.\n   *\n   * @param id The new peer's ID.\n   */\n  onPeerJoin: (id: string, peer: C) => void;\n\n  /**\n   * A function called to update a peer object with new data. This function should be implemented to\n   * customize the behavior of the peer object.\n   *\n   * @param object The peer object.\n   * @param data The new data.\n   * @param info The peer's information.\n   * @param info.id The peer's ID.\n   * @param info.username The peer's username.\n   */\n  onPeerUpdate: (\n    object: C,\n    data: T,\n    info: { id: string; username: string }\n  ) => void;\n\n  /**\n   * A function called when a player leaves the game. Internally, when a player leaves, its object is removed\n   * from the peers group. Customize this function to add additional behavior.\n   *\n   * @param id The ID of the peer that left the game.\n   */\n  onPeerLeave: (id: string, peer: C) => void;\n\n  /**\n   * The network intercept implementation for peers.\n   *\n   * DO NOT CALL THIS METHOD OR CHANGE IT UNLESS YOU KNOW WHAT YOU ARE DOING.\n   *\n   * @hidden\n   * @param message The message to intercept.\n   */\n  onMessage = (\n    message: MessageProtocol<{ id: string }, T>,\n    { username }: { username: string }\n  ) => {\n    this.ownUsername = username;\n\n    const internalOnJoin = (id: string) => {\n      const peer = this.createPeer(id);\n      peer.name = id;\n      this.add(peer);\n      return peer;\n    };\n\n    switch (message.type) {\n      case \"INIT\": {\n        const { id } = message.json;\n        this.ownID = id;\n        break;\n      }\n      case \"JOIN\": {\n        const { text: id } = message;\n        if (!this.options.countSelf && (!this.ownID || this.ownID === id))\n          return;\n\n        if (!this.createPeer) {\n          console.warn(\"Peers.createPeer is not defined, skipping peer join.\");\n          return;\n        }\n\n        const peer = this.getObjectByName(id);\n\n        if (peer) {\n          break;\n        }\n\n        const newPeer = internalOnJoin(id);\n        this.onPeerJoin?.(id, newPeer);\n        break;\n      }\n      case \"LEAVE\": {\n        const { text: id } = message;\n        const peer = this.getObjectByName(id);\n\n        if (peer) this.remove(peer);\n\n        this.onPeerLeave?.(id, peer as C);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n\n    const { peers } = message;\n\n    if (peers) {\n      peers.forEach((peer: any) => {\n        if (!this.options.countSelf && (!this.ownID || peer.id === this.ownID))\n          return;\n        if (message.type === \"INIT\") this.onPeerJoin?.(peer.id, peer);\n\n        let object = this.getObjectByName(peer.id) as C;\n        if (!object) {\n          object = internalOnJoin(peer.id);\n        }\n\n        if (!this.onPeerUpdate) {\n          console.warn(\n            \"Peers.onPeerUpdate is not defined, skipping peer update.\"\n          );\n        } else {\n          this.onPeerUpdate(object, peer.metadata, {\n            id: peer.id,\n            username: peer.username,\n          });\n        }\n      });\n    }\n  };\n\n  /**\n   * Set the client's own peer instance.\n   *\n   * @param peer The peer instance that is going to be the client themselves.\n   */\n  setOwnPeer(peer: C) {\n    this.ownPeer = peer;\n    this.add(peer);\n  }\n\n  /**\n   * Set the client's own username. This will be broadcasted to the server.\n   *\n   * @param username The username of the client.\n   */\n  setOwnUsername(username: string) {\n    this.ownUsername = username;\n  }\n\n  /**\n   * Create a packet to send to the server. By default, this function sends the position and direction\n   * as metadata to the server. Override this function to customize the information sent.\n   *\n   * If customized and nothing is returned, no packets will be sent.\n   *\n   * @returns A peer protocol message\n   */\n  packInfo(): PeerProtocol<T> | void {\n    const {\n      x: dx,\n      y: dy,\n      z: dz,\n    } = new Vector3(0, 0, -1)\n      .applyQuaternion(this.object.getWorldQuaternion(emptyQ))\n      .normalize();\n    const { x: px, y: py, z: pz } = this.object.getWorldPosition(emptyP);\n\n    return {\n      id: this.ownID,\n      username: this.ownUsername,\n      metadata: {\n        position: [px, py, pz],\n        direction: [dx, dy, dz],\n      } as any as T,\n    } as PeerProtocol<T>;\n  }\n\n  /**\n   * Get a peer instance by its ID. This uses the `getObjectByName` method of the peers group.\n   *\n   * @param id The ID of the peer to get.\n   * @returns The peer object with the given ID.\n   */\n  getPeerById = (id: string) => this.getObjectByName(id) as C;\n\n  /**\n   * Update the peers manager. Internally, this attempts to call any children that has a `update` method.\n   * You can turn this behavior off by setting `options.updateChildren` to `false`.\n   *\n   * This function should be called in the render loop.\n   */\n  update() {\n    if (!this.object) return;\n\n    const info = this.packInfo();\n\n    if (this.ownPeer && info) {\n      this.onPeerUpdate(this.ownPeer, info.metadata, {\n        id: info.id,\n        username: info.username,\n      });\n    }\n\n    if (info) {\n      const event: MessageProtocol = {\n        type: \"PEER\",\n        peers: [info],\n      };\n\n      this.packets.push(event);\n    }\n\n    if (this.options.updateChildren) {\n      this.children.forEach((child) => {\n        if (child === this.ownPeer) return;\n\n        if (child instanceof Character) {\n          // @ts-ignore\n          child.update();\n        }\n      });\n    }\n  }\n}\n","export function encodeObjectToStruct(\n  obj: any,\n  seenObjects: Set<any> = new Set()\n): any {\n  if (typeof obj !== \"object\" || obj === null) {\n    return encodeStructValue(obj, seenObjects);\n  }\n\n  const convertedObject = {\n    fields: {},\n  };\n\n  seenObjects.add(obj);\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n\n      if (value === undefined) {\n        continue;\n      }\n\n      convertedObject.fields[key] = encodeStructValue(value, seenObjects);\n    }\n  }\n\n  seenObjects.delete(obj);\n\n  return convertedObject;\n}\n\nfunction encodeStructValue(value: any, seenObjects: Set<any>): any {\n  if (value === null || value === undefined) {\n    return {\n      nullValue: 0,\n    };\n  } else if (typeof value === \"number\") {\n    return {\n      numberValue: value,\n    };\n  } else if (typeof value === \"string\") {\n    return {\n      stringValue: value,\n    };\n  } else if (typeof value === \"boolean\") {\n    return {\n      boolValue: value,\n    };\n  } else if (Array.isArray(value)) {\n    return {\n      listValue: {\n        values: value.map((v) => encodeStructValue(v, seenObjects)),\n      },\n    };\n  } else if (typeof value === \"object\") {\n    if (seenObjects.has(value)) {\n      console.warn(\"Circular object detected\");\n\n      return {\n        stringValue: \"[Circular]\",\n      };\n    }\n\n    return {\n      structValue: encodeObjectToStruct(value, seenObjects),\n    };\n  }\n\n  throw new Error(`Unknown type: ${typeof value}`);\n}\n","import { MessageProtocol } from \"@voxelize/transport/src/types\";\nimport { encodeObjectToStruct } from \"@voxelize/transport/src/utils/encode-object-to-struct\";\n\nimport { NetIntercept } from \"./network\";\n\n/**\n * A Voxelize event from the server.\n */\nexport type Event = {\n  /**\n   * The name to identify the event.\n   */\n  name: string;\n\n  /**\n   * Additional information of the event.\n   */\n  payload?: any;\n};\n\n/**\n * The handler for an event sent from the Voxelize server.\n */\nexport type EventHandler = (payload: any | null) => void;\n\n/**\n * A manager for any events interacting with the Voxelize server. This is useful\n * for any defined game events that are sent from or needs to be broadcasted to\n * the server.\n *\n * # Example\n * ```ts\n * const events = new VOXELIZE.Events();\n *\n * // Define the behavior to handle a game-over event. Keep in mind that this\n * // event is most likely sent from the server, so check out the documentations\n * // for creating and emitting custom events fullstack.\n * events.on(\"game-over\", (payload) => {\n *   // Do something about the game over event.\n * });\n *\n * // Register the interceptor with the network.\n * network.register(events);\n * ```\n *\n * TODO-DOC\n *\n * @noInheritDoc\n */\nexport class Events extends Map<string, EventHandler> implements NetIntercept {\n  /**\n   * A list of packets that will be sent to the server.\n   *\n   * @hidden\n   */\n  public packets: MessageProtocol<any, any, any, any>[] = [];\n\n  /**\n   * The network intercept implementation for events.\n   *\n   * DO NOT CALL THIS METHOD OR CHANGE IT UNLESS YOU KNOW WHAT YOU ARE DOING.\n   *\n   * @hidden\n   * @param message The message to intercept.\n   */\n  onMessage = (message: MessageProtocol) => {\n    switch (message.type) {\n      case \"EVENT\": {\n        const { events } = message;\n\n        events.forEach((e: any) => {\n          this.handle(e.name, e.payload);\n        });\n\n        return;\n      }\n    }\n  };\n\n  /**\n   * Synonym for {@link on}, adds a listener to a Voxelize server event.\n   * If the payload cannot be parsed by JSON, `null` is set.\n   *\n   * @param name The name of the event to listen on. Case sensitive.\n   * @param handler What to do when this event is received?\n   */\n  addEventListener = (name: string, handler: EventHandler) => {\n    this.on(name, handler);\n  };\n\n  /**\n   * Synonym for {@link addEventListener}, adds a listener to a Voxelize server event.\n   * If the payload cannot be parsed by JSON, `null` is set.\n   *\n   * @param name The name of the event to listen on. Case sensitive.\n   * @param handler What to do when this event is received?\n   */\n  on = (name: string, handler: EventHandler) => {\n    if (this.has(name)) {\n      console.warn(\n        `Registering handler for ${name} canceled: handler already exists.`\n      );\n      return;\n    }\n\n    this.set(name, handler);\n  };\n\n  /**\n   * Emit an event to the server.\n   *\n   * @param name The name of the event to emit.\n   * @param payload The payload to send with the event.\n   */\n  emit = (name: string, payload: any = {}) => {\n    this.packets.push({\n      type: \"EVENT\",\n      events: [\n        {\n          name,\n          payload: encodeObjectToStruct(payload),\n        },\n      ],\n    });\n  };\n\n  /**\n   * The handler for network packages to distribute to the event handlers.\n   *\n   * @hidden\n   */\n  handle = (name: string, payload: any) => {\n    const handler = this.get(name);\n\n    if (!handler) {\n      return;\n    }\n\n    handler(payload);\n  };\n\n  /**\n   * Creates a new instance of the Voxelize event manager.\n   */\n  constructor() {\n    super();\n  }\n}\n","import { MessageProtocol } from \"@voxelize/transport/src/types\";\nimport { Group } from \"three\";\n\nimport { NetIntercept } from \"./network\";\n\nexport class Entity<T = any> extends Group {\n  public entId: string;\n\n  constructor(id: string) {\n    super();\n\n    this.entId = id;\n  }\n\n  /**\n   * Called when the entity is created.\n   */\n  onCreate: (data: T) => void;\n\n  onUpdate: (data: T) => void;\n\n  onDelete: (data: T) => void;\n}\n\n/**\n * A network interceptor that can be used to handle `ENTITY` messages. This is useful\n * for creating custom entities that can be sent over the network.\n *\n * TODO-DOCS\n *\n * # Example\n * ```ts\n * const entities = new VOXELIZE.Entities();\n *\n * // Define an entity type.\n * class MyEntity extends VOXELIZE.Entity<{ position: VOXELIZE.Coords3 }> {\n *   onUpdate = (data) => {\n *     // Do something with `data.position`.\n *   };\n * }\n *\n * // Register the entity type.\n * entities.setClass(\"my-entity\", MyEntity);\n *\n * // Register the interceptor with the network.\n * network.register(entities);\n * ```\n *\n * @noInheritDoc\n * @category Core\n */\nexport class Entities extends Group implements NetIntercept {\n  public map: Map<string, Entity> = new Map();\n  public types: Map<string, new (id: string) => Entity> = new Map();\n\n  /**\n   * Set a new entity type to the entities manager.\n   *\n   * @param type The type of entity to register.\n   * @param entity The entity class to register.\n   */\n  setClass = (type: string, entity: new (id: string) => Entity) => {\n    this.types.set(type.toLowerCase(), entity);\n  };\n\n  /**\n   * The network intercept implementation for entities.\n   *\n   * DO NOT CALL THIS METHOD OR CHANGE IT UNLESS YOU KNOW WHAT YOU ARE DOING.\n   *\n   * @hidden\n   * @param message The message to intercept.\n   */\n  onMessage = (message: MessageProtocol) => {\n    const { entities } = message;\n\n    if (entities && entities.length) {\n      entities.forEach((entity) => {\n        const { id, type, metadata, operation } = entity;\n\n        // ignore all block entities as they are handled by world\n        if (type.startsWith(\"block::\")) {\n          return;\n        }\n\n        let object = this.map.get(id);\n\n        switch (operation) {\n          case \"CREATE\": {\n            if (object) {\n              return;\n            }\n\n            object = this.createEntityOfType(type, id);\n            object.onCreate?.(metadata);\n\n            break;\n          }\n          case \"UPDATE\": {\n            if (!object) {\n              object = this.createEntityOfType(type, id);\n              object.onCreate?.(metadata);\n            }\n\n            object.onUpdate?.(metadata);\n\n            break;\n          }\n          case \"DELETE\": {\n            if (!object) {\n              console.warn(`Entity ${id} does not exist.`);\n              return;\n            }\n\n            this.map.delete(id);\n\n            object.parent?.remove(object);\n            object.onDelete?.(metadata);\n\n            break;\n          }\n        }\n      });\n    }\n  };\n\n  private createEntityOfType = (type: string, id: string) => {\n    if (!this.types.has(type)) {\n      console.warn(`Entity type ${type} is not registered.`);\n      return;\n    }\n\n    const Entity = this.types.get(type.toLowerCase());\n    const object = new Entity(id);\n    this.map.set(id, object);\n    this.add(object);\n\n    return object;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import { EventEmitter } from \"events\";\n\nimport { AABB } from \"@voxelize/aabb\";\nimport { RigidBody } from \"@voxelize/physics-engine\";\nimport { MessageProtocol } from \"@voxelize/transport/src/types\";\nimport {\n  Clock,\n  Euler,\n  Group,\n  PerspectiveCamera,\n  Quaternion,\n  Vector3,\n} from \"three\";\n\nimport { Character, Hud } from \"../libs\";\nimport { Coords3 } from \"../types\";\nimport { ChunkUtils } from \"../utils\";\n\nimport { Inputs } from \"./inputs\";\nimport { NetIntercept } from \"./network\";\nimport { World } from \"./world\";\n\nconst PI_2 = Math.PI / 2;\nconst emptyQ = new Quaternion();\n\nfunction rotateY(a: number[], b: number[], c: number) {\n  const bx = b[0];\n  const bz = b[2];\n\n  // translate point to the origin\n  const px = a[0] - bx;\n  const pz = a[2] - bz;\n\n  const sc = Math.sin(c);\n  const cc = Math.cos(c);\n\n  // perform rotation and translate to correct position\n  const out = [0, 0, 0];\n  out[0] = bx + pz * sc + px * cc;\n  out[1] = a[1];\n  out[2] = bz + pz * cc - px * sc;\n\n  return out;\n}\n\n/**\n * The state of which a Voxelize {@link Controls} is in.\n */\nexport type RigidControlState = {\n  /**\n   * In radians, the heading y-rotation of the client. Defaults to `0`.\n   */\n  heading: number;\n\n  /**\n   * Whether if the client is running. Defaults to `false`.\n   */\n  running: boolean;\n\n  /**\n   * Whether if the client is attempting to jump, if the jump key is pressed. Defaults to `false`.\n   */\n  jumping: boolean;\n\n  /**\n   * Whether if the client is attempting to sprint, if the sprint key is pressed. Defaults to `false`.\n   */\n  sprinting: boolean;\n\n  /**\n   * Whether if the client is attempting to crouch, if the crouch key is pressed. Defaults to `false`.\n   */\n  crouching: boolean;\n\n  /**\n   * How many times has the client jumped. Defaults to `0`.\n   */\n  jumpCount: number;\n\n  /**\n   * Whether or not is the client jumping, in the air. Defaults to `false`.\n   */\n  isJumping: boolean;\n\n  /**\n   * The current amount of time spent in the air from jump. Defaults to `0`.\n   */\n  currentJumpTime: number;\n};\n\nconst defaultControlState: RigidControlState = {\n  heading: 0,\n  running: false,\n  jumping: false,\n  sprinting: false,\n  crouching: false,\n\n  jumpCount: 0,\n  isJumping: false,\n  currentJumpTime: 0,\n};\n\n/**\n * Parameters to initialize the Voxelize {@link Controls}.\n */\nexport type RigidControlsOptions = {\n  /**\n   * The mouse sensitivity. Defaults to `100`.\n   */\n  sensitivity: number;\n\n  /**\n   * Minimum polar angle that camera can look down to. Defaults to `Math.PI * 0.01`.\n   */\n  minPolarAngle: number;\n\n  /**\n   * Maximum polar angle that camera can look up to. Defaults to `Math.PI * 0.99`\n   */\n  maxPolarAngle: number;\n\n  /**\n   * Initial position of the client. Defaults to `(0, 80, 10)`.\n   */\n  initialPosition: Coords3;\n\n  initialDirection: Coords3;\n\n  /**\n   * The interpolation factor of the client's rotation. Defaults to `0.9`.\n   */\n  rotationLerp: number;\n\n  /**\n   * The force upwards when a client tries to jump in water. Defaults to `0.3`.\n   */\n  fluidPushForce: number;\n\n  /**\n   * The interpolation factor of the client's position. Defaults to `1.0`.\n   */\n  positionLerp: number;\n\n  /**\n   * The interpolation factor when the client is auto-stepping. Defaults to `0.6`.\n   */\n  stepLerp: number;\n\n  /**\n   * The width of the client's avatar. Defaults to `0.8` blocks.\n   */\n  bodyWidth: number;\n\n  /**\n   * The height of the client's avatar. Defaults to `1.55` blocks.\n   */\n  bodyHeight: number;\n\n  /**\n   * The depth of the client's avatar. Defaults to `0.8` blocks.\n   */\n  bodyDepth: number;\n\n  /**\n   * The ratio to `bodyHeight` at which the camera is placed from the ground. Defaults at `0.9193548387096774`.\n   */\n  eyeHeight: number;\n\n  /**\n   * The maximum level of speed of a client. Default is `6` .\n   */\n  maxSpeed: number;\n\n  /**\n   * The level of force of which the client can move at. Default is `30`.\n   */\n  moveForce: number;\n\n  /**\n   * The level of responsiveness of a client to movements. Default is `240`.\n   */\n  responsiveness: number;\n\n  /**\n   * Default running friction of a client. Defaults to `0.1`.\n   */\n  runningFriction: number;\n\n  /**\n   * Default standing friction of a client. Defaults to `4`.\n   */\n  standingFriction: number;\n\n  /**\n   * The level of speed at which a client flies at. Defaults to `40`.\n   */\n  flySpeed: number;\n\n  /**\n   * The level of force at which a client flies at. Defaults to `80`.\n   */\n  flyForce: number;\n\n  /**\n   * The level impulse of which a client flies at. Defaults to `2.5`.\n   */\n  flyImpulse: number;\n\n  /**\n   * The inertia of a client when they're flying. Defaults to `6`.\n   */\n  flyInertia: number;\n\n  /**\n   * The factor to the movement speed when sprint is applied. Defaults to `1.4`.\n   */\n  sprintFactor: number;\n\n  /**\n   * The factor to the movement speed when crouch is applied. Defaults to `0.6`.\n   */\n  crouchFactor: number;\n\n  /**\n   * Sprint factor would be on always. Defaults to `false`.\n   */\n  alwaysSprint: boolean;\n\n  /**\n   * The factor applied to the movements of the client in air, such as while half-jump. Defaults to `0.7`.\n   */\n  airMoveMult: number;\n\n  /**\n   * The level of impulse at which the client jumps upwards. Defaults to `8`.\n   */\n  jumpImpulse: number;\n\n  /**\n   * The level of force applied to the client when jumping. Defaults to `1`.\n   */\n  jumpForce: number;\n\n  /**\n   * The time, in milliseconds, that a client can be jumping. Defaults to `50`ms.\n   */\n  jumpTime: number;\n\n  /**\n   * How many times can a client jump in the air. Defaults to `0`.\n   */\n  airJumps: number;\n\n  /**\n   * How tall a client can step up. Defaults to `0.5`.\n   */\n  stepHeight: number;\n};\n\nconst defaultOptions: RigidControlsOptions = {\n  sensitivity: 100,\n  minPolarAngle: Math.PI * 0.01,\n  maxPolarAngle: Math.PI * 0.99,\n  initialPosition: [0, 80, 10],\n  initialDirection: [0, 0, 0],\n  rotationLerp: 0.9,\n  positionLerp: 1.0,\n  stepLerp: 0.6,\n\n  bodyWidth: 0.8,\n  bodyHeight: 1.55,\n  bodyDepth: 0.8,\n  eyeHeight: 0.9193548387096774,\n\n  maxSpeed: 6,\n  moveForce: 30,\n  responsiveness: 240,\n  runningFriction: 0.1,\n  standingFriction: 4,\n\n  flySpeed: 40,\n  flyForce: 80,\n  flyImpulse: 2.5,\n  flyInertia: 6,\n\n  sprintFactor: 1.4,\n  crouchFactor: 0.6,\n  alwaysSprint: false,\n  airMoveMult: 0.7,\n  fluidPushForce: 0.3,\n  jumpImpulse: 8,\n  jumpForce: 1,\n  jumpTime: 50,\n  airJumps: 0,\n\n  stepHeight: 0.5,\n};\n\n/**\n * Inspired by THREE.JS's PointerLockControls, a rigid body based first person controls.\n *\n * ## Example\n * ```ts\n * // Create the controls.\n * const controls = new RigidControls(\n *   camera,\n *   renderer.domElement,\n *   world\n * );\n *\n * // Printing the voxel that the client is in.\n * console.log(controls.voxel);\n *\n * // Call the controls update function in the render loop.\n * controls.update();\n * ```\n *\n * @noInheritDoc\n * @category Core\n */\nexport class RigidControls extends EventEmitter implements NetIntercept {\n  /**\n   * Parameters to initialize the Voxelize controls.\n   */\n  public options: RigidControlsOptions;\n\n  /**\n   * Reference linking to the Voxelize camera instance.\n   */\n  public camera: PerspectiveCamera;\n\n  /**\n   * Reference linking to the Voxelize {@link Inputs} instance. You can link an inputs manager by calling\n   * {@link RigidControls.connect}, which registers the keyboard inputs for the controls.\n   */\n  public inputs?: Inputs;\n\n  /**\n   * Reference linking to the Voxelize world instance.\n   */\n  public world: World;\n\n  /**\n   * A potential link to a {@link Character} instance. This can be added by\n   * calling {@link RigidControls.attachCharacter} to add a mesh for 2nd and 3rd person\n   * view.\n   */\n  public character?: Character;\n\n  /**\n   * A potential link to a {@link Hud} instance. This can be added by\n   * calling {@link RigidControls.attachHud} to add a mesh for the first person\n   * view.\n   */\n  public hud?: Hud;\n\n  /**\n   * The DOM element that pointerlock controls are applied to.\n   */\n  public domElement: HTMLElement;\n\n  /**\n   * A THREE.JS object, parent to the camera for pointerlock controls.\n   */\n  public object = new Group();\n\n  /**\n   * The state of the control, indicating things like whether or not the client is running.\n   */\n  public state: RigidControlState;\n\n  /**\n   * Flag indicating whether pointerlock controls have control over the cursor.\n   */\n  public isLocked = false;\n\n  /**\n   * The physical rigid body of the client, dimensions described by:\n   * - `options.bodyWidth`\n   * - `options.bodyHeight`\n   * - `options.bodyDepth`\n   */\n  public body: RigidBody;\n\n  /**\n   * Whether or not the client has certain movement potentials. For example, if the forward\n   * key is pressed, then \"front\" would be `true`. Vice versa for \"back\".\n   */\n  public movements = {\n    up: false,\n    down: false,\n    left: false,\n    right: false,\n    front: false,\n    back: false,\n    sprint: false,\n  };\n\n  /**\n   * The callback to locking the pointer.\n   */\n  private lockCallback: () => void;\n\n  /**\n   * The callback to unlocking the pointer.\n   */\n  private unlockCallback: () => void;\n\n  /**\n   * An internal euler for sharing rotation calculations.\n   */\n  private euler = new Euler(0, 0, 0, \"YXZ\");\n\n  /**\n   * An internal quaternion for sharing position calculations.\n   */\n  private quaternion = new Quaternion();\n\n  /**\n   * An internal vector for sharing position calculations.\n   */\n  private vector = new Vector3();\n\n  /**\n   * The new position of the controls. This is used to lerp the position of the controls.\n   */\n  private newPosition = new Vector3();\n\n  /**\n   * Whether or not is the first movement back on lock. This is because Chrome has a bug where\n   * movementX and movementY becomes 60+ on the first movement back.\n   */\n  private justUnlocked = false;\n\n  /**\n   * An internal clock instance for calculating delta time.\n   */\n  private clock = new Clock();\n\n  /**\n   * This is the identifier that is used to bind the rigid controls' keyboard inputs\n   * when {@link RigidControls.connect} is called.\n   */\n  public static readonly INPUT_IDENTIFIER = \"voxelize-rigid-controls\";\n\n  /**\n   * Construct a Voxelize rigid body based first person controls. This adds a rigid body\n   * to the world's physics engine, and applies movement to the camera.\n   *\n   * @param camera The camera to apply the controls to.\n   * @param domElement The DOM element to apply the controls to.\n   * @param world The world to apply the controls to.\n   * @param options The options to initialize the controls with.\n   */\n  constructor(\n    camera: PerspectiveCamera,\n    domElement: HTMLElement,\n    world: World,\n    options: Partial<RigidControlsOptions> = {}\n  ) {\n    super();\n\n    if (!camera) {\n      throw new Error(\"RigidControls: Camera is required.\");\n    }\n\n    if (!domElement) {\n      throw new Error(\"RigidControls: DOM Element is required.\");\n    }\n\n    if (!world) {\n      throw new Error(\"RigidControls: World is required.\");\n    }\n\n    this.camera = camera;\n    this.world = world;\n    this.domElement = domElement;\n    this.state = defaultControlState;\n\n    const { bodyWidth, bodyHeight, bodyDepth } = (this.options = {\n      ...defaultOptions,\n      ...options,\n    });\n\n    this.object.add(this.camera);\n    this.world.add(this.object);\n\n    this.body = world.physics.addBody({\n      aabb: new AABB(0, 0, 0, bodyWidth, bodyHeight, bodyDepth),\n      onStep: (newAABB) => {\n        const { positionLerp, stepLerp } = this.options;\n\n        this.options.positionLerp = stepLerp;\n        this.body.aabb = newAABB.clone();\n\n        const stepTimeout = setTimeout(() => {\n          this.options.positionLerp = positionLerp;\n          clearTimeout(stepTimeout);\n        }, 500);\n      },\n      stepHeight: this.options.stepHeight,\n    });\n\n    this.reset();\n  }\n\n  onMessage = (\n    message: MessageProtocol<any, any, any, [number, number, number]>\n  ) => {\n    switch (message.type) {\n      case \"EVENT\": {\n        const { events } = message;\n\n        for (const event of events) {\n          switch (event.name.toLowerCase()) {\n            case \"vox-builtin:position\": {\n              this.body.setPosition(event.payload);\n              break;\n            }\n\n            case \"vox-builtin:force\": {\n              const [x, y, z] = event.payload;\n              this.body.applyForce([x, y, z]);\n              break;\n            }\n\n            case \"vox-builtin:impulse\": {\n              const [x, y, z] = event.payload;\n              this.body.applyImpulse([x, y, z]);\n              break;\n            }\n          }\n        }\n\n        break;\n      }\n    }\n  };\n\n  /**\n   * An event handler for when the pointerlock is locked/unlocked.\n   * The events supported so far are:\n   * - `lock`: When the pointerlock is locked.\n   * - `unlock`: When the pointerlock is unlocked.\n   *\n   * @param event The event name, either `lock` or `unlock`.\n   * @param listener The listener to call when the event is emitted.\n   * @returns The controls instance for chaining.\n   */\n  on(event: \"lock\" | \"unlock\", listener: () => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * Update for the camera of the game. This should be called in the game update loop.\n   * What this does is that it updates the rigid body, and then interpolates the camera's position and rotation\n   * to the new position and rotation. If a character is attached, then the character is also updated.\n   * If the hud is attached, then the hud is also updated.\n   */\n  update = () => {\n    // Normalize the delta\n    const delta = Math.min(0.1, this.clock.getDelta());\n\n    this.object.quaternion.slerp(this.quaternion, this.options.rotationLerp);\n    this.object.position.lerp(this.newPosition, this.options.positionLerp);\n\n    if (this.character) {\n      const {\n        x: dx,\n        y: dy,\n        z: dz,\n      } = new Vector3(0, 0, -1)\n        .applyQuaternion(this.object.getWorldQuaternion(emptyQ))\n        .normalize();\n\n      const cameraPosition = this.object.position.toArray();\n\n      this.character.set(cameraPosition, [dx, dy, dz]);\n      this.character.update();\n    }\n\n    if (this.hud) this.hud.update(delta);\n\n    this.moveRigidBody();\n    this.updateRigidBody(delta);\n  };\n\n  /**\n   * Sets up all event listeners for controls, including:\n   * - Mouse move event\n   * - Pointer-lock events\n   * - Canvas click event\n   * - Key up/down events\n   * - Control lock/unlock events\n   *\n   * This function returns a function that can be called to disconnect the controls.\n   * Keep in mind that if {@link Inputs.remap} is used to remap any controls, they will\n   * not be unbound when the returned function is called.\n   *\n   * @options inputs {@link Inputs} instance to bind the controls to.\n   * @options namespace The namespace to bind the controls to.\n   */\n  connect = (inputs: Inputs, namespace = \"*\") => {\n    const unbinds = [];\n    const mouseMoveHandler = (event: MouseEvent) => this.onMouseMove(event);\n    const pointerLockChangeHandler = (e: Event) => {\n      e.preventDefault();\n      this.onPointerlockChange();\n    };\n    const pointerLockErrorHandler = this.onPointerlockError;\n    const documentClickHandler = this.onDocumentClick;\n\n    this.domElement.addEventListener(\"mousemove\", mouseMoveHandler);\n    this.domElement.ownerDocument.addEventListener(\n      \"pointerlockchange\",\n      pointerLockChangeHandler\n    );\n    this.domElement.ownerDocument.addEventListener(\n      \"pointerlockerror\",\n      pointerLockErrorHandler\n    );\n    this.domElement.addEventListener(\"click\", documentClickHandler);\n\n    unbinds.push(() => {\n      this.domElement.removeEventListener(\"mousemove\", mouseMoveHandler);\n      this.domElement.ownerDocument.removeEventListener(\n        \"pointerlockchange\",\n        pointerLockChangeHandler\n      );\n      this.domElement.ownerDocument.removeEventListener(\n        \"pointerlockerror\",\n        pointerLockErrorHandler\n      );\n      this.domElement.removeEventListener(\"click\", documentClickHandler);\n    });\n\n    const keyMappings = {\n      KeyW: \"front\",\n      KeyA: \"left\",\n      KeyS: \"back\",\n      KeyD: \"right\",\n      Space: \"up\",\n      ShiftLeft: \"down\",\n      KeyR: \"sprint\",\n    };\n\n    Object.entries(keyMappings).forEach(([code, movement]) => {\n      unbinds.push(\n        inputs.bind(\n          code,\n          () => {\n            if (!this.isLocked) return;\n            this.movements[movement] = true;\n          },\n          namespace,\n          {\n            identifier: RigidControls.INPUT_IDENTIFIER,\n            occasion: \"keydown\",\n            checkType: \"code\",\n          }\n        )\n      );\n\n      unbinds.push(\n        inputs.bind(\n          code,\n          () => {\n            if (!this.isLocked) return;\n            this.movements[movement] = false;\n          },\n          namespace,\n          {\n            identifier: RigidControls.INPUT_IDENTIFIER,\n            occasion: \"keyup\",\n            checkType: \"code\",\n          }\n        )\n      );\n    });\n\n    this.inputs = inputs;\n\n    return () => {\n      unbinds.forEach((unbind) => {\n        try {\n          unbind();\n        } catch (e) {\n          /// Ignore\n        }\n      });\n    };\n  };\n\n  /**\n   * Get the direction that the client is looking at.\n   */\n  getDirection = () => {\n    return new Vector3(0, 0, -1)\n      .applyQuaternion(this.object.quaternion)\n      .normalize();\n  };\n\n  /**\n   * Lock the cursor to the game, calling `requestPointerLock` on the dom element.\n   * Needs to be called within a DOM event listener callback!\n   *\n   * @param callback - Callback to be run once done.\n   */\n  lock = (callback?: () => void) => {\n    this.domElement.requestPointerLock();\n\n    if (callback) {\n      this.lockCallback = callback;\n    }\n  };\n\n  /**\n   * Unlock the cursor from the game, calling `exitPointerLock` on the HTML document.\n   * Needs to be called within a DOM event listener callback!\n   *\n   * @param callback - Callback to be run once done.\n   */\n  unlock = (callback?: () => void) => {\n    this.domElement.ownerDocument.exitPointerLock();\n\n    if (callback) {\n      this.unlockCallback = callback;\n    }\n  };\n\n  /**\n   * Teleport this rigid controls to a new voxel coordinate.\n   *\n   * @param vx The x voxel coordinate to teleport to.\n   * @param vy The y voxel coordinate to teleport to.\n   * @param vz The z voxel coordinate to teleport to.\n   */\n  teleport = (vx: number, vy: number, vz: number) => {\n    const { bodyHeight, eyeHeight } = this.options;\n    this.newPosition.set(vx + 0.5, vy + bodyHeight * eyeHeight + 1, vz + 0.5);\n\n    if (this.body) {\n      this.body.setPosition([vx + 0.5, vy + bodyHeight / 2 + 1, vz + 0.5]);\n    }\n  };\n\n  /**\n   * Teleport the rigid controls to the top of this voxel column.\n   */\n  teleportToTop = (vx?: number, vz?: number) => {\n    if (vx === undefined || vz === undefined) {\n      const { x, z } = this.object.position;\n      const maxHeight = this.world.getMaxHeightAt(x, z);\n      this.teleport(Math.floor(x), maxHeight, Math.floor(z));\n      return;\n    }\n\n    const [cx, cz] = ChunkUtils.mapVoxelToChunk(\n      [vx, 0, vz],\n      this.world.options.chunkSize\n    );\n    this.teleport(vx, 0, vz);\n    this.world.addChunkInitListener([cx, cz], () => {\n      const maxHeight = this.world.getMaxHeightAt(vx, vz);\n      this.teleport(Math.floor(vx), maxHeight, Math.floor(vz));\n    });\n  };\n\n  /**\n   * Make the client look at a coordinate.\n   *\n   * @param x X-coordinate to look at.\n   * @param y Y-coordinate to look at.\n   * @param z Z-coordinate to look at.\n   */\n  lookAt = (x: number, y: number, z: number) => {\n    const vec = this.object.position\n      .clone()\n      .add(this.object.position.clone().sub(new Vector3(x, y, z)));\n    this.object.lookAt(vec);\n  };\n\n  /**\n   * Reset all of the control's movements.\n   */\n  resetMovements = () => {\n    this.movements = {\n      sprint: false,\n      front: false,\n      back: false,\n      left: false,\n      right: false,\n      down: false,\n      up: false,\n    };\n  };\n\n  /**\n   * Toggle ghost mode. Ghost mode is when a client can fly through blocks.\n   */\n  toggleGhostMode = () => {\n    const { aabb } = this.body;\n    const [px, py, pz] = this.body.getPosition();\n    const { bodyWidth, bodyHeight, bodyDepth } = this.options;\n\n    if (this.ghostMode) {\n      aabb.minX = px - bodyWidth / 2;\n      aabb.minY = py - bodyHeight / 2;\n      aabb.minZ = pz - bodyDepth / 2;\n      aabb.maxX = aabb.minX + bodyWidth;\n      aabb.maxY = aabb.minY + bodyHeight;\n      aabb.maxZ = aabb.minZ + bodyDepth;\n      this.body.gravityMultiplier = 1;\n    } else {\n      const avgX = (aabb.minX + aabb.maxX) / 2;\n      const avgY = (aabb.minY + aabb.maxY) / 2;\n      const avgZ = (aabb.minZ + aabb.maxZ) / 2;\n      aabb.minX = avgX + 1;\n      aabb.maxX = avgX - 1;\n      aabb.minY = avgY + 1;\n      aabb.maxY = avgY - 1;\n      aabb.minZ = avgZ + 1;\n      aabb.maxZ = avgZ - 1;\n      this.body.gravityMultiplier = 0;\n    }\n  };\n\n  /**\n   * Toggle fly mode. Fly mode is like ghost mode, but the client can't fly through blocks.\n   */\n  toggleFly = () => {\n    if (!this.ghostMode) {\n      const isFlying = this.body.gravityMultiplier === 0;\n\n      if (!isFlying) {\n        this.body.applyImpulse([0, 8, 0]);\n      }\n\n      setTimeout(() => {\n        this.body.gravityMultiplier = isFlying ? 1 : 0;\n      }, 100);\n    }\n  };\n\n  /**\n   * Reset the controls instance. This will reset the camera's position and rotation, and reset all movements.\n   */\n  reset = () => {\n    this.teleport(...this.options.initialPosition);\n\n    this.quaternion.setFromUnitVectors(\n      new Vector3(0, 0, -1),\n      new Vector3(\n        this.options.initialDirection[0],\n        this.options.initialDirection[1],\n        this.options.initialDirection[2]\n      ).normalize()\n    );\n\n    this.object.rotation.set(0, 0, 0);\n\n    this.resetMovements();\n  };\n\n  /**\n   * Move the client forward/backward by a certain distance.\n   *\n   * @param distance - Distance to move forward by.\n   */\n  moveForward = (distance: number) => {\n    // move forward parallel to the xz-plane\n    // assumes camera.up is y-up\n\n    this.vector.setFromMatrixColumn(this.object.matrix, 0);\n\n    this.vector.crossVectors(this.object.up, this.vector);\n\n    this.object.position.addScaledVector(this.vector, distance);\n  };\n\n  /**\n   * Move the client left/right by a certain distance.\n   *\n   * @param distance - Distance to move left/right by.\n   */\n  moveRight = (distance: number) => {\n    this.vector.setFromMatrixColumn(this.object.matrix, 0);\n\n    this.object.position.addScaledVector(this.vector, distance);\n  };\n\n  /**\n   * Attach a {@link Character} to this controls instance. This can be seen in 2nd/3rd person mode.\n   *\n   * @param character The {@link Character} to attach to this controls instance.\n   * @param newLerpFactor The new lerp factor to use for the character.\n   */\n  attachCharacter = (character: Character, newLerpFactor = 1) => {\n    if (!(character instanceof Character)) {\n      console.warn(\"Character not attached: not a default character.\");\n      return;\n    }\n\n    // Change lerp factors to one.\n    character.options.positionLerp = newLerpFactor;\n    // character.options.rotationLerp = newLerpFactor;\n\n    this.options.bodyHeight = character.totalHeight;\n    this.options.bodyWidth = character.body.width;\n    this.options.bodyDepth = character.body.depth;\n    this.options.eyeHeight = character.eyeHeight / character.totalHeight;\n\n    this.body.aabb.maxX = this.body.aabb.minX + this.options.bodyWidth;\n    this.body.aabb.maxY = this.body.aabb.minY + this.options.bodyHeight;\n    this.body.aabb.maxZ = this.body.aabb.minZ + this.options.bodyDepth;\n\n    this.character = character;\n  };\n\n  /**\n   * Attach a {@link Hud} to this controls instance. This can be seen in 1st person mode.\n   *\n   * @param hud The {@link Hud} to attach to this controls instance.\n   */\n  attachHud = (hud: Hud) => {\n    this.camera.add(hud);\n\n    this.hud = hud;\n  };\n\n  /**\n   * Whether if the client is in ghost mode. Ghost mode means client can fly through blocks.\n   */\n  get ghostMode() {\n    return this.body.aabb.width <= 0;\n  }\n\n  /**\n   * Whether if the client is in fly mode. Fly mode means client can fly but not through blocks.\n   */\n  get flyMode() {\n    return this.body.gravityMultiplier === 0 && !this.ghostMode;\n  }\n\n  /**\n   * The voxel coordinates that the client is at. This is where the bottom of the client's body is located,\n   * floored to the voxel coordinate.\n   */\n  get voxel() {\n    const [x, y, z] = this.body.getPosition();\n\n    return ChunkUtils.mapWorldToVoxel([\n      x,\n      y - this.options.bodyHeight * 0.5,\n      z,\n    ]);\n  }\n\n  /**\n   * The 3D world coordinates that the client is at. This is where the bottom of the client's body is located.\n   */\n  get position() {\n    const position = new Vector3(...this.body.getPosition());\n    position.y -= this.options.bodyHeight * 0.5;\n    return position;\n  }\n\n  /**\n   * The chunk that the client is situated in.\n   */\n  get chunk() {\n    return ChunkUtils.mapVoxelToChunk(this.voxel, this.world.options.chunkSize);\n  }\n\n  /**\n   * Move the client's rigid body according to the current movement state.\n   */\n  private moveRigidBody = () => {\n    const { object, state } = this;\n\n    const { sprint, right, left, up, down, front, back } = this.movements;\n\n    const fb = front ? (back ? 0 : 1) : back ? -1 : 0;\n    const rl = left ? (right ? 0 : 1) : right ? -1 : 0;\n\n    const vec = new Vector3();\n\n    // get the frontwards-backwards direction vectors\n    vec.setFromMatrixColumn(object.matrix, 0);\n    vec.crossVectors(object.up, vec);\n    const { x: forwardX, z: forwardZ } = vec;\n\n    // get the side-ways vectors\n    vec.setFromMatrixColumn(object.matrix, 0);\n    const { x: sideX, z: sideZ } = vec;\n\n    const totalX = forwardX + sideX;\n    const totalZ = forwardZ + sideZ;\n\n    let angle = Math.atan2(totalX, totalZ);\n\n    if ((fb | rl) === 0) {\n      state.running = false;\n\n      if (state.sprinting) {\n        this.movements.sprint = false;\n        state.sprinting = false;\n      }\n    } else {\n      state.running = true;\n      if (fb) {\n        if (fb === -1) angle += Math.PI;\n        if (rl) {\n          angle += (Math.PI / 4) * fb * rl;\n        }\n      } else {\n        angle += (rl * Math.PI) / 2;\n      }\n      // not sure why add Math.PI / 4, but it was always off by that.\n      state.heading = angle + Math.PI / 4;\n    }\n\n    // set jump as true, and brain will handle the jumping\n    // state.jumping = up ? (down ? false : true) : down ? false : false;\n    state.jumping = up;\n\n    // crouch to true, so far used for flying\n    state.crouching = down;\n\n    // apply sprint state change\n    state.sprinting = this.options.alwaysSprint ? true : sprint;\n\n    // means landed, no more fly\n    if (!this.ghostMode) {\n      if (this.body.gravityMultiplier === 0 && this.body.atRestY === -1) {\n        this.body.gravityMultiplier = 1;\n      }\n    }\n  };\n\n  /**\n   * Update the rigid body by the physics engine.\n   */\n  private updateRigidBody = (dt: number) => {\n    const {\n      airJumps,\n      jumpForce,\n      jumpTime,\n      jumpImpulse,\n      maxSpeed,\n      sprintFactor,\n      crouchFactor,\n      moveForce,\n      airMoveMult,\n      responsiveness,\n      runningFriction,\n      standingFriction,\n      flyInertia,\n      flyImpulse,\n      flyForce,\n      flySpeed,\n      fluidPushForce,\n    } = this.options;\n\n    if (this.body.gravityMultiplier) {\n      // jumping\n      const onGround = this.body.atRestY < 0;\n      const canjump = onGround || this.state.jumpCount < airJumps;\n      if (onGround) {\n        this.state.isJumping = false;\n        this.state.jumpCount = 0;\n      }\n\n      // process jump input\n      if (this.state.jumping) {\n        if (this.state.isJumping) {\n          // continue previous jump\n          if (this.state.currentJumpTime > 0) {\n            let jf = jumpForce;\n            if (this.state.currentJumpTime < dt)\n              jf *= this.state.currentJumpTime / dt;\n            this.body.applyForce([0, jf, 0]);\n            this.state.currentJumpTime -= dt;\n          }\n        } else if (canjump) {\n          // start new jump\n          this.state.isJumping = true;\n          if (!onGround) this.state.jumpCount++;\n          this.state.currentJumpTime = jumpTime;\n          this.body.applyImpulse([0, jumpImpulse, 0]);\n          // clear downward velocity on airjump\n          if (!onGround && this.body.velocity[1] < 0) this.body.velocity[1] = 0;\n        } else if (this.body.ratioInFluid > 0) {\n          // apply impulse to swim\n          this.body.applyImpulse([0, fluidPushForce, 0]);\n        }\n      } else {\n        this.state.isJumping = false;\n      }\n\n      // apply movement forces if entity is moving, otherwise just friction\n      let m = [0, 0, 0];\n      let push = [0, 0, 0];\n      if (this.state.running) {\n        let speed = maxSpeed;\n        // todo: add crouch/sprint modifiers if needed\n        if (this.state.sprinting) speed *= sprintFactor;\n        if (this.state.crouching) speed *= crouchFactor;\n        m[2] = speed;\n\n        // rotate move vector to entity's heading\n\n        m = rotateY(m, [0, 0, 0], this.state.heading);\n\n        // push vector to achieve desired speed & dir\n        // following code to adjust 2D velocity to desired amount is patterned on Quake:\n        // https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/bg_pmove.c#L275\n        push = [\n          m[0] - this.body.velocity[0],\n          m[1] - this.body.velocity[1],\n          m[2] - this.body.velocity[2],\n        ];\n        push[1] = 0;\n        const pushLen = Math.sqrt(push[0] ** 2 + push[1] ** 2 + push[2] ** 2);\n\n        push[0] /= pushLen;\n        push[1] /= pushLen;\n        push[2] /= pushLen;\n\n        if (pushLen > 0) {\n          // pushing force vector\n          let canPush = moveForce;\n          if (!onGround) canPush *= airMoveMult;\n\n          // apply final force\n          const pushAmt = responsiveness * pushLen;\n          if (canPush > pushAmt) canPush = pushAmt;\n\n          push[0] *= canPush;\n          push[1] *= canPush;\n          push[2] *= canPush;\n\n          this.body.applyForce(push);\n        }\n\n        // different friction when not moving\n        // idea from Sonic: http://info.sonicretro.org/SPG:Running\n        this.body.friction = runningFriction;\n      } else {\n        this.body.friction = standingFriction;\n      }\n    } else {\n      this.body.velocity[0] -= this.body.velocity[0] * flyInertia * dt;\n      this.body.velocity[1] -= this.body.velocity[1] * flyInertia * dt;\n      this.body.velocity[2] -= this.body.velocity[2] * flyInertia * dt;\n\n      if (this.state.jumping) {\n        this.body.applyImpulse([0, flyImpulse, 0]);\n      }\n\n      if (this.state.crouching) {\n        this.body.applyImpulse([0, -flyImpulse, 0]);\n      }\n\n      // apply movement forces if entity is moving, otherwise just friction\n      let m = [0, 0, 0];\n      let push = [0, 0, 0];\n      if (this.state.running) {\n        let speed = flySpeed;\n        // todo: add crouch/sprint modifiers if needed\n        if (this.state.sprinting) speed *= sprintFactor;\n        if (this.state.crouching) speed *= crouchFactor;\n        m[2] = speed;\n\n        // rotate move vector to entity's heading\n        m = rotateY(m, [0, 0, 0], this.state.heading);\n\n        // push vector to achieve desired speed & dir\n        // following code to adjust 2D velocity to desired amount is patterned on Quake:\n        // https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/bg_pmove.c#L275\n        push = [\n          m[0] - this.body.velocity[0],\n          m[1] - this.body.velocity[1],\n          m[2] - this.body.velocity[2],\n        ];\n\n        push[1] = 0;\n        const pushLen = Math.sqrt(push[0] ** 2 + push[1] ** 2 + push[2] ** 2);\n\n        push[0] /= pushLen;\n        push[1] /= pushLen;\n        push[2] /= pushLen;\n\n        if (pushLen > 0) {\n          // pushing force vector\n          let canPush = flyForce;\n\n          // apply final force\n          const pushAmt = responsiveness * pushLen;\n          if (canPush > pushAmt) canPush = pushAmt;\n\n          push[0] *= canPush;\n          push[1] *= canPush;\n          push[2] *= canPush;\n\n          this.body.applyForce(push);\n        }\n\n        // different friction when not moving\n        // idea from Sonic: http://info.sonicretro.org/SPG:Running\n        this.body.friction = runningFriction;\n      } else {\n        this.body.friction = standingFriction;\n      }\n    }\n\n    const [x, y, z] = this.body.getPosition();\n    const { eyeHeight, bodyHeight } = this.options;\n    this.newPosition.set(x, y + bodyHeight * (eyeHeight - 0.5), z);\n  };\n\n  /**\n   * The mouse move handler. This is active when the pointer is locked.\n   */\n  private onMouseMove = (event: MouseEvent) => {\n    if (this.isLocked === false) return;\n\n    // Skip the first movement back on lock because chrome has a bug where\n    // movementX and movementY becomes 60+\n    if (this.justUnlocked) {\n      this.justUnlocked = false;\n      return;\n    }\n\n    const movementX = event.movementX || 0;\n    const movementY = event.movementY || 0;\n\n    this.euler.setFromQuaternion(this.quaternion);\n\n    this.euler.y -= (movementX * this.options.sensitivity * 0.002) / 100;\n    this.euler.x -= (movementY * this.options.sensitivity * 0.002) / 100;\n\n    this.euler.x = Math.max(\n      PI_2 - this.options.maxPolarAngle,\n      Math.min(PI_2 - this.options.minPolarAngle, this.euler.x)\n    );\n\n    this.quaternion.setFromEuler(this.euler);\n  };\n\n  /**\n   * When the pointer change event is fired, this will be called.\n   */\n  private onPointerlockChange = () => {\n    if (this.domElement.ownerDocument.pointerLockElement === this.domElement) {\n      this.onLock();\n\n      if (this.lockCallback) {\n        this.lockCallback();\n        this.lockCallback = undefined;\n      }\n\n      this.isLocked = true;\n    } else {\n      this.onUnlock();\n\n      if (this.unlockCallback) {\n        this.unlockCallback();\n        this.unlockCallback = undefined;\n      }\n\n      this.isLocked = false;\n    }\n  };\n\n  /**\n   * This happens when you try to lock the pointer too recently.\n   */\n  private onPointerlockError = () => {\n    console.error(\"VOXELIZE.RigidControls: Unable to use Pointer Lock API\");\n  };\n\n  /**\n   * Locks the pointer.\n   */\n  private onDocumentClick = () => {\n    if (this.isLocked) return;\n    this.lock();\n  };\n\n  /**\n   * When the pointer is locked, this will be called.\n   */\n  private onLock = () => {\n    this.emit(\"lock\");\n  };\n\n  /**\n   * When the pointer is unlocked, this will be called.\n   */\n  private onUnlock = () => {\n    this.emit(\"unlock\");\n    this.justUnlocked = true;\n  };\n}\n","// src/index.ts\nimport { AABB } from \"@voxelize/aabb\";\n\n// src/rigid-body.ts\nvar RigidBody = class {\n  constructor(aabb, mass, friction, restitution, gravityMultiplier, stepHeight, onStep, onCollide) {\n    this.aabb = aabb;\n    this.mass = mass;\n    this.friction = friction;\n    this.restitution = restitution;\n    this.gravityMultiplier = gravityMultiplier;\n    this.stepHeight = stepHeight;\n    this.onStep = onStep;\n    this.onCollide = onCollide;\n    this.resting = [0, 0, 0];\n    this.velocity = [0, 0, 0];\n    this.inFluid = false;\n    this.ratioInFluid = 0;\n    this.forces = [0, 0, 0];\n    this.impulses = [0, 0, 0];\n    this.sleepFrameCount = 10 | 0;\n    this.setPosition = (p) => {\n      this.aabb.setPosition([\n        p[0] - this.aabb.width / 2,\n        p[1] - this.aabb.height / 2,\n        p[2] - this.aabb.depth / 2\n      ]);\n      this.markActive();\n    };\n    this.getPosition = () => {\n      return [\n        this.aabb.minX + this.aabb.width / 2,\n        this.aabb.minY + this.aabb.height / 2,\n        this.aabb.minZ + this.aabb.depth / 2\n      ];\n    };\n    this.applyForce = (f) => {\n      this.forces[0] += f[0];\n      this.forces[1] += f[1];\n      this.forces[2] += f[2];\n      this.markActive();\n    };\n    this.applyImpulse = (i) => {\n      this.impulses[0] += i[0];\n      this.impulses[1] += i[1];\n      this.impulses[2] += i[2];\n      this.markActive();\n    };\n    this.markActive = () => {\n      this.sleepFrameCount = 10 | 0;\n    };\n    this.airDrag = -1;\n    this.fluidDrag = -1;\n  }\n  get atRestX() {\n    return this.resting[0];\n  }\n  get atRestY() {\n    return this.resting[1];\n  }\n  get atRestZ() {\n    return this.resting[2];\n  }\n};\n\n// src/sweep.ts\nfunction lineToPlane(unit, vector, normal) {\n  const [ux, uy, uz] = unit;\n  const [vx, vy, vz] = vector;\n  const [nx, ny, nz] = normal;\n  const NdotU = nx * ux + ny * uy + nz * uz;\n  if (NdotU === 0)\n    return Infinity;\n  return (nx * vx + ny * vy + nz * vz) / NdotU;\n}\nfunction between(x, a, b) {\n  return x >= a && x <= b;\n}\nfunction sweepAABB(self, other, vector) {\n  const mx = other.minX - self.maxX;\n  const my = other.minY - self.maxY;\n  const mz = other.minZ - self.maxZ;\n  const mhx = self.width + other.width;\n  const mhy = self.height + other.height;\n  const mhz = self.depth + other.depth;\n  const [dx, dy, dz] = vector;\n  let h = 1, s = 0, nx = 0, ny = 0, nz = 0;\n  s = lineToPlane(vector, [mx, my, mz], [-1, 0, 0]);\n  if (s >= 0 && dx > 0 && s < h && between(s * dy, my, my + mhy) && between(s * dz, mz, mz + mhz)) {\n    h = s;\n    nx = -1;\n    ny = 0;\n    nz = 0;\n  }\n  s = lineToPlane(vector, [mx + mhx, my, mz], [1, 0, 0]);\n  if (s >= 0 && dx < 0 && s < h && between(s * dy, my, my + mhy) && between(s * dz, mz, mz + mhz)) {\n    h = s;\n    nx = 1;\n    ny = 0;\n    nz = 0;\n  }\n  s = lineToPlane(vector, [mx, my, mz], [0, -1, 0]);\n  if (s >= 0 && dy > 0 && s < h && between(s * dx, mx, mx + mhx) && between(s * dz, mz, mz + mhz)) {\n    h = s;\n    nx = 0;\n    ny = -1;\n    nz = 0;\n  }\n  s = lineToPlane(vector, [mx, my + mhy, mz], [0, 1, 0]);\n  if (s >= 0 && dy < 0 && s < h && between(s * dx, mx, mx + mhx) && between(s * dz, mz, mz + mhz)) {\n    h = s;\n    nx = 0;\n    ny = 1;\n    nz = 0;\n  }\n  s = lineToPlane(vector, [mx, my, mz], [0, 0, -1]);\n  if (s >= 0 && dz > 0 && s < h && between(s * dx, mx, mx + mhx) && between(s * dy, my, my + mhy)) {\n    h = s;\n    nx = 0;\n    ny = 0;\n    nz = -1;\n  }\n  s = lineToPlane(vector, [mx, my, mz + mhz], [0, 0, 1]);\n  if (s >= 0 && dz < 0 && s < h && between(s * dx, mx, mx + mhx) && between(s * dy, my, my + mhy)) {\n    h = s;\n    nx = 0;\n    ny = 0;\n    nz = 1;\n  }\n  return {\n    h,\n    nx,\n    ny,\n    nz\n  };\n}\nfunction sweep(getVoxels, box, velocity, callback, translate = true, maxIterations = 100) {\n  if (maxIterations <= 0)\n    return;\n  const [vx, vy, vz] = velocity;\n  const mag = Math.sqrt(vx * vx + vy * vy + vz * vz);\n  const minX = Math.floor(vx > 0 ? box.minX : box.minX + vx) - 1;\n  const minY = Math.floor(vy > 0 ? box.minY : box.minY + vy) - 1;\n  const minZ = Math.floor(vz > 0 ? box.minZ : box.minZ + vz) - 1;\n  const maxX = Math.floor(vx > 0 ? box.maxX + vx : box.maxX) + 1;\n  const maxY = Math.floor(vy > 0 ? box.maxY + vy : box.maxY) + 1;\n  const maxZ = Math.floor(vz > 0 ? box.maxZ + vz : box.maxZ) + 1;\n  let voxel = [];\n  let closest = { h: 1, nx: 0, ny: 0, nz: 0 };\n  for (let vx2 = minX; vx2 <= maxX; vx2++) {\n    for (let vz2 = minZ; vz2 <= maxZ; vz2++) {\n      for (let vy2 = minY; vy2 <= maxY; vy2++) {\n        const AABBs = getVoxels(vx2, vy2, vz2);\n        for (const aabb of AABBs) {\n          const collision = sweepAABB(box, aabb, velocity);\n          if (collision.h < closest.h) {\n            closest = collision;\n            voxel = [vx2, vy2, vz2];\n          }\n        }\n      }\n    }\n  }\n  const dx = closest.h * vx + Engine.EPSILON * closest.nx;\n  const dy = closest.h * vy + Engine.EPSILON * closest.ny;\n  const dz = closest.h * vz + Engine.EPSILON * closest.nz;\n  if (translate) {\n    box.translate([dx, dy, dz]);\n  }\n  if (closest.h === 1)\n    return;\n  const axis = closest.nx !== 0 ? 0 : closest.ny !== 0 ? 1 : 2;\n  const dir = -(closest.nx + closest.ny + closest.nz);\n  const leftover = [\n    (1 - closest.h) * vx,\n    (1 - closest.h) * vy,\n    (1 - closest.h) * vz\n  ];\n  if (dir !== 0 && callback(mag * closest.h, axis, dir, leftover, voxel)) {\n    return;\n  }\n  if (leftover[0] ** 2 + leftover[1] ** 2 + leftover[2] ** 2 != 0) {\n    sweep(getVoxels, box, leftover, callback, translate, maxIterations - 1);\n  }\n}\n\n// src/index.ts\nfunction approxEquals(a, b) {\n  return Math.abs(a - b) < 1e-5;\n}\nvar _Engine = class {\n  constructor(getVoxel, testFluid, options) {\n    this.getVoxel = getVoxel;\n    this.testFluid = testFluid;\n    this.options = options;\n    this.bodies = [];\n    this.addBody = (options) => {\n      const defaultOptions = {\n        aabb: new AABB(0, 0, 0, 1, 1, 1),\n        mass: 1,\n        friction: 1,\n        restitution: 0,\n        gravityMultiplier: 1,\n        stepHeight: 0\n      };\n      const {\n        aabb,\n        mass,\n        friction,\n        restitution,\n        gravityMultiplier,\n        stepHeight,\n        onStep,\n        onCollide\n      } = {\n        ...defaultOptions,\n        ...options\n      };\n      const b = new RigidBody(\n        aabb,\n        mass,\n        friction,\n        restitution,\n        gravityMultiplier,\n        stepHeight,\n        onStep,\n        onCollide\n      );\n      this.bodies.push(b);\n      return b;\n    };\n    this.removeBody = (body) => {\n      const i = this.bodies.indexOf(body);\n      if (i < 0)\n        return void 0;\n      this.bodies.splice(i, 1);\n    };\n    this.update = (dt) => {\n      const noGravity = approxEquals(\n        0,\n        this.options.gravity[0] ** 2 + this.options.gravity[1] ** 2 + this.options.gravity[2] ** 2\n      );\n      this.bodies.forEach((b) => this.iterateBody(b, dt, noGravity));\n    };\n    this.iterateBody = (body, dt, noGravity) => {\n      const oldResting = [...body.resting];\n      if (body.mass <= 0) {\n        body.velocity = [0, 0, 0];\n        body.forces = [0, 0, 0];\n        body.impulses = [0, 0, 0];\n        return;\n      }\n      const localNoGrav = noGravity || body.gravityMultiplier === 0;\n      if (this.isBodyAsleep(body, dt, localNoGrav))\n        return;\n      body.sleepFrameCount--;\n      this.applyFluidForces(body);\n      const a = [\n        body.forces[0] / body.mass + this.options.gravity[0] * body.gravityMultiplier,\n        body.forces[1] / body.mass + this.options.gravity[1] * body.gravityMultiplier,\n        body.forces[2] / body.mass + this.options.gravity[2] * body.gravityMultiplier\n      ];\n      const dv = [\n        body.impulses[0] / body.mass + a[0] * dt,\n        body.impulses[1] / body.mass + a[1] * dt,\n        body.impulses[2] / body.mass + a[2] * dt\n      ];\n      body.velocity = [\n        body.velocity[0] + dv[0],\n        body.velocity[1] + dv[1],\n        body.velocity[2] + dv[2]\n      ];\n      if (body.friction) {\n        this.applyFrictionByAxis(0, body, dv);\n        this.applyFrictionByAxis(1, body, dv);\n        this.applyFrictionByAxis(2, body, dv);\n      }\n      let drag = body.airDrag >= 0 ? body.airDrag : this.options.airDrag;\n      if (body.inFluid) {\n        drag = body.fluidDrag >= 0 ? body.fluidDrag : this.options.fluidDrag;\n        drag *= 1 - (1 - body.ratioInFluid) ** 2;\n      }\n      const mult = Math.max(1 - drag * dt / body.mass, 0);\n      body.velocity = [\n        body.velocity[0] * mult,\n        body.velocity[1] * mult,\n        body.velocity[2] * mult\n      ];\n      const dx = [\n        body.velocity[0] * dt,\n        body.velocity[1] * dt,\n        body.velocity[2] * dt\n      ];\n      body.forces = [0, 0, 0];\n      body.impulses = [0, 0, 0];\n      const tmpBox = body.aabb.clone();\n      this.processCollisions(body.aabb, dx, body.resting);\n      if (body.stepHeight > 0) {\n        this.tryAutoStepping(body, tmpBox, dx);\n      }\n      const impacts = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        if (body.resting[i]) {\n          if (!oldResting[i])\n            impacts[i] = -body.velocity[i];\n          body.velocity[i] = 0;\n        }\n      }\n      const mag = Math.sqrt(impacts[0] ** 2 + impacts[1] ** 2 + impacts[2] ** 2);\n      if (mag > 1e-3) {\n        impacts[0] = impacts[0] * body.mass;\n        impacts[1] = impacts[1] * body.mass;\n        impacts[2] = impacts[2] * body.mass;\n        if (body.onCollide)\n          body.onCollide(impacts);\n        if (body.restitution > 0 && mag > this.options.minBounceImpulse) {\n          impacts[0] = impacts[0] * body.restitution;\n          impacts[1] = impacts[1] * body.restitution;\n          impacts[2] = impacts[2] * body.restitution;\n          body.applyImpulse(impacts);\n        }\n      }\n      const vsq = body.velocity[0] ** 2 + body.velocity[1] ** 2 + body.velocity[2] ** 2;\n      if (vsq > 1e-5)\n        body.markActive();\n    };\n    this.applyFluidForces = (body) => {\n      const box = body.aabb;\n      const cx = Math.floor(box.minX);\n      const cz = Math.floor(box.minZ);\n      const y0 = Math.floor(box.minY);\n      const y1 = Math.floor(box.maxY);\n      if (!this.testFluid(cx, y0, cz)) {\n        body.inFluid = false;\n        body.ratioInFluid = 0;\n        return;\n      }\n      let submerged = 1;\n      let cy = y0 + 1;\n      while (cy <= y1 && this.testFluid(cx, cy, cz)) {\n        submerged++;\n        cy++;\n      }\n      const fluidLevel = y0 + submerged;\n      const heightInFluid = fluidLevel - box.minY;\n      let ratioInFluid = heightInFluid / (box.maxY - box.minY);\n      if (ratioInFluid > 1)\n        ratioInFluid = 1;\n      const vol = (box.maxX - box.minX) * (box.maxY - box.minY) * (box.maxZ - box.minZ);\n      const displaced = vol * ratioInFluid;\n      const scale = -this.options.fluidDensity * displaced;\n      const f = [\n        this.options.gravity[0] * scale,\n        this.options.gravity[1] * scale,\n        this.options.gravity[2] * scale\n      ];\n      body.applyForce(f);\n      body.inFluid = true;\n      body.ratioInFluid = ratioInFluid;\n    };\n    this.applyFrictionByAxis = (axis, body, dvel) => {\n      const restDir = body.resting[axis];\n      const vNormal = dvel[axis];\n      if (restDir === 0)\n        return;\n      if (restDir * vNormal <= 0)\n        return;\n      const lateralVel = [...body.velocity];\n      lateralVel[axis] = 0;\n      const vCurr = Math.sqrt(\n        lateralVel[0] ** 2 + lateralVel[1] ** 2 + lateralVel[2] ** 2\n      );\n      if (approxEquals(vCurr, 0))\n        return;\n      const dvMax = Math.abs(body.friction * vNormal);\n      const scalar = vCurr > dvMax ? (vCurr - dvMax) / vCurr : 0;\n      body.velocity[(axis + 1) % 3] *= scalar;\n      body.velocity[(axis + 2) % 3] *= scalar;\n    };\n    this.processCollisions = (box, velocity, resting) => {\n      resting[0] = 0;\n      resting[1] = 0;\n      resting[2] = 0;\n      sweep(\n        this.getVoxel,\n        box,\n        velocity,\n        function(_, axis, dir, vec) {\n          resting[axis] = dir;\n          vec[axis] = 0;\n          return false;\n        }\n      );\n    };\n    this.tryAutoStepping = (body, oldBox, dx) => {\n      if (body.resting[1] >= 0 && !body.inFluid)\n        return;\n      const xBlocked = body.resting[0] !== 0;\n      const zBlocked = body.resting[2] !== 0;\n      if (!(xBlocked || zBlocked))\n        return;\n      const targetPos = [\n        oldBox.minX + dx[0],\n        oldBox.minY + dx[1],\n        oldBox.minZ + dx[2]\n      ];\n      let voxel = [];\n      sweep(\n        this.getVoxel,\n        oldBox,\n        dx,\n        function(_, axis, dir, vec, vox) {\n          if (axis === 1) {\n            vec[axis] = 0;\n            return false;\n          } else {\n            voxel = vox || [];\n            return true;\n          }\n        }\n      );\n      const y = body.aabb.minY;\n      let maxStep = 0;\n      if (voxel) {\n        const aabbs = this.getVoxel(voxel[0], voxel[1], voxel[2]);\n        aabbs.forEach((a) => {\n          if (a.maxY > maxStep)\n            maxStep = a.maxY;\n        });\n      }\n      const yDist = Math.floor(y) + maxStep - y + _Engine.EPSILON;\n      const upVec = [0, Math.min(yDist, body.stepHeight + 1e-3), 0];\n      let collided = false;\n      sweep(this.getVoxel, oldBox, upVec, function() {\n        collided = true;\n        return true;\n      });\n      if (collided) {\n        return;\n      }\n      const leftover = [\n        targetPos[0] - oldBox.minX,\n        targetPos[1] - oldBox.minY,\n        targetPos[2] - oldBox.minZ\n      ];\n      leftover[1] = 0;\n      const tmpResting = [0, 0, 0];\n      this.processCollisions(oldBox, leftover, tmpResting);\n      if (xBlocked && !approxEquals(oldBox.minX, targetPos[0]))\n        return;\n      if (zBlocked && !approxEquals(oldBox.minZ, targetPos[2]))\n        return;\n      const temp = oldBox.clone();\n      sweep(this.getVoxel, temp, [0, -yDist, 0], (dist) => {\n        if (dist > _Engine.EPSILON)\n          oldBox.translate([0, -dist + _Engine.EPSILON, 0]);\n        return true;\n      });\n      body.resting[0] = tmpResting[0];\n      body.resting[2] = tmpResting[2];\n      if (body.onStep)\n        body.onStep(oldBox, tmpResting);\n      else\n        body.aabb = oldBox.clone();\n    };\n    this.isBodyAsleep = (body, dt, noGravity) => {\n      if (body.sleepFrameCount > 0)\n        return false;\n      if (noGravity)\n        return true;\n      let isResting = false;\n      const gMult = 0.5 * dt * dt * body.gravityMultiplier;\n      const sleepVec = [\n        this.options.gravity[0] * gMult,\n        this.options.gravity[1] * gMult,\n        this.options.gravity[2] * gMult\n      ];\n      sweep(\n        this.getVoxel,\n        body.aabb,\n        sleepVec,\n        function() {\n          isResting = true;\n          return true;\n        },\n        false\n      );\n      return isResting;\n    };\n    this.teleport = (body, position, duration) => {\n      const frames = 1e3;\n      const old = body.getPosition();\n      const dx = (position[0] - old[0]) / frames;\n      const dy = (position[1] - old[1]) / frames;\n      const dz = (position[2] - old[2]) / frames;\n      setInterval(() => {\n        body.aabb.translate([dx, dy, dz]);\n      }, duration / frames);\n    };\n  }\n};\nvar Engine = _Engine;\nEngine.EPSILON = 1e-10;\nexport {\n  Engine,\n  RigidBody,\n  sweep\n};\n","// src/index.ts\nfunction raycastAABB(origin, normal, aabb, maxDistance = Infinity) {\n  const [nx, ny, nz] = normal;\n  const t1 = (aabb.minX - origin[0]) / nx;\n  const t2 = (aabb.maxX - origin[0]) / nx;\n  const t3 = (aabb.minY - origin[1]) / ny;\n  const t4 = (aabb.maxY - origin[1]) / ny;\n  const t5 = (aabb.minZ - origin[2]) / nz;\n  const t6 = (aabb.maxZ - origin[2]) / nz;\n  const tMin = Math.max(\n    Math.max(Math.min(t1, t2), Math.min(t3, t4)),\n    Math.min(t5, t6)\n  );\n  const tMinAxis = tMin === t1 || tMin === t2 ? 0 : tMin === t3 || tMin === t4 ? 1 : 2;\n  const tMax = Math.min(\n    Math.min(Math.max(t1, t2), Math.max(t3, t4)),\n    Math.max(t5, t6)\n  );\n  const tMaxAxis = tMin === t1 || tMin === t2 ? 0 : tMin === t3 || tMin === t4 ? 1 : 2;\n  if (tMax < 0) {\n    return null;\n  }\n  if (tMin > tMax) {\n    return null;\n  }\n  if (tMin < 0) {\n    if (tMax > maxDistance) {\n      return null;\n    }\n    return {\n      axis: tMaxAxis,\n      distance: tMax\n    };\n  }\n  if (tMin > maxDistance) {\n    return null;\n  }\n  return {\n    axis: tMinAxis,\n    distance: tMin\n  };\n}\nfunction raycast(getVoxel, origin, direction, maxDistance) {\n  let dx = +direction[0];\n  let dy = +direction[1];\n  let dz = +direction[2];\n  const ds = Math.sqrt(dx * dx + dy * dy + dz * dz);\n  if (ds === 0) {\n    throw new Error(\"Can't raycast along a zero vector\");\n  }\n  dx /= ds;\n  dy /= ds;\n  dz /= ds;\n  const [ox, oy, oz] = origin;\n  let t = 0;\n  let ix = Math.floor(ox) | 0;\n  let iy = Math.floor(oy) | 0;\n  let iz = Math.floor(oz) | 0;\n  const stepX = dx > 0 ? 1 : -1;\n  const stepY = dy > 0 ? 1 : -1;\n  const stepZ = dz > 0 ? 1 : -1;\n  const txDelta = Math.abs(1 / dx);\n  const tyDelta = Math.abs(1 / dy);\n  const tzDelta = Math.abs(1 / dz);\n  const xDist = stepX > 0 ? ix + 1 - ox : ox - ix;\n  const yDist = stepY > 0 ? iy + 1 - oy : oy - iy;\n  const zDist = stepZ > 0 ? iz + 1 - oz : oz - iz;\n  let txMax = txDelta < Infinity ? txDelta * xDist : Infinity;\n  let tyMax = tyDelta < Infinity ? tyDelta * yDist : Infinity;\n  let tzMax = tzDelta < Infinity ? tzDelta * zDist : Infinity;\n  while (t <= maxDistance) {\n    const aabbs = getVoxel(ix, iy, iz) || [];\n    let hit;\n    aabbs.forEach((aabb) => {\n      const result = raycastAABB(\n        origin,\n        [dx, dy, dz],\n        aabb.clone().translate([ix, iy, iz]),\n        maxDistance\n      );\n      if (result) {\n        hit = result;\n      }\n    });\n    if (hit) {\n      return {\n        point: [\n          ox + hit.distance * dx,\n          oy + hit.distance * dy,\n          oz + hit.distance * dz\n        ],\n        normal: [\n          hit.axis === 0 ? -stepX : 0,\n          hit.axis === 1 ? -stepY : 0,\n          hit.axis === 2 ? -stepZ : 0\n        ],\n        voxel: [ix, iy, iz]\n      };\n    }\n    if (txMax < tyMax) {\n      if (txMax < tzMax) {\n        ix += stepX;\n        t = txMax;\n        txMax += txDelta;\n      } else {\n        iz += stepZ;\n        t = tzMax;\n        tzMax += tzDelta;\n      }\n    } else {\n      if (tyMax < tzMax) {\n        iy += stepY;\n        t = tyMax;\n        tyMax += tyDelta;\n      } else {\n        iz += stepZ;\n        t = tzMax;\n        tzMax += tzDelta;\n      }\n    }\n  }\n  return null;\n}\nvar src_default = raycast;\nexport {\n  src_default as default,\n  raycast,\n  raycastAABB\n};\n","import { ChunkProtocol } from \"@voxelize/transport/src/types\";\nimport ndarray, { NdArray } from \"ndarray\";\n\nimport { Coords2, Coords3 } from \"../../types\";\nimport { BlockUtils } from \"../../utils/block-utils\";\nimport { ChunkUtils } from \"../../utils/chunk-utils\";\nimport { LightColor, LightUtils } from \"../../utils/light-utils\";\n\nimport { BlockRotation } from \"./block\";\n\nexport type RawChunkOptions = {\n  size: number;\n  maxHeight: number;\n  maxLightLevel: number;\n  subChunks: number;\n};\n\nexport class RawChunk {\n  public options: RawChunkOptions;\n\n  public id: string;\n\n  public name: string;\n\n  public coords: Coords2;\n\n  public min: Coords3;\n\n  public max: Coords3;\n\n  public voxels: NdArray<Uint32Array>;\n\n  public lights: NdArray<Uint32Array>;\n\n  constructor(id: string, coords: Coords2, options: RawChunkOptions) {\n    this.id = id;\n    this.name = ChunkUtils.getChunkName(coords);\n\n    this.coords = coords;\n    this.options = options;\n\n    const { size, maxHeight } = options;\n\n    this.voxels = ndarray([] as any, [size, maxHeight, size]);\n    this.lights = ndarray([] as any, [size, maxHeight, size]);\n\n    const [x, z] = coords;\n\n    this.min = [x * size, 0, z * size];\n    this.max = [(x + 1) * size, maxHeight, (z + 1) * size];\n  }\n\n  serialize(): [object, ArrayBuffer[]] {\n    return [\n      {\n        id: this.id,\n        x: this.coords[0],\n        z: this.coords[1],\n        voxels: this.voxels.data.buffer,\n        lights: this.lights.data.buffer,\n        options: this.options,\n      },\n      [this.voxels.data.buffer.slice(0), this.lights.data.buffer.slice(0)],\n    ];\n  }\n\n  static deserialize(data: any): RawChunk {\n    const { id, x, z, voxels, lights, options } = data;\n\n    const chunk = new RawChunk(id, [x, z], options);\n\n    // creating typed array here ain't bad since deserialize is only used worker-side\n    if (lights && lights.byteLength)\n      chunk.lights.data = new Uint32Array(lights);\n    if (voxels && voxels.byteLength)\n      chunk.voxels.data = new Uint32Array(voxels);\n\n    return chunk;\n  }\n\n  setData(data: ChunkProtocol) {\n    const { id, x, z } = data;\n\n    if (this.id !== id) {\n      throw new Error(\"Chunk id mismatch\");\n    }\n\n    if (this.coords[0] !== x || this.coords[1] !== z) {\n      throw new Error(\"Chunk coords mismatch\");\n    }\n\n    const { voxels, lights } = data;\n\n    if (lights && lights.byteLength) this.lights.data = new Uint32Array(lights);\n    if (voxels && voxels.byteLength) this.voxels.data = new Uint32Array(voxels);\n  }\n\n  /**\n   * Get the raw voxel value at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @returns The raw voxel value at the given voxel coordinate. If the voxel is not within\n   * the chunk, this method returns `0`.\n   */\n  getRawValue(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.voxels.get(lx, ly, lz);\n  }\n\n  /**\n   * Set the raw voxel value at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @param value The raw voxel value to set at the given voxel coordinate.\n   * @returns The raw voxel value at the given voxel coordinate.\n   */\n  setRawValue(vx: number, vy: number, vz: number, val: number) {\n    if (!this.contains(vx, vy, vz)) return 0;\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.voxels.set(lx, ly, lz, val);\n  }\n\n  /**\n   * Get the raw light value at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @returns The raw light value at the given voxel coordinate.\n   */\n  getRawLight(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) return 0;\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.lights.get(lx, ly, lz);\n  }\n\n  /**\n   * Set the raw light value at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @param level The raw light level to set at the given voxel coordinate.\n   * @returns The raw light level at the given voxel coordinate.\n   */\n  setRawLight(vx: number, vy: number, vz: number, level: number) {\n    if (!this.contains(vx, vy, vz)) return 0;\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.lights.set(lx, ly, lz, level);\n  }\n\n  /**\n   * Get the voxel type ID at a given voxel or world coordinate.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @returns The voxel type ID at the given voxel coordinate.\n   */\n  getVoxel(vx: number, vy: number, vz: number) {\n    return BlockUtils.extractID(this.getRawValue(vx | 0, vy | 0, vz | 0));\n  }\n\n  /**\n   * Set the voxel type ID at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @param id The voxel type ID to set at the given voxel coordinate.\n   * @returns The voxel type ID at the given voxel coordinate.\n   */\n  setVoxel(vx: number, vy: number, vz: number, id: number) {\n    const value = BlockUtils.insertID(0, id);\n    this.setRawValue(vx, vy, vz, value);\n    return id;\n  }\n\n  /**\n   * Get the voxel rotation at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @returns The voxel rotation at the given voxel coordinate.\n   */\n  getVoxelRotation(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) return new BlockRotation();\n    return BlockUtils.extractRotation(this.getRawValue(vx, vy, vz));\n  }\n\n  /**\n   * Set the voxel rotation at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @param rotation The voxel rotation to set at the given voxel coordinate.\n   */\n  setVoxelRotation(\n    vx: number,\n    vy: number,\n    vz: number,\n    rotation: BlockRotation\n  ) {\n    const value = BlockUtils.insertRotation(\n      this.getRawValue(vx, vy, vz),\n      rotation\n    );\n    this.setRawValue(vx, vy, vz, value);\n  }\n\n  /**\n   * Get the voxel stage at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @returns The voxel stage at the given voxel coordinate.\n   */\n  getVoxelStage(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) return 0;\n    return BlockUtils.extractStage(this.getRawValue(vx, vy, vz));\n  }\n\n  /**\n   * Set the voxel stage at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @param stage The voxel stage to set at the given voxel coordinate.\n   * @returns The voxel stage at the given voxel coordinate.\n   */\n  setVoxelStage(vx: number, vy: number, vz: number, stage: number) {\n    const value = BlockUtils.insertStage(this.getRawValue(vx, vy, vz), stage);\n    this.setRawValue(vx, vy, vz, value);\n    return stage;\n  }\n\n  /**\n   * Get the red light level at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate.\n   * @param vy The y voxel coordinate.\n   * @param vz The z voxel coordinate.\n   * @returns The red light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  getRedLight(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.getLocalRedLight(lx, ly, lz);\n  }\n\n  /**\n   * Set the red light level at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @param level The red light level to set at the given voxel coordinate.\n   * @returns The red light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  setRedLight(vx: number, vy: number, vz: number, level: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.setLocalRedLight(lx, ly, lz, level);\n  }\n\n  /**\n   * Get the green light level at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @returns The green light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  getGreenLight(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.getLocalGreenLight(lx, ly, lz);\n  }\n\n  /**\n   * Set the green light level at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @param level The green light level to set at the given voxel coordinate.\n   * @returns The green light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  setGreenLight(vx: number, vy: number, vz: number, level: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.setLocalGreenLight(lx, ly, lz, level);\n  }\n\n  /**\n   * Get the blue light level at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @returns The blue light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  getBlueLight(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.getLocalBlueLight(lx, ly, lz);\n  }\n\n  /**\n   * Set the blue light level at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @param level The blue light level to set at the given voxel coordinate.\n   * @returns The blue light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  setBlueLight(vx: number, vy: number, vz: number, level: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.setLocalBlueLight(lx, ly, lz, level);\n  }\n\n  /**\n   * Get the colored torch light level at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @param color The color of the light to get at the given voxel coordinate.\n   * @returns The light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  getTorchLight(vx: number, vy: number, vz: number, color: LightColor) {\n    switch (color) {\n      case \"RED\":\n        return this.getRedLight(vx, vy, vz);\n      case \"GREEN\":\n        return this.getGreenLight(vx, vy, vz);\n      case \"BLUE\":\n        return this.getBlueLight(vx, vy, vz);\n      default:\n        throw new Error(\"Received unknown light color...\");\n    }\n  }\n\n  /**\n   * Set the colored torch light level at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @param level The light level to set at the given voxel coordinate.\n   * @param color The color of the light to set at the given voxel coordinate.\n   * @returns The light level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  setTorchLight(\n    vx: number,\n    vy: number,\n    vz: number,\n    level: number,\n    color: LightColor\n  ) {\n    switch (color) {\n      case \"RED\":\n        return this.setRedLight(vx, vy, vz, level);\n      case \"GREEN\":\n        return this.setGreenLight(vx, vy, vz, level);\n      case \"BLUE\":\n        return this.setBlueLight(vx, vy, vz, level);\n      default:\n        throw new Error(\"Received unknown light color...\");\n    }\n  }\n\n  /**\n   * Get the sunlight level at a given voxel coordinate.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @returns The sunlight level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  getSunlight(vx: number, vy: number, vz: number) {\n    if (!this.contains(vx, vy, vz)) {\n      if (vy < 0) {\n        return 0;\n      }\n      return this.options.maxLightLevel;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.getLocalSunlight(lx, ly, lz);\n  }\n\n  /**\n   * Set the sunlight level at a given voxel coordinate.\n   *\n   * Note: This method is purely client-side and does not affect the actual values on the server.\n   *\n   * @param vx The x voxel coordinate\n   * @param vy The y voxel coordinate\n   * @param vz The z voxel coordinate\n   * @param level The sunlight level to set at the given voxel coordinate.\n   * @returns The sunlight level at the given voxel coordinate. If the voxel coordinate is out of bounds, returns 0.\n   */\n  setSunlight(vx: number, vy: number, vz: number, level: number) {\n    if (!this.contains(vx, vy, vz)) {\n      return 0;\n    }\n\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n    return this.setLocalSunlight(lx, ly, lz, level);\n  }\n\n  /**\n   * Whether or not is this chunk ready to be rendered and seen in the world.\n   */\n  get isReady() {\n    return this.lights.data.length !== 0 && this.voxels.data.length !== 0;\n  }\n\n  private getLocalRedLight(lx: number, ly: number, lz: number) {\n    return LightUtils.extractRedLight(this.lights.get(lx, ly, lz));\n  }\n\n  private setLocalRedLight(lx: number, ly: number, lz: number, level: number) {\n    return this.lights.set(\n      lx,\n      ly,\n      lz,\n      LightUtils.insertRedLight(this.lights.get(lx, ly, lz), level)\n    );\n  }\n\n  private getLocalGreenLight(lx: number, ly: number, lz: number) {\n    return LightUtils.extractGreenLight(this.lights.get(lx, ly, lz));\n  }\n\n  private setLocalGreenLight(\n    lx: number,\n    ly: number,\n    lz: number,\n    level: number\n  ) {\n    return this.lights.set(\n      lx,\n      ly,\n      lz,\n      LightUtils.insertGreenLight(this.lights.get(lx, ly, lz), level)\n    );\n  }\n\n  private getLocalBlueLight(lx: number, ly: number, lz: number) {\n    return LightUtils.extractBlueLight(this.lights.get(lx, ly, lz));\n  }\n\n  private setLocalBlueLight(lx: number, ly: number, lz: number, level: number) {\n    return this.lights.set(\n      lx,\n      ly,\n      lz,\n      LightUtils.insertBlueLight(this.lights.get(lx, ly, lz), level)\n    );\n  }\n\n  private getLocalSunlight(lx: number, ly: number, lz: number) {\n    return LightUtils.extractSunlight(this.lights.get(lx, ly, lz));\n  }\n\n  private setLocalSunlight(lx: number, ly: number, lz: number, level: number) {\n    return this.lights.set(\n      lx,\n      ly,\n      lz,\n      LightUtils.insertSunlight(this.lights.get(lx, ly, lz), level)\n    );\n  }\n\n  private toLocal(vx: number, vy: number, vz: number) {\n    const [mx, my, mz] = this.min;\n    return [(vx | 0) - mx, (vy | 0) - my, (vz | 0) - mz];\n  }\n\n  private contains(vx: number, vy: number, vz: number) {\n    const { size, maxHeight } = this.options;\n    const [lx, ly, lz] = this.toLocal(vx, vy, vz);\n\n    return lx < size && ly >= 0 && ly < maxHeight && lz >= 0 && lz < size;\n  }\n}\n","import { ChunkProtocol } from \"@voxelize/transport/src/types\";\nimport { Group, Mesh } from \"three\";\n\nimport { Coords2 } from \"../../types\";\n\nimport { RawChunk, RawChunkOptions } from \"./raw-chunk\";\n\nexport class Chunk extends RawChunk {\n  public meshes = new Map<number, Mesh[]>();\n\n  public added = false;\n  public isDirty = false;\n\n  public group = new Group();\n\n  constructor(id: string, coords: Coords2, options: RawChunkOptions) {\n    super(id, coords, options);\n  }\n\n  setData(data: ChunkProtocol) {\n    const { id, x, z } = data;\n\n    if (this.id !== id) {\n      throw new Error(\"Chunk id mismatch\");\n    }\n\n    if (this.coords[0] !== x || this.coords[1] !== z) {\n      throw new Error(\"Chunk coords mismatch\");\n    }\n\n    const { voxels, lights } = data;\n\n    if (lights && lights.byteLength) this.lights.data = lights;\n    if (voxels && voxels.byteLength) this.voxels.data = voxels;\n  }\n\n  dispose() {\n    this.meshes.forEach((mesh) => {\n      mesh.forEach((subMesh) => {\n        if (!subMesh) return;\n\n        subMesh.geometry?.dispose();\n\n        if (subMesh.parent) {\n          subMesh.parent.remove(subMesh);\n        }\n      });\n    });\n  }\n}\n","import { ChunkProtocol } from \"@voxelize/transport/src/types\";\nimport { Color, Vector4 } from \"three\";\nimport { Coords2 } from \"types\";\n\nimport { Chunk } from \"./chunk\";\n\nimport {\n  BlockUpdate,\n  BlockUpdateWithSource,\n  CustomChunkShaderMaterial,\n} from \".\";\n\nexport class Chunks {\n  /**\n   * A map of all block faces to their corresponding ThreeJS shader materials. This also holds their corresponding textures.\n   */\n  public materials: Map<string, CustomChunkShaderMaterial> = new Map();\n\n  /**\n   * The WebGL uniforms that are used in the chunk shader.\n   */\n  public uniforms: {\n    /**\n     * The fog color that is applied onto afar chunks. It is recommended to set this to the\n     * middle color of the sky. Defaults to a new THREE.JS white color instance.\n     */\n    fogColor: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: Color;\n    };\n    /**\n     * The near distance of the fog. Defaults to `100` units.\n     */\n    fogNear: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: number;\n    };\n    /**\n     * The far distance of the fog. Defaults to `200` units.\n     */\n    fogFar: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: number;\n    };\n    /**\n     * The ambient occlusion levels that are applied onto the chunk meshes. Check out [this article](https://0fps.net/2013/07/03/ambient-occlusion-for-minecraft-like-worlds/)\n     * for more information on ambient occlusion for voxel worlds. Defaults to `new Vector4(100.0, 170.0, 210.0, 255.0)`.\n     */\n    ao: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: Vector4;\n    };\n    /**\n     * The minimum brightness of the world at light level `0`. Defaults to `0.2`.\n     */\n    minLightLevel: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: number;\n    };\n    /**\n     * The sunlight intensity of the world. Changing this to `0` would effectively simulate night time\n     * in Voxelize. Defaults to `1.0`.\n     */\n    sunlightIntensity: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: number;\n    };\n    /**\n     * The time constant `performance.now()` that is used to animate the world. Defaults to `performance.now()`.\n     */\n    time: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: number;\n    };\n    /**\n     * The intensity of the sunlight. Defaults to `1.0`.\n     */\n    lightIntensityAdjustment: {\n      /**\n       * The value passed into the chunk shader.\n       */\n      value: number;\n    };\n  } = {\n    fogColor: {\n      value: new Color(\"#B1CCFD\"),\n    },\n    fogNear: {\n      value: 100,\n    },\n    fogFar: {\n      value: 200,\n    },\n    ao: {\n      value: new Vector4(100.0, 170.0, 210.0, 255.0),\n    },\n    minLightLevel: {\n      value: 0,\n    },\n    sunlightIntensity: {\n      value: 1,\n    },\n    time: {\n      value: performance.now(),\n    },\n    lightIntensityAdjustment: {\n      value: 0.8,\n    },\n  };\n\n  public requested: Map<string, number> = new Map();\n\n  public toAdd: Coords2[] = [];\n\n  public toRequest: string[] = [];\n  public toRequestSet: Set<string> = new Set();\n\n  public loaded: Map<string, Chunk> = new Map();\n\n  public toProcess: {\n    source: \"update\" | \"load\";\n    data: ChunkProtocol;\n  }[] = [];\n  public toProcessSet: Set<string> = new Set();\n\n  public toUpdate: BlockUpdateWithSource[] = [];\n\n  public toEmit: BlockUpdate[] = [];\n\n  /**\n   * @hidden\n   */\n  constructor() {\n    // DO NOTHING\n  }\n}\n","// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          \"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error(\"Loop count invalid.\")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error(\"x/y invalid.\")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error(\"Width/Height invalid.\")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error(\"Not enough pixels for the frame size.\");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error(\"Must supply either a local or global palette.\");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                \"Unknown graphic control label: 0x\" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n","import { GifReader } from \"omggif\";\nimport { AudioLoader, LoadingManager, Texture, TextureLoader } from \"three\";\n\n/**\n * An asset loader that can load textures and audio files. This class is used internally by the world\n * and can be accessed via {@link World.loader}.\n *\n * @category Core\n */\nclass Loader {\n  /**\n   * A map of all textures loaded by Voxelize.\n   */\n  public textures = new Map<string, Texture>();\n\n  public images = new Map<string, HTMLImageElement | HTMLImageElement[]>();\n\n  /**\n   * A map of all audios loaded by Voxelize.\n   */\n  public audioBuffers = new Map<string, AudioBuffer>();\n\n  /**\n   * The progress at which Loader has loaded, zero to one.\n   */\n  public progress = 0;\n\n  /**\n   * The internal loading manager used by the loader.\n   */\n  private manager = new LoadingManager();\n\n  /**\n   * The internal texture loader used by the loader.\n   */\n  private textureLoader = new TextureLoader(this.manager);\n\n  /**\n   * The internal audio loader used by the loader.\n   */\n  private audioLoader = new AudioLoader(this.manager);\n\n  /**\n   * A map of promises to load assets.\n   */\n  private assetPromises = new Map<string, Promise<any>>();\n\n  /**\n   * A map of callbacks to load audios.\n   */\n  private audioCallbacks = new Map<string, () => Promise<AudioBuffer>>();\n\n  /**\n   * Construct a Voxelize loader.\n   *\n   * @hidden\n   */\n  constructor() {\n    this.manager.onProgress = (_, loaded, total) => {\n      this.progress = loaded / total;\n    };\n\n    const listenerCallback = () => {\n      this.loadAudios();\n      window.removeEventListener(\"click\", listenerCallback);\n    };\n\n    window.addEventListener(\"click\", listenerCallback);\n  }\n\n  loadGifImages = (\n    source: string,\n    onLoaded?: (images: HTMLImageElement[]) => void\n  ) => {\n    const promise = new Promise<HTMLImageElement[]>((resolve) => {\n      const run = async () => {\n        const response = await fetch(source);\n        const blob = await response.blob();\n        const arrayBuffer = await blob.arrayBuffer();\n        const intArray = new Uint8Array(arrayBuffer);\n\n        const reader = new GifReader(intArray);\n\n        const info = reader.frameInfo(0);\n\n        const images = new Array(reader.numFrames()).fill(0).map((_, k) => {\n          const image = new ImageData(info.width, info.height);\n          reader.decodeAndBlitFrameRGBA(k, image.data as any);\n\n          const canvas = document.createElement(\"canvas\");\n          const ctx = canvas.getContext(\"2d\");\n          canvas.width = image.width;\n          canvas.height = image.height;\n          ctx.putImageData(image, 0, 0);\n\n          const actual = new Image();\n          actual.src = canvas.toDataURL();\n\n          return actual;\n        });\n\n        this.images.set(source, images);\n        this.assetPromises.delete(source);\n\n        onLoaded?.(images);\n\n        resolve(images);\n      };\n\n      run();\n    });\n\n    this.assetPromises.set(source, promise);\n\n    return promise;\n  };\n\n  loadTexture = (source: string, onLoaded?: (texture: Texture) => void) => {\n    const promise = new Promise<Texture>((resolve) => {\n      this.textureLoader.load(source, (texture) => {\n        this.textures.set(source, texture);\n        this.assetPromises.delete(source);\n\n        onLoaded?.(texture);\n\n        resolve(texture);\n      });\n    });\n\n    this.assetPromises.set(source, promise);\n\n    return promise;\n  };\n\n  loadImage = (\n    source: string,\n    onLoaded?: (image: HTMLImageElement) => void\n  ) => {\n    const promise = new Promise<HTMLImageElement>((resolve, reject) => {\n      const image = new Image();\n      image.crossOrigin = \"anonymous\"; // Fix cross origin\n      image.src = source;\n\n      image.onerror = reject;\n      image.onload = () => {\n        this.assetPromises.delete(source);\n\n        onLoaded?.(image);\n\n        resolve(image);\n      };\n    });\n\n    this.assetPromises.set(source, promise);\n\n    return promise;\n  };\n\n  /**\n   * Get a loaded texture by its source.\n   *\n   * @param source The source to the texture file to load from.\n   * @returns A texture instance loaded from the source.\n   */\n  getTexture = (source: string): Texture => {\n    const texture = this.textures.get(source);\n\n    if (Array.isArray(texture)) {\n      throw new Error(\n        \"`getTexture` was called on a gif texture. Use `getGifTexture` instead.\"\n      );\n    }\n\n    return texture;\n  };\n\n  /**\n   * Get a loaded gif texture with this function.\n   *\n   * @param source The source to the texture file loaded from.\n   * @returns A list of textures for each frame of the gif.\n   */\n  getGifTexture = (source: string): Texture[] => {\n    const texture = this.textures.get(source);\n\n    if (!Array.isArray(texture)) {\n      throw new Error(\n        \"`getGifTexture` was called on a non-gif texture. Use `getTexture` instead.\"\n      );\n    }\n\n    return texture;\n  };\n\n  /**\n   * Add an audio file to be loaded from.\n   *\n   * @param source The source to the audio file to load from.\n   * @param onLoaded A callback to run when the audio is loaded.\n   */\n  loadAudioBuffer = (\n    source: string,\n    onLoaded?: (buffer: AudioBuffer) => void\n  ) => {\n    return new Promise<AudioBuffer>((resolveOuter) => {\n      const callback = async () => {\n        return new Promise<AudioBuffer>((resolve) => {\n          this.audioLoader.load(source, (buffer) => {\n            onLoaded?.(buffer);\n\n            resolve(buffer);\n            resolveOuter(buffer);\n          });\n        });\n      };\n\n      this.audioCallbacks.set(source, callback);\n    });\n  };\n\n  /**\n   * Load all assets other than the textures. Called internally by the world.\n   * This can be used to ensure that a function runs after all assets are loaded.\n   *\n   * @example\n   * ```ts\n   * world.loader.load().then(() => {});\n   * ```\n   *\n   * @returns A promise that resolves when all assets are loaded.\n   */\n  load = async () => {\n    await Promise.all(Array.from(this.assetPromises.values()));\n\n    this.assetPromises.clear();\n  };\n\n  /**\n   * Load all audio loader callbacks.\n   */\n  private loadAudios = async () => {\n    for (const [source, callback] of this.audioCallbacks) {\n      const buffer = await callback();\n      this.audioBuffers.set(source, buffer);\n    }\n\n    this.audioCallbacks.clear();\n  };\n}\n\nexport { Loader };\n","import { Block } from \".\";\n\nexport class Registry {\n  public blocksByName: Map<string, Block> = new Map();\n\n  public blocksById: Map<number, Block> = new Map();\n\n  public nameMap: Map<string, number> = new Map();\n\n  public idMap: Map<number, string> = new Map();\n\n  /**\n   * @hidden\n   */\n  constructor() {\n    // DO NOTHING\n  }\n\n  serialize(): object {\n    return JSON.parse(\n      JSON.stringify({\n        blocksByName: Array.from(this.blocksByName.entries()),\n        blocksById: Array.from(this.blocksById.entries()),\n        nameMap: Array.from(this.nameMap.entries()),\n        idMap: Array.from(this.idMap.entries()),\n      })\n    );\n  }\n\n  static deserialize(data: any): Registry {\n    const registry = new Registry();\n    registry.blocksByName = new Map(data.blocksByName);\n    registry.blocksById = new Map(data.blocksById);\n    registry.nameMap = new Map(data.nameMap);\n    registry.idMap = new Map(data.idMap);\n    return registry;\n  }\n}\n","import { ShaderLib } from \"three\";\n\n/**\n * This is the default shaders used for the chunks.\n */\nexport const DEFAULT_CHUNK_SHADERS = {\n  vertex: ShaderLib.basic.vertexShader\n    .replace(\n      \"#include <common>\",\n      `\nattribute int light;\n\nvarying float vAO;\nvarying vec4 vLight;\nvarying vec4 vWorldPosition;\nuniform vec4 uAOTable;\nuniform float uTime;\n\nvec4 unpackLight(int l) {\n  vec4 lightValues = vec4(\n    (l >> 8) & 0xF,\n    (l >> 4) & 0xF,\n    l & 0xF,\n    (l >> 12) & 0xF\n  );\n  return lightValues / 15.0;\n}\n\n#include <common>\n`\n    )\n    .replace(\n      \"#include <color_vertex>\",\n      `\n#include <color_vertex>\n\nint ao = light >> 16;\n\nvAO = uAOTable[ao] / 255.0;\n\nvLight = unpackLight(light & 0xFFFF);\n`\n    )\n    .replace(\n      \"#include <worldpos_vertex>\",\n      `\nvec4 worldPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n  worldPosition = instanceMatrix * worldPosition;\n#endif\nworldPosition = modelMatrix * worldPosition;\nvWorldPosition = worldPosition;\n`\n    ),\n  fragment: ShaderLib.basic.fragmentShader\n    .replace(\n      \"#include <common>\",\n      `\nuniform vec3 uFogColor;\nuniform float uFogNear;\nuniform float uFogFar;\nuniform float uSunlightIntensity;\nuniform float uMinLightLevel;\nuniform float uLightIntensityAdjustment;\nuniform float uTime;\nvarying float vAO;\nvarying vec4 vLight; \nvarying vec4 vWorldPosition;\n\n#include <common>\n`\n    )\n    .replace(\n      \"#include <envmap_fragment>\",\n      `\n#include <envmap_fragment>\n\n// Adjusting light intensity for lighter voxel textures\nfloat scale = 2.0;\nfloat s = clamp(vLight.a * vLight.a * uSunlightIntensity * uLightIntensityAdjustment, uMinLightLevel, 1.0);\ns -= s * exp(-s) * 0.02; // Optimized smoothing with adjusted intensity\n\n// Applying adjusted light intensity\noutgoingLight.rgb *= s + pow(vLight.rgb * uLightIntensityAdjustment, vec3(scale));\noutgoingLight *= vAO;\n`\n    )\n    .replace(\n      \"#include <fog_fragment>\",\n      `\n    vec3 fogOrigin = cameraPosition;\n\n    float depth = sqrt(pow(vWorldPosition.x - fogOrigin.x, 2.0) + pow(vWorldPosition.z - fogOrigin.z, 2.0));\n    float fogFactor = smoothstep(uFogNear, uFogFar, depth);\n\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, uFogColor, fogFactor);\n    `\n    ),\n};\n\nexport const customShaders = {\n  /**\n   * Create a custom shader that sways the chunk with the wind. This shader's swaying is based on the y axis\n   * subtracted by the floored y axis. Therefore, blocks on integer y axis values will not sway.\n   *\n   * @options options The options to pass into the shader.\n   * @options options.speed The speed of the sway.\n   * @options options.amplitude The amplitude of the sway.\n   * @options options.scale The scale that is applied to the final sway.\n   * @options options.rooted Whether or not should the y-value be floored to 0 first.\n   * @options options.yScale The scale that is applied to the y-axis.\n   * @returns Shaders to pass into {@link World.overwriteTransparentMaterial}\n   */\n  sway(\n    options: Partial<{\n      speed: number;\n      amplitude: number;\n      scale: number;\n      rooted: boolean;\n      yScale: number;\n    }> = {}\n  ) {\n    const { speed, amplitude, rooted, scale, yScale } = {\n      speed: 1,\n      amplitude: 0.1,\n      rooted: false,\n      scale: 1,\n      yScale: 1,\n      ...options,\n    };\n\n    return {\n      vertexShader: DEFAULT_CHUNK_SHADERS.vertex\n        .replace(\n          \"#include <common>\",\n          `\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n`\n        )\n        .replace(\n          \"#include <begin_vertex>\",\n          `\nvec3 transformed = vec3(position);\nfloat scale = uTime * 0.00002 * ${speed.toFixed(2)};\ntransformed.x = position.x \n             + ${\n               rooted ? \"(position.y - floor(position.y))\" : \"1.0\"\n             } * ${scale.toFixed(\n            2\n          )} * snoise(vec3(position.x * scale, position.y * scale * ${yScale.toFixed(\n            2\n          )}, position.z * scale)) * 2.0 * ${amplitude.toFixed(2)};\n`\n        ),\n      fragmentShader: DEFAULT_CHUNK_SHADERS.fragment,\n    };\n  },\n};\n","import {\n  CanvasTexture,\n  ClampToEdgeWrapping,\n  Color,\n  NearestFilter,\n  SRGBColorSpace,\n  Texture,\n} from \"three\";\n\nimport { UV } from \"./uv\";\n\n/**\n * A texture atlas is a collection of textures that are packed into a single texture.\n * This is useful for reducing the number of draw calls required to render a scene, since\n * all block textures can be rendered with a single draw call.\n *\n * By default, the texture atlas creates an additional border around each texture to prevent\n * texture bleeding.\n *\n * ![Texture bleeding](/img/docs/texture-bleeding.png)\n *\n * @noInheritDoc\n */\nexport class AtlasTexture extends CanvasTexture {\n  /**\n   * The number of textures per side of the texture atlas\n   */\n  public countPerSide: number;\n\n  /**\n   * Since the texture atlas is a square, the dimension is the length of one side.\n   */\n  public dimension: number;\n\n  /**\n   * The canvas that is used to generate the texture this.\n   */\n  public canvas: HTMLCanvasElement;\n\n  /**\n   * The margin between each block texture in the this.\n   */\n  public atlasMargin = 0;\n\n  /**\n   * The offset of each block's texture to the end of its border.\n   */\n  public atlasOffset = 0;\n\n  /**\n   * The ratio of the texture on the atlas to the original texture.\n   */\n  public atlasRatio = 0;\n\n  /**\n   * The list of block animations that are being used by this texture atlas.\n   */\n  public animations: { animation: FaceAnimation; timer: any }[] = [];\n\n  /**\n   * Create a new texture this.\n   *\n   * @param textureMap A map that points a side name to a texture or color.\n   * @param ranges The ranges on the texture atlas generated by the server.\n   * @param options The options used to create the texture this.\n   * @returns The texture atlas generated.\n   */\n  constructor(\n    countPerSide: number,\n    dimension: number,\n    canvas = document.createElement(\"canvas\")\n  ) {\n    super(canvas);\n\n    this.canvas = canvas;\n\n    this.countPerSide = countPerSide;\n    this.dimension = dimension;\n\n    if (countPerSide === 1) {\n      this.atlasOffset = 0;\n      this.atlasRatio = 1;\n      this.atlasMargin = 0;\n    } else {\n      this.atlasOffset = 1 / (countPerSide * 4);\n\n      this.atlasMargin = 1;\n      this.atlasRatio =\n        (this.atlasMargin / this.atlasOffset / countPerSide -\n          2 * this.atlasMargin) /\n        dimension;\n\n      while (this.atlasRatio !== Math.floor(this.atlasRatio)) {\n        this.atlasRatio *= 2;\n        this.atlasMargin *= 2;\n      }\n    }\n\n    const canvasWidth =\n      (dimension * this.atlasRatio + this.atlasMargin * 2) * countPerSide;\n    const canvasHeight =\n      (dimension * this.atlasRatio + this.atlasMargin * 2) * countPerSide;\n    this.canvas.width = canvasWidth;\n    this.canvas.height = canvasHeight;\n\n    const context = this.canvas.getContext(\"2d\");\n    context.imageSmoothingEnabled = false;\n\n    this.makeCanvasPowerOfTwo(this.canvas);\n    this.wrapS = ClampToEdgeWrapping;\n    this.wrapT = ClampToEdgeWrapping;\n    this.minFilter = NearestFilter;\n    this.magFilter = NearestFilter;\n    this.generateMipmaps = false;\n    this.needsUpdate = true;\n    this.colorSpace = SRGBColorSpace;\n\n    const unknown = AtlasTexture.makeUnknownImage(canvasWidth / countPerSide);\n\n    for (let x = 0; x < countPerSide; x++) {\n      for (let y = 0; y < countPerSide; y++) {\n        context.drawImage(\n          unknown,\n          (x / countPerSide) * canvasWidth,\n          (y / countPerSide) * canvasHeight,\n          canvasWidth / countPerSide,\n          canvasHeight / countPerSide\n        );\n      }\n    }\n  }\n\n  /**\n   * Draw a texture to a range on the texture atlas.\n   *\n   * @param range The range on the texture atlas to draw the texture to.\n   * @param image The texture to draw to the range.\n   */\n  drawImageToRange(\n    range: UV,\n    image:\n      | typeof Image\n      | HTMLImageElement\n      | HTMLCanvasElement\n      | Color\n      | Texture,\n    clearRect = true,\n    opacity = 1.0\n  ) {\n    const { startU, endV } = range;\n\n    const image2 =\n      image instanceof Texture\n        ? image.image\n        : (image as any as HTMLImageElement);\n\n    if (!image2) {\n      return;\n    }\n\n    const context = this.canvas.getContext(\"2d\");\n\n    context.save();\n\n    const canvasWidth = this.canvas.width;\n    const canvasHeight = this.canvas.height;\n\n    context.globalAlpha = opacity;\n\n    if (opacity !== 1) context.globalCompositeOperation = \"lighter\";\n\n    if (clearRect) {\n      context.clearRect(\n        (startU - this.atlasOffset) * canvasWidth,\n        (1 - endV - this.atlasOffset) * canvasHeight,\n        this.dimension * this.atlasRatio + 2 * this.atlasMargin,\n        this.dimension * this.atlasRatio + 2 * this.atlasMargin\n      );\n    }\n\n    if ((image as any as Color).isColor) {\n      context.fillStyle = `#${(image as any).getHexString()}`;\n      context.fillRect(\n        (startU - this.atlasOffset) * canvasWidth,\n        (1 - endV - this.atlasOffset) * canvasHeight,\n        this.dimension * this.atlasRatio + 2 * this.atlasMargin,\n        this.dimension * this.atlasRatio + 2 * this.atlasMargin\n      );\n\n      return;\n    }\n\n    // Draw a background first.\n\n    if (clearRect) {\n      context.drawImage(\n        image2,\n        (startU - this.atlasOffset) * canvasWidth,\n        (1 - endV - this.atlasOffset) * canvasHeight,\n        this.dimension * this.atlasRatio + 2 * this.atlasMargin,\n        this.dimension * this.atlasRatio + 2 * this.atlasMargin\n      );\n\n      // Carve out the middle.\n      context.clearRect(\n        (startU - this.atlasOffset) * canvasWidth + this.atlasMargin,\n        (1 - endV - this.atlasOffset) * canvasHeight + this.atlasMargin,\n        this.dimension * this.atlasRatio,\n        this.dimension * this.atlasRatio\n      );\n    }\n\n    // Draw the actual texture.\n    context.drawImage(\n      image2,\n      (startU - this.atlasOffset) * canvasWidth + this.atlasMargin,\n      (1 - endV - this.atlasOffset) * canvasHeight + this.atlasMargin,\n      this.dimension * this.atlasRatio,\n      this.dimension * this.atlasRatio\n    );\n\n    context.restore();\n\n    this.needsUpdate = true;\n  }\n\n  registerAnimation(\n    range: UV,\n    keyframes: [number, Color | HTMLImageElement][],\n    fadeFrames = 0\n  ) {\n    const animation = new FaceAnimation(range, keyframes, fadeFrames);\n\n    const entry = { animation, timer: null };\n\n    const start = (index = 0) => {\n      const keyframe = animation.keyframes[index];\n\n      this.drawImageToRange(range, keyframe[1], this.countPerSide !== 1);\n\n      entry.timer = setTimeout(() => {\n        clearTimeout(entry.timer);\n\n        const nextIndex = (index + 1) % animation.keyframes.length;\n\n        if (fadeFrames > 0) {\n          const nextKeyframe = animation.keyframes[nextIndex];\n\n          const fade = (fraction = 0) => {\n            if (fraction > fadeFrames) {\n              start(nextIndex);\n              return;\n            }\n\n            requestAnimationFrame(() => fade(fraction + 1));\n\n            this.drawImageToRange(\n              range,\n              nextKeyframe[1],\n              true,\n              fraction / fadeFrames\n            );\n\n            this.drawImageToRange(\n              range,\n              keyframe[1],\n              false,\n              1 - fraction / fadeFrames\n            );\n\n            this.needsUpdate = true;\n          };\n\n          fade();\n        } else {\n          start(nextIndex);\n        }\n\n        this.needsUpdate = true;\n      }, keyframe[0]);\n    };\n\n    this.animations.push(entry);\n\n    start();\n  }\n\n  private makeCanvasPowerOfTwo(canvas?: HTMLCanvasElement | undefined) {\n    let setCanvas = false;\n    if (!canvas) {\n      canvas = this.canvas;\n      setCanvas = true;\n    }\n    const oldWidth = canvas.width;\n    const oldHeight = canvas.height;\n    const newWidth = Math.pow(2, Math.round(Math.log(oldWidth) / Math.log(2)));\n    const newHeight = Math.pow(\n      2,\n      Math.round(Math.log(oldHeight) / Math.log(2))\n    );\n    const newCanvas = document.createElement(\"canvas\");\n    newCanvas.width = newWidth;\n    newCanvas.height = newHeight;\n    newCanvas.getContext(\"2d\")?.drawImage(canvas, 0, 0, newWidth, newHeight);\n    if (setCanvas) {\n      this.canvas = newCanvas;\n    }\n  }\n\n  static makeUnknownImage(\n    dimension: number,\n    color1 = \"#0A2647\",\n    color2 = \"#E1D7C6\"\n  ) {\n    const canvas = document.createElement(\"canvas\") as HTMLCanvasElement;\n    const context = canvas.getContext(\"2d\");\n\n    context.imageSmoothingEnabled = false;\n    context.canvas.width = dimension;\n    context.canvas.height = dimension;\n\n    context.fillStyle = color2;\n    context.fillRect(0, 0, dimension, dimension);\n    context.fillStyle = color1;\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    context.fillText(\"?\", dimension / 2, dimension / 2, dimension);\n\n    return canvas;\n  }\n\n  static makeUnknownTexture(dimension: number) {\n    const texture = new CanvasTexture(AtlasTexture.makeUnknownImage(dimension));\n\n    texture.minFilter = NearestFilter;\n    texture.magFilter = NearestFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.colorSpace = SRGBColorSpace;\n\n    return texture;\n  }\n}\n\n/**\n * The animation data that is used internally in an atlas texture. This holds the data and will be used to draw on the texture atlas.\n */\nexport class FaceAnimation {\n  /**\n   * The range of the texture atlas that this animation uses.\n   */\n  public range: UV;\n\n  /**\n   * The keyframes of the animation. This will be queried and drawn to the\n   * texture atlas.\n   */\n  public keyframes: [number, HTMLImageElement | Color][];\n\n  /**\n   * The fading duration between each keyframe in milliseconds.\n   */\n  public fadeFrames: number;\n\n  /**\n   * Create a new face animation. This holds the data and will be used to draw on the texture atlas.\n   *\n   * @param range The range of the texture atlas that this animation uses.\n   * @param keyframes The keyframes of the animation. This will be queried and drawn to the texture atlas.\n   * @param fadeFrames The fading duration between each keyframe in milliseconds.\n   */\n  constructor(\n    range: UV,\n    keyframes: [number, HTMLImageElement | Color][],\n    fadeFrames = 0\n  ) {\n    if (!range) {\n      throw new Error(\"Texture range is required for FaceAnimation.\");\n    }\n\n    if (keyframes.length <= 1) {\n      throw new Error(\"FaceAnimation must have at least two keyframe.\");\n    }\n\n    this.range = range;\n    this.keyframes = keyframes as any;\n    this.fadeFrames = fadeFrames;\n  }\n}\n","import { AABB } from \"@voxelize/aabb\";\nimport { Engine as PhysicsEngine } from \"@voxelize/physics-engine\";\nimport { raycast } from \"@voxelize/raycast\";\nimport {\n  EntityOperation,\n  EntityProtocol,\n  GeometryProtocol,\n  MeshProtocol,\n  MessageProtocol,\n} from \"@voxelize/transport/src/types\";\nimport { NetIntercept } from \"core/network\";\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Clock,\n  Color,\n  DoubleSide,\n  Float32BufferAttribute,\n  FrontSide,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  MeshStandardMaterial,\n  Scene,\n  ShaderLib,\n  ShaderMaterial,\n  Texture,\n  MathUtils as ThreeMathUtils,\n  Uniform,\n  UniformsUtils,\n  Vector2,\n  Vector3,\n} from \"three\";\nimport MeshWorker from \"web-worker:./workers/mesh-worker.ts\";\n\nimport { WorkerPool } from \"../../libs\";\nimport { setWorkerInterval } from \"../../libs/setWorkerInterval\";\nimport { Coords2, Coords3 } from \"../../types\";\nimport {\n  BLUE_LIGHT,\n  BlockUtils,\n  ChunkUtils,\n  GREEN_LIGHT,\n  LightColor,\n  LightUtils,\n  RED_LIGHT,\n  SUNLIGHT,\n} from \"../../utils\";\n\nimport {\n  Block,\n  BlockDynamicPattern,\n  BlockRotation,\n  BlockUpdate,\n  BlockUpdateWithSource,\n  PY_ROTATION,\n} from \"./block\";\nimport { Chunk } from \"./chunk\";\nimport { Chunks } from \"./chunks\";\nimport { Clouds, CloudsOptions } from \"./clouds\";\nimport { Loader } from \"./loader\";\nimport { Registry } from \"./registry\";\nimport { DEFAULT_CHUNK_SHADERS } from \"./shaders\";\nimport { Sky, SkyOptions } from \"./sky\";\nimport { AtlasTexture } from \"./textures\";\n\nexport * from \"./block\";\nexport * from \"./chunk\";\nexport * from \"./clouds\";\nexport * from \"./loader\";\nexport * from \"./registry\";\nexport * from \"./shaders\";\nexport * from \"./sky\";\nexport * from \"./textures\";\nexport * from \"./uv\";\n\nexport type LightNode = {\n  voxel: Coords3;\n  level: number;\n};\n\nexport type BlockUpdateListener = (args: {\n  oldValue: number;\n  newValue: number;\n  voxel: Coords3;\n}) => void;\n\nexport type BlockEntityUpdateListener<T> = (args: {\n  id: string;\n  voxel: Coords3;\n  operation: EntityOperation;\n  oldValue: T | null;\n  newValue: T | null;\n}) => void;\n\nconst VOXEL_NEIGHBORS = [\n  [1, 0, 0],\n  [-1, 0, 0],\n  [0, 0, 1],\n  [0, 0, -1],\n  [0, 1, 0],\n  [0, -1, 0],\n];\n\n/**\n * Custom shader material for chunks, simply a `ShaderMaterial` from ThreeJS with a map texture. Keep in mind that\n * if you want to change its map, you also have to change its `uniforms.map`.\n */\nexport type CustomChunkShaderMaterial = ShaderMaterial & {\n  /**\n   * The texture that this map runs on.\n   */\n  map: Texture;\n};\n\n/**\n * The client-side options to create a world. These are client-side only and can be customized to specific use.\n */\nexport type WorldClientOptions = {\n  /**\n   * The maximum chunk requests this world can request from the server per world update. Defaults to `12` chunks.\n   */\n  maxChunkRequestsPerUpdate: number;\n\n  /**\n   * The maximum amount of chunks received from the server that can be processed per world update.\n   * By process, it means to be turned into a `Chunk` instance. Defaults to `8` chunks.\n   */\n  maxProcessesPerUpdate: number;\n\n  /**\n   * The maximum voxel updates that can be sent to the server per world update. Defaults to `1000` updates.\n   */\n  maxUpdatesPerUpdate: number;\n\n  maxMeshesPerUpdate: number;\n\n  /**\n   * Whether or not should the world generate ThreeJS meshes. Defaults to `true`.\n   */\n  shouldGenerateChunkMeshes: boolean;\n\n  /**\n   * The minimum light level even when sunlight and torch light levels are at zero. Defaults to `0.04`.\n   */\n  minLightLevel: number;\n\n  /**\n   * The fraction of the day that sunlight starts to appear. Defaults to `0.25`.\n   */\n  sunlightStartTimeFrac: number;\n\n  /**\n   * The fraction of the day that sunlight starts to disappear. Defaults to `0.7`.\n   */\n  sunlightEndTimeFrac: number;\n\n  /**\n   * The fraction of the day that sunlight takes to change from appearing to disappearing\n   * or disappearing to appearing. Defaults to `0.1`.\n   */\n  sunlightChangeSpan: number;\n\n  /**\n   * The interval between each time a chunk is re-requested to the server. Defaults to `300` updates.\n   */\n  chunkRerequestInterval: number;\n\n  /**\n   * The default render radius of the world, in chunks. Change this through `world.renderRadius`. Defaults to `8` chunks.\n   */\n  defaultRenderRadius: number;\n\n  /**\n   * The default dimension to a single unit of a block face texture. If any texture loaded is greater, it will be downscaled to this resolution.\n   * Defaults to `8` pixels.\n   */\n  textureUnitDimension: number;\n\n  /**\n   * The exponent applied to the ratio that chunks are loaded, which would then be used to determine whether an angle to a chunk is worth loading.\n   * Defaults to `8`.\n   */\n  chunkLoadExponent: number;\n\n  /**\n   * The options to create the sky. Defaults to `{}`.\n   */\n  skyOptions: Partial<SkyOptions>;\n\n  /**\n   * The options to create the clouds. Defaults to `{}`.\n   */\n  cloudsOptions: Partial<CloudsOptions>;\n\n  /**\n   * The uniforms to overwrite the default chunk material uniforms. Defaults to `{}`.\n   */\n  chunkUniformsOverwrite: Partial<Chunks[\"uniforms\"]>;\n\n  /**\n   * The threshold to force the server's time to the client's time. Defaults to `0.1`.\n   */\n  timeForceThreshold: number;\n\n  /**\n   * The interval between each time the world requests the server for its stats. Defaults to 500ms.\n   */\n  statsSyncInterval: number;\n\n  maxLightsUpdateTime: number;\n};\n\nconst defaultOptions: WorldClientOptions = {\n  maxChunkRequestsPerUpdate: 16,\n  maxProcessesPerUpdate: 1,\n  maxUpdatesPerUpdate: 64,\n  maxLightsUpdateTime: 5, // ms\n  maxMeshesPerUpdate: 4,\n  shouldGenerateChunkMeshes: true,\n  minLightLevel: 0.04,\n  chunkRerequestInterval: 10000,\n  defaultRenderRadius: 6,\n  textureUnitDimension: 8,\n  chunkLoadExponent: 8,\n  skyOptions: {},\n  cloudsOptions: {},\n  chunkUniformsOverwrite: {},\n  sunlightStartTimeFrac: 0.25,\n  sunlightEndTimeFrac: 0.7,\n  sunlightChangeSpan: 0.15,\n  timeForceThreshold: 0.1,\n  statsSyncInterval: 500,\n};\n\n/**\n * The options defined on the server-side, passed to the client on network joining.\n */\nexport type WorldServerOptions = {\n  /**\n   * The number of sub-chunks that divides a chunk vertically.\n   */\n  subChunks: number;\n\n  /**\n   * The width and depth of a chunk, in blocks.\n   */\n  chunkSize: number;\n\n  /**\n   * The height of a chunk, in blocks.\n   */\n  maxHeight: number;\n\n  /**\n   * The maximum light level that propagates in this world, including sunlight and torch light.\n   */\n  maxLightLevel: number;\n\n  /**\n   * The minimum chunk coordinate of this world, inclusive.\n   */\n  minChunk: [number, number];\n\n  /**\n   * The maximum chunk coordinate of this world, inclusive.\n   */\n  maxChunk: [number, number];\n\n  /**\n   * The gravity of everything physical in this world.\n   */\n  gravity: number[];\n\n  /**\n   * The minimum bouncing impulse of everything physical in this world.\n   */\n  minBounceImpulse: number;\n\n  doesTickTime: boolean;\n\n  /**\n   * The air drag of everything physical.\n   */\n  airDrag: number;\n\n  /**\n   * The fluid drag of everything physical.\n   */\n  fluidDrag: number;\n\n  /**\n   * The density of the fluid in this world.\n   */\n  fluidDensity: number;\n\n  /**\n   * The time per day in seconds.\n   */\n  timePerDay: number;\n};\n\n/**\n * The options to create a world. This consists of {@link WorldClientOptions} and {@link WorldServerOptions}.\n */\nexport type WorldOptions = WorldClientOptions & WorldServerOptions;\n\n/**\n * A Voxelize world handles the chunk loading and rendering, as well as any 3D objects.\n * **This class extends the [ThreeJS `Scene` class](https://threejs.org/docs/#api/en/scenes/Scene).**\n * This means that you can add any ThreeJS objects to the world, and they will be rendered. The world\n * also implements {@link NetIntercept}, which means it intercepts chunk-related packets from the server\n * and constructs chunk meshes from them. You can optionally disable this by setting `shouldGenerateChunkMeshes` to `false`\n * in the options.\n *\n * There are a couple components that are by default created by the world that holds data:\n * - {@link World.registry}: A block registry that handles block textures and block instances.\n * - {@link World.chunks}: A chunk manager that stores all the chunks in the world.\n * - {@link World.physics}: A physics engine that handles voxel AABB physics simulation of client-side physics.\n * - {@link World.loader}: An asset loader that handles loading textures and other assets.\n * - {@link World.sky}: A sky that can render the sky and the sun.\n * - {@link World.clouds}: A clouds that renders the cubical clouds.\n *\n * One thing to keep in mind that there are no specific setters like `setVoxelByVoxel` or `setVoxelRotationByVoxel`.\n * This is because, instead, you should use `updateVoxel` and `updateVoxels` to update voxels.\n *\n * # Example\n * ```ts\n * const world = new VOXELIZE.World();\n *\n * // Update the voxel at `(0, 0, 0)` to a voxel type `12` in the world across the network.\n * world.updateVoxel(0, 0, 0, 12)\n *\n * // Register the interceptor with the network.\n * network.register(world);\n *\n * // Register an image to block sides.\n * world.applyBlockTexture(\"Test\", VOXELIZE.ALL_FACES, \"https://example.com/test.png\");\n *\n * // Update the world every frame.\n * world.update(controls.position);\n * ```\n *\n * ![World](/img/docs/world.png)\n *\n * @category Core\n * @noInheritDoc\n */\nexport class World<T = any> extends Scene implements NetIntercept {\n  /**\n   * The options to create the world.\n   */\n  public options: WorldOptions;\n\n  /**\n   * The block registry that holds all block data, such as texture and block properties.\n   */\n  public registry: Registry;\n\n  /**\n   * An asset loader to load in things like textures, images, GIFs and audio buffers.\n   */\n  public loader: Loader;\n\n  /**\n   * The manager that holds all chunk-related data, such as chunk meshes and voxel data.\n   */\n  public chunks: Chunks;\n\n  /**\n   * The voxel physics engine using `@voxelize/physics-engine`.\n   */\n  public physics: PhysicsEngine;\n\n  /**\n   * The sky that renders the sky and the sun.\n   */\n  public sky: Sky;\n\n  /**\n   * The clouds that renders the cubical clouds.\n   */\n  public clouds: Clouds;\n\n  /**\n   * Whether or not this world is connected to the server and initialized with data from the server.\n   */\n  public isInitialized = false;\n\n  /**\n   * The network packets to be sent to the server.\n   * @hidden\n   */\n  public packets: MessageProtocol[] = [];\n\n  /**\n   * The voxel cache that stores previous values.\n   */\n  private oldBlocks: Map<string, number[]> = new Map();\n\n  /**\n   * The internal clock.\n   */\n  private clock = new Clock();\n\n  /**\n   * A map of initialize listeners on chunks.\n   */\n  private chunkInitializeListeners = new Map<\n    string,\n    ((chunk: Chunk) => void)[]\n  >();\n\n  private blockEntitiesMap: Map<\n    string,\n    {\n      id: string;\n      data: T | null;\n    }\n  > = new Map();\n  private blockEntityUpdateListeners = new Set<BlockEntityUpdateListener<T>>();\n\n  private blockUpdateListeners = new Set<BlockUpdateListener>();\n\n  /**\n   * The JSON data received from the world. Call `initialize` to initialize.\n   */\n  private initialData: any = null;\n  private initialEntities: any = null;\n\n  /**\n   * The internal time in seconds.\n   */\n  private _time = 0;\n\n  /**\n   * The internal render radius in chunks.\n   */\n  private _renderRadius = 0;\n\n  /**\n   * The internal delete radius in chunks.\n   */\n  private _deleteRadius = 0;\n\n  private meshWorkerPool = new WorkerPool(MeshWorker, {\n    maxWorker: navigator.hardwareConcurrency ?? 4,\n  });\n\n  private chunksTracker: [Coords2, number][] = [];\n\n  private isTrackingChunks = false;\n\n  /**\n   * Create a new Voxelize world.\n   *\n   * @param options The options to create the world.\n   */\n  constructor(options: Partial<WorldOptions> = {}) {\n    super();\n\n    // @ts-ignore\n    const { statsSyncInterval } = (this.options = {\n      ...defaultOptions,\n      ...options,\n    });\n\n    this.setupComponents();\n    this.setupUniforms();\n\n    setWorkerInterval(() => {\n      this.packets.push({\n        type: \"METHOD\",\n        method: {\n          name: \"vox-builtin:get-stats\",\n          payload: {},\n        },\n      });\n    }, statsSyncInterval);\n  }\n\n  async meshChunkLocally(cx: number, cz: number, level: number) {\n    const neighbors = [\n      [-1, -1],\n      [0, -1],\n      [1, -1],\n      [-1, 0],\n      [0, 0],\n      [1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n    ];\n\n    const chunks = neighbors.map(([dx, dz]) =>\n      this.getChunkByCoords(cx + dx, cz + dz)\n    );\n\n    const centerChunk = chunks[4];\n    if (!centerChunk) {\n      return;\n    }\n\n    const { min, max } = centerChunk;\n    const heightPerSubChunk = Math.floor(\n      this.options.maxHeight / this.options.subChunks\n    );\n    const subChunkMin = [min[0], heightPerSubChunk * level, min[2]];\n    const subChunkMax = [max[0], heightPerSubChunk * (level + 1), max[2]];\n\n    const chunksData: any[] = [];\n    const arrayBuffers: ArrayBuffer[] = [];\n\n    for (const chunk of chunks) {\n      if (!chunk) {\n        chunksData.push(null);\n        continue;\n      }\n\n      const [chunkData, chunkArrayBuffers] = chunk.serialize();\n\n      chunksData.push(chunkData);\n      arrayBuffers.push(...chunkArrayBuffers);\n    }\n\n    const data = {\n      chunksData,\n      options: this.options,\n      min: subChunkMin,\n      max: subChunkMax,\n    };\n\n    // Make sure it's not already processed by the server\n    const name = ChunkUtils.getChunkName([cx, cz]);\n    if (this.chunks.toProcessSet.has(name)) {\n      return;\n    }\n\n    const { geometries } = await new Promise<{\n      geometries: GeometryProtocol[];\n    }>((resolve) => {\n      this.meshWorkerPool.addJob({\n        message: data,\n        buffers: arrayBuffers,\n        resolve,\n      });\n    });\n\n    // Make sure it's not already processed by the server\n    if (this.chunks.toProcessSet.has(name)) {\n      return;\n    }\n\n    const mesh: MeshProtocol = {\n      level,\n      geometries,\n    };\n\n    this.buildChunkMesh(cx, cz, mesh);\n  }\n\n  /**\n   * Apply a texture to a face or faces of a block. This will automatically load the image from the source\n   * and draw it onto the block's texture atlas.\n   *\n   * @param idOrName The ID or name of the block.\n   * @param faceNames The face names to apply the texture to.\n   * @param source The source of the texture.\n   */\n  async applyBlockTexture(\n    idOrName: number | string,\n    faceNames: string | string[],\n    source: string | Color | HTMLImageElement | Texture\n  ) {\n    this.checkIsInitialized(\"apply block texture\", false);\n\n    const block = this.getBlockOf(idOrName);\n\n    const blockFaces = this.getBlockFacesByFaceNames(block.id, faceNames);\n    if (!blockFaces) {\n      throw new Error(\n        `Face(s) \"${faceNames}\" does not exist on block \"${block.name}\"`\n      );\n    }\n\n    // If it is a string, load the image.\n    const data =\n      typeof source === \"string\" ? await this.loader.loadImage(source) : source;\n\n    blockFaces.forEach((face) => {\n      if (face.isolated) {\n        console.warn(\n          \"Attempting to apply texture onto an isolated face: \",\n          block.name,\n          face.name\n        );\n        return;\n      }\n\n      const mat = this.getBlockFaceMaterial(block.id, face.name);\n\n      // If the face is independent, that means this face does not share a texture atlas with other faces.\n      // In this case, we can just set the map to the texture.\n      if (face.independent) {\n        if (source instanceof Texture) {\n          mat.map = source;\n          mat.uniforms.map = { value: source };\n          mat.needsUpdate = true;\n        } else if (data instanceof HTMLImageElement) {\n          mat.map.image = data;\n          mat.map.needsUpdate = true;\n          mat.needsUpdate = true;\n        } else if (data instanceof Color) {\n          const canvas = mat.map.image;\n          canvas.width = 1;\n          canvas.height = 1;\n          const ctx = canvas.getContext(\"2d\");\n          ctx.fillStyle = data.getStyle();\n          ctx.fillRect(0, 0, 1, 1);\n          // Update the texture with the new color\n          mat.map.needsUpdate = true;\n          mat.needsUpdate = true;\n        } else {\n          throw new Error(\n            `Cannot apply texture to face \"${face.name}\" on block \"${block.name}\" because the source is not an image or a color.`\n          );\n        }\n\n        return;\n      }\n\n      // Otherwise, we need to draw the image onto the texture atlas.\n      const atlas = mat.map as AtlasTexture;\n      atlas.drawImageToRange(face.range, data);\n\n      // Update the texture with the new image\n      mat.map.needsUpdate = true;\n    });\n  }\n\n  getIsolatedBlockMaterialAt(\n    voxel: Coords3,\n    faceName: string,\n    defaultDimension?: number\n  ) {\n    const block = this.getBlockAt(...voxel);\n    const idOrName = block.id;\n    return this.applyBlockTextureAt(\n      idOrName,\n      faceName,\n      new AtlasTexture(\n        1,\n        defaultDimension ?? this.options.textureUnitDimension\n      ),\n      voxel\n    );\n  }\n\n  applyBlockTextureAt(\n    idOrName: number | string,\n    faceName: string,\n    source: Texture,\n    voxel: Coords3\n  ) {\n    const block = this.getBlockOf(idOrName);\n    const faces = this.getBlockFacesByFaceNames(block.id, faceName);\n\n    if (!faces || faces.length !== 1) {\n      throw new Error(\n        `Face(s) \"${faceName}\" does not exist on block \"${block.name}\" or there are multiple faces with the same name.`\n      );\n    }\n\n    const [face] = faces;\n    if (!face.isolated) {\n      throw new Error(\n        `Cannot apply isolated texture to face \"${face.name}\" on block \"${block.name}\" because it is not isolated.`\n      );\n    }\n\n    let mat = this.getBlockFaceMaterial(block.id, face.name, voxel);\n    if (!mat) {\n      const isolatedMat = this.makeShaderMaterial();\n\n      const map = source;\n      isolatedMat.side = block.isSeeThrough ? DoubleSide : FrontSide;\n      isolatedMat.transparent = block.isSeeThrough;\n      isolatedMat.map = map;\n      isolatedMat.uniforms.map.value = map;\n\n      const key = this.makeChunkMaterialKey(block.id, face.name, voxel);\n      this.chunks.materials.set(key, isolatedMat);\n\n      mat = isolatedMat;\n\n      mat.map.needsUpdate = true;\n      mat.needsUpdate = true;\n    }\n\n    return mat;\n  }\n\n  /**\n   * Apply multiple block textures at once. See {@link applyBlockTexture} for more information.\n   *\n   * @param data The data to apply the block textures.\n   * @returns A promise that resolves when all the textures are applied.\n   */\n  async applyBlockTextures(\n    data: {\n      idOrName: number | string;\n      faceNames: string | string[];\n      source: string | Color;\n    }[]\n  ) {\n    return Promise.all(\n      data.map(({ idOrName, faceNames, source }) =>\n        this.applyBlockTexture(idOrName, faceNames, source)\n      )\n    );\n  }\n\n  /**\n   * Apply a set of keyframes to a block. This will load the keyframes from the sources and start the animation\n   * to play the keyframes on the block's texture atlas.\n   *\n   * @param idOrName The ID or name of the block.\n   * @param faceNames The face name or names to apply the texture to.\n   * @param keyframes The keyframes to apply to the texture.\n   * @param fadeFrames The number of frames to fade between each keyframe.\n   */\n  async applyBlockFrames(\n    idOrName: number | string,\n    faceNames: string | string[],\n    keyframes: [number, string | Color | HTMLImageElement][],\n    fadeFrames = 0\n  ) {\n    this.checkIsInitialized(\"apply block animation\", false);\n\n    const block = this.getBlockOf(idOrName);\n\n    const realKeyframes = [];\n\n    // Convert string sources to images.\n    for (const [duration, source] of keyframes) {\n      if (typeof source === \"string\") {\n        realKeyframes.push([duration, await this.loader.loadImage(source)]);\n        continue;\n      }\n\n      realKeyframes.push([duration, source]);\n    }\n\n    const blockFaces = this.getBlockFacesByFaceNames(block.id, faceNames);\n    if (!blockFaces) {\n      throw new Error(\n        `Face(s) \"${faceNames}\" does not exist on block \"${block.name}\"`\n      );\n    }\n\n    blockFaces.forEach((face) => {\n      const mat = this.getBlockFaceMaterial(block.id, face.name);\n\n      // If the block's material is not set up to an atlas texture, we need to set it up.\n      if (!(mat.map instanceof AtlasTexture)) {\n        const { image } = mat.map;\n\n        if (image && image.width) {\n          const atlas = new AtlasTexture(1, image.width);\n          atlas.drawImageToRange(face.range, image);\n\n          mat.map.dispose();\n          mat.map = atlas;\n          mat.uniforms.map = { value: atlas };\n          mat.needsUpdate = true;\n        } else {\n          throw new Error(\n            `Cannot animate face \"${face.name}\" on block \"${block.name}\" because it does not have a texture.`\n          );\n        }\n      }\n\n      // Register the animation. This will start the animation.\n      (mat.map as AtlasTexture).registerAnimation(\n        face.range,\n        realKeyframes,\n        fadeFrames\n      );\n    });\n  }\n\n  /**\n   * Apply a GIF animation to a block. This will load the GIF from the source and start the animation\n   * using {@link applyBlockFrames} internally.\n   *\n   * @param idOrName The ID or name of the block.\n   * @param faceNames The face name or names to apply the texture to.\n   * @param source The source of the GIF. Note that this must be a GIF file ending with `.gif`.\n   * @param interval The interval between each frame of the GIF in milliseconds. Defaults to `66.666667ms`.\n   */\n  async applyBlockGif(\n    idOrName: string,\n    faceNames: string[] | string,\n    source: string,\n    interval = 66.666667\n  ) {\n    this.checkIsInitialized(\"apply GIF animation\", false);\n\n    if (!source.endsWith(\".gif\")) {\n      console.warn(\n        \"There's a chance that this file isn't a GIF as it doesn't end with .gif\"\n      );\n    }\n\n    // Load the keyframes from this GIF.\n    const images = await this.loader.loadGifImages(source);\n\n    const keyframes = images.map(\n      (image) => [interval, image] as [number, HTMLImageElement]\n    );\n\n    await this.applyBlockFrames(idOrName, faceNames, keyframes);\n  }\n\n  /**\n   * Apply a resolution to a block. This will set the resolution of the block's texture atlas.\n   * Keep in mind that this face or faces must be independent.\n   *\n   * @param idOrName The ID or name of the block.\n   * @param faceNames The face name or names to apply the resolution to.\n   * @param resolution The resolution to apply to the block, in pixels.\n   */\n  async setResolutionOf(\n    idOrName: number | string,\n    faceNames: string | string[],\n    resolution:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) {\n    this.checkIsInitialized(\"apply resolution\", false);\n\n    const block = this.getBlockOf(idOrName);\n\n    faceNames = Array.isArray(faceNames) ? faceNames : [faceNames];\n\n    const blockFaces = this.getBlockFacesByFaceNames(block.id, faceNames);\n    if (!blockFaces) {\n      throw new Error(\n        `Face(s) \"${faceNames.join(\", \")}\" does not exist on block \"${\n          block.name\n        }\"`\n      );\n    }\n\n    for (const face of blockFaces) {\n      if (!face.independent) {\n        throw new Error(\n          `Cannot apply resolution to face \"${face.name}\" on block \"${block.name}\" because it is not independent.`\n        );\n      }\n\n      const mat = this.getBlockFaceMaterial(block.id, face.name);\n\n      // We know that this atlas texture will only be used for one single face.\n      if (mat.map instanceof AtlasTexture) {\n        throw new Error(\n          \"Cannot apply resolution to a face that is using an atlas texture. Have you accidentally applied keyframes to this face?\"\n        );\n      }\n\n      const canvas = mat.map.image ?? mat.map.source.data;\n\n      // Wait for the image to load.\n      if (canvas instanceof HTMLImageElement) {\n        await new Promise<void>((resolve) => {\n          if (canvas.complete) {\n            resolve();\n            return;\n          }\n\n          canvas.onload = () => {\n            resolve();\n          };\n        });\n      }\n\n      if (!canvas) {\n        throw new Error(\n          `Cannot apply resolution to face \"${face.name}\" on block \"${block.name}\" because it does not have or has not loaded a texture.`\n        );\n      }\n\n      const { width, height } = canvas;\n\n      const newCanvas = document.createElement(\"canvas\");\n\n      const newXResolution =\n        typeof resolution === \"number\" ? resolution : resolution.x;\n      const newYResolution =\n        typeof resolution === \"number\" ? resolution : resolution.y;\n\n      newCanvas.width = newXResolution;\n      newCanvas.height = newYResolution;\n\n      const newCtx = newCanvas.getContext(\"2d\");\n      newCtx.drawImage(\n        canvas,\n        0,\n        0,\n        width,\n        height,\n        0,\n        0,\n        newXResolution,\n        newYResolution\n      );\n\n      // Update the texture with the new image\n      mat.map.image = newCanvas;\n      mat.map.needsUpdate = true;\n      mat.needsUpdate = true;\n    }\n  }\n\n  getBlockFacesByFaceNames(id: number, faceNames: string | string[] | RegExp) {\n    const block = this.getBlockOf(id);\n    // Check for '*' wildcard to return all faces\n    if (faceNames === \"*\") {\n      return block.faces;\n    }\n    return block.faces.filter((face) => {\n      if (typeof faceNames === \"string\" || faceNames instanceof RegExp) {\n        return new RegExp(faceNames).test(face.name);\n      } else if (Array.isArray(faceNames)) {\n        return faceNames.some((fn) => new RegExp(fn).test(face.name));\n      }\n      return false;\n    });\n  }\n\n  /**\n   * Get a chunk by its name.\n   *\n   * @param name The name of the chunk to get.\n   * @returns The chunk with the given name, or undefined if it does not exist.\n   */\n  getChunkByName(name: string) {\n    this.checkIsInitialized(\"get chunk by name\", false);\n    return this.chunks.loaded.get(name);\n  }\n\n  /**\n   * Get a chunk by its 2D coordinates.\n   *\n   * @param cx The x coordinate of the chunk.\n   * @param cz The z coordinate of the chunk.\n   * @returns The chunk at the given coordinates, or undefined if it does not exist.\n   */\n  getChunkByCoords(cx: number, cz: number) {\n    this.checkIsInitialized(\"get chunk by coords\", false);\n    const name = ChunkUtils.getChunkName([cx, cz]);\n    return this.getChunkByName(name);\n  }\n\n  /**\n   * Get a chunk that contains a given position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The chunk that contains the position at the given position, or undefined if it does not exist.\n   */\n  getChunkByPosition(px: number, py: number, pz: number) {\n    this.checkIsInitialized(\"get chunk by position\", false);\n    const coords = ChunkUtils.mapVoxelToChunk(\n      [px | 0, py | 0, pz | 0],\n      this.options.chunkSize\n    );\n    return this.getChunkByCoords(...coords);\n  }\n\n  /**\n   * Get a voxel by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The voxel at the given position, or 0 if it does not exist.\n   */\n  getVoxelAt(px: number, py: number, pz: number) {\n    this.checkIsInitialized(\"get voxel\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return 0;\n    return chunk.getVoxel(px, py, pz);\n  }\n\n  setVoxelAt(px: number, py: number, pz: number, voxel: number) {\n    this.checkIsInitialized(\"set voxel\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return;\n    chunk.setVoxel(px, py, pz, voxel);\n    this.trackChunkAt(px, py, pz);\n  }\n\n  /**\n   * Get a voxel rotation by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The voxel rotation at the given position, or the default rotation if it does not exist.\n   */\n  getVoxelRotationAt(px: number, py: number, pz: number) {\n    this.checkIsInitialized(\"get voxel rotation\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return new BlockRotation();\n    return chunk.getVoxelRotation(px, py, pz);\n  }\n\n  /**\n   * Set a voxel rotation at a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @param rotation The rotation to set.\n   */\n  setVoxelRotationAt(\n    px: number,\n    py: number,\n    pz: number,\n    rotation: BlockRotation\n  ) {\n    this.checkIsInitialized(\"set voxel rotation\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return;\n    chunk.setVoxelRotation(px, py, pz, rotation);\n    this.trackChunkAt(px, py, pz);\n  }\n\n  /**\n   * Get a voxel stage by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The voxel stage at the given position, or 0 if it does not exist.\n   */\n  getVoxelStageAt(px: number, py: number, pz: number) {\n    this.checkIsInitialized(\"get voxel stage\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return 0;\n    return chunk.getVoxelStage(px, py, pz);\n  }\n\n  /**\n   * Get a voxel sunlight by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The voxel sunlight at the given position, or 0 if it does not exist.\n   */\n  getSunlightAt(px: number, py: number, pz: number) {\n    this.checkIsInitialized(\"get sunlight\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return 0;\n    return chunk.getSunlight(px, py, pz);\n  }\n\n  setSunlightAt(px: number, py: number, pz: number, level: number) {\n    this.checkIsInitialized(\"set sunlight\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return;\n    chunk.setSunlight(px, py, pz, level);\n    this.trackChunkAt(px, py, pz);\n  }\n\n  /**\n   * Get a voxel torch light by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @param color The color of the torch light.\n   * @returns The voxel torchlight at the given position, or 0 if it does not exist.\n   */\n  getTorchLightAt(px: number, py: number, pz: number, color: LightColor) {\n    this.checkIsInitialized(\"get torch light\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return 0;\n    return chunk.getTorchLight(px, py, pz, color);\n  }\n\n  setTorchLightAt(\n    px: number,\n    py: number,\n    pz: number,\n    level: number,\n    color: LightColor\n  ) {\n    this.checkIsInitialized(\"set torch light\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return;\n    chunk.setTorchLight(px, py, pz, level, color);\n    this.trackChunkAt(px, py, pz);\n  }\n\n  /**\n   * Get a color instance that represents what an object would be like\n   * if it were rendered at the given 3D voxel coordinate. This is useful\n   * to dynamically shade objects based on their position in the world. Also\n   * used in {@link LightShined}.\n   *\n   * @param vx The voxel's X position.\n   * @param vy The voxel's Y position.\n   * @param vz The voxel's Z position.\n   * @returns The voxel's light color at the given coordinate.\n   */\n  getLightColorAt(vx: number, vy: number, vz: number) {\n    this.checkIsInitialized(\"get light color\", false);\n\n    const sunlight = this.getSunlightAt(vx, vy, vz);\n    const redLight = this.getTorchLightAt(vx, vy, vz, \"RED\");\n    const greenLight = this.getTorchLightAt(vx, vy, vz, \"GREEN\");\n    const blueLight = this.getTorchLightAt(vx, vy, vz, \"BLUE\");\n\n    const { sunlightIntensity, minLightLevel } = this.chunks.uniforms;\n\n    const s = Math.min(\n      (sunlight / this.options.maxLightLevel) ** 2 *\n        sunlightIntensity.value *\n        (1 - minLightLevel.value) +\n        minLightLevel.value,\n      1\n    );\n\n    return new Color(\n      s + Math.pow(redLight / this.options.maxLightLevel, 2),\n      s + Math.pow(greenLight / this.options.maxLightLevel, 2),\n      s + Math.pow(blueLight / this.options.maxLightLevel, 2)\n    );\n  }\n\n  /**\n   * Get the block type data by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The block at the given position, or null if it does not exist.\n   */\n  getBlockAt(px: number, py: number, pz: number) {\n    this.checkIsInitialized(\"get block\", false);\n    const chunk = this.getChunkByPosition(px, py, pz);\n    if (chunk === undefined) return null;\n    const id = chunk.getVoxel(px, py, pz);\n    return this.getBlockById(id);\n  }\n\n  /**\n   * Get the highest block at a x/z position. Highest block means the first block counting downwards that\n   * isn't empty (`isEmpty`).\n   *\n   * @param px The x coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @returns The highest block at the given position, or 0 if it does not exist.\n   */\n  getMaxHeightAt(px: number, pz: number) {\n    this.checkIsInitialized(\"get max height\", false);\n\n    const vx = px | 0;\n    const vz = pz | 0;\n\n    for (let vy = this.options.maxHeight - 1; vy >= 0; vy--) {\n      const block = this.getBlockAt(vx, vy, vz);\n\n      if (!block.isEmpty) {\n        return vy;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Get the previous value of a voxel by a 3D world position.\n   *\n   * @param px The x coordinate of the position.\n   * @param py The y coordinate of the position.\n   * @param pz The z coordinate of the position.\n   * @param count By how much to look back in the history. Defaults to `1`.\n   * @returns\n   */\n  getPreviousValueAt(px: number, py: number, pz: number, count = 1) {\n    const name = ChunkUtils.getVoxelName([px | 0, py | 0, pz | 0]);\n    const arr = this.oldBlocks.get(name) || [];\n    return arr[arr.length - count] || 0;\n  }\n\n  getBlockOf(idOrName: number | string) {\n    if (typeof idOrName === \"number\") {\n      return this.getBlockById(idOrName);\n    }\n\n    return this.getBlockByName(idOrName.toLowerCase());\n  }\n\n  /**\n   * Get the block type data by a block id.\n   *\n   * @param id The block id.\n   * @returns The block data for the given id, or null if it does not exist.\n   */\n  getBlockById(id: number) {\n    const block = this.registry.blocksById.get(id);\n\n    if (!block) {\n      throw new Error(`Block with id ${id} does not exist`);\n    }\n\n    return block;\n  }\n\n  /**\n   * Get the block type data by a block name.\n   *\n   * @param name The block name.\n   * @returns The block data for the given name, or null if it does not exist.\n   */\n  getBlockByName(name: string) {\n    const block = this.registry.blocksByName.get(name.toLowerCase());\n\n    if (!block) {\n      throw new Error(`Block with name ${name} does not exist`);\n    }\n\n    return block;\n  }\n\n  getBlockEntityDataAt(px: number, py: number, pz: number): T | null {\n    this.checkIsInitialized(\"get block entity data\", false);\n\n    const vx = Math.floor(px);\n    const vy = Math.floor(py);\n    const vz = Math.floor(pz);\n    const voxelName = ChunkUtils.getVoxelName([vx, vy, vz]);\n\n    return this.blockEntitiesMap.get(voxelName).data || null;\n  }\n\n  setBlockEntityDataAt(px: number, py: number, pz: number, data: T) {\n    this.checkIsInitialized(\"set block entity data\", false);\n\n    const vx = Math.floor(px);\n    const vy = Math.floor(py);\n    const vz = Math.floor(pz);\n    const voxelName = ChunkUtils.getVoxelName([vx, vy, vz]);\n\n    const old = this.blockEntitiesMap.get(voxelName);\n    if (!old) {\n      // console.log(\"No entity found at:\", px, py, pz);\n      return;\n    }\n\n    old.data = data;\n\n    this.packets.push({\n      type: \"METHOD\",\n      method: {\n        name: \"vox-builtin:update-block-entity\",\n        payload: JSON.stringify({\n          id: old.id,\n          json: JSON.stringify(data),\n        }),\n      },\n    });\n  }\n\n  /**\n   * Get the status of a chunk.\n   *\n   * @param cx The x 2D coordinate of the chunk.\n   * @param cz The z 2D coordinate of the chunk.\n   * @returns The status of the chunk.\n   */\n  getChunkStatus(\n    cx: number,\n    cz: number\n  ): \"to request\" | \"requested\" | \"processing\" | \"loaded\" {\n    const name = ChunkUtils.getChunkName([cx, cz]);\n\n    const isRequested = this.chunks.requested.has(name);\n    const isLoaded = this.chunks.loaded.has(name);\n    const isProcessing = this.chunks.toProcessSet.has(name);\n    const isToRequest = this.chunks.toRequestSet.has(name);\n\n    // Check if more than one is true. If that is the case, throw an error.\n    if (\n      (isRequested && isProcessing) ||\n      (isRequested && isToRequest) ||\n      (isProcessing && isToRequest)\n    ) {\n      throw new Error(\n        `Chunk ${name} is in more than one state other than the loaded state. This should not happen. These are the states: requested: ${isRequested}, loaded: ${isLoaded}, processing: ${isProcessing}, to request: ${isToRequest}`\n      );\n    }\n\n    if (isLoaded) return \"loaded\";\n    if (isProcessing) return \"processing\";\n    if (isRequested) return \"requested\";\n    if (isToRequest) return \"to request\";\n\n    return null;\n  }\n\n  getBlockFaceMaterial(\n    idOrName: number | string,\n    faceName?: string,\n    voxel?: Coords3\n  ) {\n    this.checkIsInitialized(\"get material\", false);\n\n    const block = this.getBlockOf(idOrName);\n\n    if (faceName && block.isolatedFaces.has(faceName)) {\n      return this.chunks.materials.get(\n        this.makeChunkMaterialKey(block.id, faceName, voxel)\n      );\n    }\n\n    if (faceName && block.independentFaces.has(faceName)) {\n      return this.chunks.materials.get(\n        this.makeChunkMaterialKey(block.id, faceName)\n      );\n    }\n\n    return this.chunks.materials.get(this.makeChunkMaterialKey(block.id));\n  }\n\n  /**\n   * Add a listener to a chunk. This listener will be called when this chunk is loaded and ready to be rendered.\n   * This is useful for, for example, teleporting the player to the top of the chunk when the player just joined.\n   *\n   * @param coords The chunk coordinates to listen to.\n   * @param listener The listener to add.\n   */\n  addChunkInitListener = (\n    coords: Coords2,\n    listener: (chunk: Chunk) => void\n  ) => {\n    const name = ChunkUtils.getChunkName(coords);\n\n    if (this.chunks.loaded.has(name)) {\n      listener(this.chunks.loaded.get(name));\n      return;\n    }\n\n    const listeners = this.chunkInitializeListeners.get(name) || [];\n    listeners.push(listener);\n    this.chunkInitializeListeners.set(name, listeners);\n  };\n\n  addBlockUpdateListener = (listener: BlockUpdateListener) => {\n    this.blockUpdateListeners.add(listener);\n\n    return () => {\n      this.blockUpdateListeners.delete(listener);\n    };\n  };\n\n  addBlockEntityUpdateListener = (listener: BlockEntityUpdateListener<T>) => {\n    this.blockEntityUpdateListeners.add(listener);\n\n    return () => {\n      this.blockEntityUpdateListeners.delete(listener);\n    };\n  };\n\n  /**\n   * Whether or not if this chunk coordinate is within (inclusive) the world's bounds. That is, if this chunk coordinate\n   * is within {@link WorldServerOptions | WorldServerOptions.minChunk} and {@link WorldServerOptions | WorldServerOptions.maxChunk}.\n   *\n   * @param cx The chunk's X position.\n   * @param cz The chunk's Z position.\n   * @returns Whether or not this chunk is within the bounds of the world.\n   */\n  isWithinWorld(cx: number, cz: number) {\n    const { minChunk, maxChunk } = this.options;\n\n    return (\n      cx >= minChunk[0] &&\n      cx <= maxChunk[0] &&\n      cz >= minChunk[1] &&\n      cz <= maxChunk[1]\n    );\n  }\n\n  isChunkInView(\n    center: Coords2,\n    target: Coords2,\n    direction: Vector3,\n    threshold: number\n  ) {\n    const [cx, cz] = center;\n    const [tx, tz] = target;\n    const dx = cx - tx;\n    const dz = cz - tz;\n\n    if (dx * dx + dz * dz < (this.renderRadius >> 1) ** 2) {\n      return true;\n    }\n\n    const dot = (tz - cz) * direction.z + (tx - cx) * direction.x;\n    const det = (tz - cz) * direction.x - (tx - cx) * direction.z;\n    const angle = Math.atan2(det, dot);\n\n    return Math.abs(angle) < threshold;\n  }\n\n  /**\n   * Raycast through the world of voxels and return the details of the first block intersection.\n   *\n   * @param origin The origin of the ray.\n   * @param direction The direction of the ray.\n   * @param maxDistance The maximum distance of the ray.\n   * @param options The options for the ray.\n   * @param options.ignoreFluids Whether or not to ignore fluids. Defaults to `true`.\n   * @param options.ignorePassables Whether or not to ignore passable blocks. Defaults to `false`.\n   * @param options.ignoreSeeThrough Whether or not to ignore see through blocks. Defaults to `false`.\n   * @param options.ignoreList A list of blocks to ignore. Defaults to `[]`.\n   * @returns\n   */\n  raycastVoxels = (\n    origin: Coords3,\n    direction: Coords3,\n    maxDistance: number,\n    options: {\n      ignoreFluids?: boolean;\n      ignorePassables?: boolean;\n      ignoreSeeThrough?: boolean;\n      ignoreList?: number[];\n    } = {}\n  ) => {\n    this.checkIsInitialized(\"raycast voxels\", false);\n\n    const { ignoreFluids, ignorePassables, ignoreSeeThrough } = {\n      ignoreFluids: true,\n      ignorePassables: false,\n      ignoreSeeThrough: false,\n      ...options,\n    };\n\n    const ignoreList = new Set(options.ignoreList || []);\n\n    return raycast(\n      (wx, wy, wz) => {\n        const block = this.getBlockAt(wx, wy, wz);\n\n        if (!block) {\n          return [];\n        }\n\n        const {\n          id,\n          isFluid,\n          isPassable,\n          isSeeThrough,\n          aabbs,\n          dynamicFn,\n          isDynamic,\n          dynamicPatterns,\n        } = block;\n\n        if (ignoreList.has(id)) {\n          return [];\n        }\n\n        if (isDynamic && !dynamicFn) {\n          console.warn(\n            `Block of ID ${id} is dynamic but has no dynamic function.`\n          );\n        }\n\n        if (\n          (isFluid && ignoreFluids) ||\n          (isPassable && ignorePassables) ||\n          (isSeeThrough && ignoreSeeThrough)\n        ) {\n          return [];\n        }\n\n        const rotation = this.getVoxelRotationAt(wx, wy, wz);\n\n        if (dynamicPatterns && dynamicPatterns.length > 0) {\n          const aabbs = this.getBlockAABBsForDynamicPatterns(\n            wx,\n            wy,\n            wz,\n            dynamicPatterns\n          ).map((aabb) => rotation.rotateAABB(aabb));\n          return aabbs;\n        }\n\n        return (\n          isDynamic\n            ? dynamicFn\n              ? dynamicFn([wx | 0, wy | 0, wz | 0]).aabbs\n              : aabbs\n            : aabbs\n        ).map((aabb) => rotation.rotateAABB(aabb));\n      },\n      origin,\n      direction,\n      maxDistance\n    );\n  };\n\n  getBlockAABBsByIdAt = (id: number, vx: number, vy: number, vz: number) => {\n    const block = this.getBlockById(id);\n\n    if (!block) {\n      return [];\n    }\n    if (block.dynamicPatterns && block.dynamicPatterns.length > 0) {\n      return this.getBlockAABBsForDynamicPatterns(\n        vx,\n        vy,\n        vz,\n        block.dynamicPatterns\n      );\n    }\n\n    return block.aabbs;\n  };\n\n  getBlockAABBsAt = (vx: number, vy: number, vz: number) => {\n    const id = this.getVoxelAt(vx, vy, vz);\n    return this.getBlockAABBsByIdAt(id, vx, vy, vz);\n  };\n\n  getBlockAABBsForDynamicPatterns = (\n    vx: number,\n    vy: number,\n    vz: number,\n    dynamicPatterns: BlockDynamicPattern[]\n  ) => {\n    for (const dynamicPattern of dynamicPatterns) {\n      const aabbs: AABB[] = [];\n\n      for (const part of dynamicPattern.parts) {\n        const patternsMatched = BlockUtils.evaluateBlockRule(\n          part.rule,\n          [vx, vy, vz],\n          {\n            getVoxelAt: (vx: number, vy: number, vz: number) =>\n              this.getVoxelAt(vx, vy, vz),\n            getVoxelRotationAt: (vx: number, vy: number, vz: number) =>\n              this.getVoxelRotationAt(vx, vy, vz),\n            getVoxelStageAt: (vx: number, vy: number, vz: number) =>\n              this.getVoxelStageAt(vx, vy, vz),\n          }\n        );\n\n        if (patternsMatched) {\n          aabbs.push(...part.aabbs);\n        }\n      }\n\n      if (aabbs.length > 0) {\n        return aabbs.map((aabb) =>\n          aabb instanceof AABB\n            ? aabb\n            : new AABB(\n                (aabb as AABB).minX,\n                (aabb as AABB).minY,\n                (aabb as AABB).minZ,\n                (aabb as AABB).maxX,\n                (aabb as AABB).maxY,\n                (aabb as AABB).maxZ\n              )\n        );\n      }\n    }\n\n    return [];\n  };\n\n  /**\n   * This sends a block update to the server and updates across the network. Block updates are queued to\n   * {@link World.chunks | World.chunks.toUpdate} and scaffolded to the server {@link WorldClientOptions | WorldClientOptions.maxUpdatesPerUpdate} times\n   * per tick. Keep in mind that for rotation and y-rotation, the value should be one of the following:\n   * - Rotation: {@link PX_ROTATION} | {@link NX_ROTATION} | {@link PY_ROTATION} | {@link NY_ROTATION} | {@link PZ_ROTATION} | {@link NZ_ROTATION}\n   * - Y-rotation: 0 to {@link Y_ROT_SEGMENTS} - 1.\n   *\n   * This ignores blocks that are not defined, and also ignores rotations for blocks that are not {@link Block | Block.rotatable} (Same for if\n   * block is not {@link Block | Block.yRotatable}).\n   *\n   * @param vx The voxel's X position.\n   * @param vy The voxel's Y position.\n   * @param vz The voxel's Z position.\n   * @param type The type of the voxel.\n   * @param rotation The major axis rotation of the voxel.\n   * @param yRotation The Y rotation on the major axis. Applies to blocks with major axis of PY or NY.\n   */\n  updateVoxel = (\n    vx: number,\n    vy: number,\n    vz: number,\n    type: number,\n    rotation = PY_ROTATION,\n    yRotation = 0,\n    source: \"client\" | \"server\" = \"client\"\n  ) => {\n    this.updateVoxels([{ vx, vy, vz, type, rotation, yRotation }], source);\n  };\n\n  /**\n   * This sends a list of block updates to the server and updates across the network. Block updates are queued to\n   * {@link World.chunks | World.chunks.toUpdate} and scaffolded to the server {@link WorldClientOptions | WorldClientOptions.maxUpdatesPerUpdate} times\n   * per tick. Keep in mind that for rotation and y-rotation, the value should be one of the following:\n   *\n   * - Rotation: {@link PX_ROTATION} | {@link NX_ROTATION} | {@link PY_ROTATION} | {@link NY_ROTATION} | {@link PZ_ROTATION} | {@link NZ_ROTATION}\n   * - Y-rotation: 0 to {@link Y_ROT_SEGMENTS} - 1.\n   *\n   * This ignores blocks that are not defined, and also ignores rotations for blocks that are not {@link Block | Block.rotatable} (Same for if\n   * block is not {@link Block | Block.yRotatable}).\n   *\n   * @param updates A list of updates to send to the server.\n   */\n  updateVoxels = (\n    updates: BlockUpdate[],\n    source: \"client\" | \"server\" = \"client\"\n  ) => {\n    this.checkIsInitialized(\"update voxels\", false);\n\n    const voxelUpdates = updates\n      .filter((update) => {\n        if (update.vy < 0 || update.vy >= this.options.maxHeight) {\n          return false;\n        }\n\n        const { vx, vy, vz, type, rotation, yRotation } = update;\n\n        const currId = this.getVoxelAt(vx, vy, vz);\n        const currRot = this.getVoxelRotationAt(vx, vy, vz);\n\n        if (!this.getBlockById(type)) {\n          console.warn(`Block ID ${type} does not exist.`);\n          return false;\n        }\n\n        if (\n          currId === type &&\n          (rotation !== undefined ? currRot.value === rotation : false) &&\n          (yRotation !== undefined ? currRot.yRotation === yRotation : false)\n        ) {\n          return false;\n        }\n\n        return true;\n      })\n      .map((update) => {\n        if (isNaN(update.rotation)) {\n          update.rotation = 0;\n        }\n\n        if (!this.getBlockById(update.type).yRotatable) {\n          update.yRotation = 0;\n        }\n\n        return update;\n      });\n\n    this.chunks.toUpdate.push(\n      ...voxelUpdates.map((update) => ({ source, update }))\n    );\n\n    this.processClientUpdates();\n  };\n\n  floodLight(\n    queue: LightNode[],\n    color: LightColor,\n    min?: Coords3,\n    max?: Coords3\n  ) {\n    if (!queue.length) {\n      return;\n    }\n\n    const { maxHeight, minChunk, maxChunk, maxLightLevel, chunkSize } =\n      this.options;\n\n    const [startCX, startCZ] = minChunk;\n    const [endCX, endCZ] = maxChunk;\n\n    const isSunlight = color === \"SUNLIGHT\";\n\n    while (queue.length) {\n      const node = queue.shift();\n      const { voxel, level } = node;\n\n      if (level === 0) {\n        continue;\n      }\n\n      const [vx, vy, vz] = voxel;\n      const sourceBlock = this.getBlockAt(vx, vy, vz);\n      const sourceTransparency =\n        !isSunlight &&\n        BlockUtils.getBlockTorchLightLevel(sourceBlock, color) > 0\n          ? [true, true, true, true, true, true]\n          : BlockUtils.getBlockRotatedTransparency(\n              sourceBlock,\n              this.getVoxelRotationAt(vx, vy, vz)\n            );\n\n      for (const [ox, oy, oz] of VOXEL_NEIGHBORS) {\n        const nvy = vy + oy;\n\n        if (nvy < 0 || nvy >= maxHeight) {\n          continue;\n        }\n\n        const nvx = vx + ox;\n        const nvz = vz + oz;\n\n        const [ncx, ncz] = ChunkUtils.mapVoxelToChunk(\n          [nvx, nvy, nvz],\n          chunkSize\n        );\n\n        if (\n          ncx < startCX ||\n          ncx > endCX ||\n          ncz < startCZ ||\n          ncz > endCZ ||\n          (min && (nvx < min[0] || nvz < min[2])) ||\n          (max && (nvx >= max[0] || nvz >= max[2]))\n        ) {\n          continue;\n        }\n\n        const nextVoxel = [nvx, nvy, nvz] as Coords3;\n        const nBlock = this.getBlockAt(nvx, nvy, nvz);\n        const nTransparency = BlockUtils.getBlockRotatedTransparency(\n          nBlock,\n          this.getVoxelRotationAt(nvx, nvy, nvz)\n        );\n        const nextLevel =\n          level -\n          (isSunlight &&\n          !nBlock.lightReduce &&\n          oy === -1 &&\n          level === maxLightLevel\n            ? 0\n            : 1);\n\n        if (\n          !LightUtils.canEnter(sourceTransparency, nTransparency, ox, oy, oz) ||\n          (isSunlight\n            ? this.getSunlightAt(nvx, nvy, nvz)\n            : this.getTorchLightAt(nvx, nvy, nvz, color)) >= nextLevel\n        ) {\n          continue;\n        }\n\n        if (isSunlight) {\n          this.setSunlightAt(nvx, nvy, nvz, nextLevel);\n        } else {\n          this.setTorchLightAt(nvx, nvy, nvz, nextLevel, color);\n        }\n\n        queue.push({ voxel: nextVoxel, level: nextLevel });\n      }\n    }\n  }\n\n  public removeLight(voxel: Coords3, color: LightColor) {\n    const { maxHeight, maxLightLevel, chunkSize, minChunk, maxChunk } =\n      this.options;\n\n    const fill: LightNode[] = [];\n    const queue: LightNode[] = [];\n\n    const isSunlight = color === \"SUNLIGHT\";\n    const [vx, vy, vz] = voxel;\n\n    queue.push({\n      voxel,\n      level: isSunlight\n        ? this.getSunlightAt(vx, vy, vz)\n        : this.getTorchLightAt(vx, vy, vz, color),\n    });\n\n    if (isSunlight) {\n      this.setSunlightAt(vx, vy, vz, 0);\n    } else {\n      this.setTorchLightAt(vx, vy, vz, 0, color);\n    }\n\n    while (queue.length) {\n      const node = queue.shift();\n      const { voxel, level } = node;\n\n      const [vx, vy, vz] = voxel;\n\n      for (const [ox, oy, oz] of VOXEL_NEIGHBORS) {\n        const nvy = vy + oy;\n\n        if (nvy < 0 || nvy >= maxHeight) {\n          continue;\n        }\n\n        const nvx = vx + ox;\n        const nvz = vz + oz;\n        const [ncx, ncz] = ChunkUtils.mapVoxelToChunk(\n          [nvx, nvy, nvz],\n          chunkSize\n        );\n\n        if (\n          ncx < minChunk[0] ||\n          ncz < minChunk[1] ||\n          ncx > maxChunk[0] ||\n          ncz > maxChunk[1]\n        ) {\n          continue;\n        }\n\n        const nBlock = this.getBlockAt(nvx, nvy, nvz);\n        const rotation = this.getVoxelRotationAt(nvx, nvy, nvz);\n        const nTransparency = BlockUtils.getBlockRotatedTransparency(\n          nBlock,\n          rotation\n        );\n\n        if (\n          (isSunlight\n            ? true\n            : BlockUtils.getBlockTorchLightLevel(nBlock, color) === 0) &&\n          !LightUtils.canEnterInto(nTransparency, ox, oy, oz)\n        ) {\n          continue;\n        }\n\n        const nVoxel = [nvx, nvy, nvz] as Coords3;\n        const nl = isSunlight\n          ? this.getSunlightAt(nvx, nvy, nvz)\n          : this.getTorchLightAt(nvx, nvy, nvz, color);\n\n        if (nl === 0) {\n          continue;\n        }\n\n        if (\n          nl < level ||\n          (isSunlight &&\n            oy === -1 &&\n            level === maxLightLevel &&\n            nl === maxLightLevel)\n        ) {\n          queue.push({ voxel: nVoxel, level: nl });\n\n          if (isSunlight) {\n            this.setSunlightAt(nvx, nvy, nvz, 0);\n          } else {\n            this.setTorchLightAt(nvx, nvy, nvz, 0, color);\n          }\n        } else if (isSunlight && oy === -1 ? nl > level : nl >= level) {\n          fill.push({ voxel: nVoxel, level: nl });\n        }\n      }\n    }\n\n    this.floodLight(fill, color);\n  }\n\n  /**\n   * Get a mesh of the model of the given block.\n   *\n   * @param id The ID of the block.\n   * @param options The options of creating this block mesh.\n   * @param options.material The type of material to use for this generated mesh.\n   * @param options.separateFaces: Whether or not to separate the faces of the block into different meshes.\n   * @param options.crumbs: Whether or not to mess up the block mesh's faces and UVs to make it look like crumbs.\n   * @returns A 3D mesh (group) of the block model.\n   */\n  makeBlockMesh = (\n    idOrName: number | string,\n    options: Partial<{\n      separateFaces: boolean;\n      crumbs: boolean;\n      material: \"basic\" | \"standard\";\n    }> = {}\n  ) => {\n    this.checkIsInitialized(\"make block mesh\", false);\n\n    if (!idOrName) {\n      return null;\n    }\n\n    const block = this.getBlockOf(idOrName);\n    if (!block) return null;\n\n    const { separateFaces, crumbs, material } = {\n      separateFaces: false,\n      crumbs: false,\n      material: \"basic\",\n      ...options,\n    };\n\n    const { faces, isSeeThrough } = block;\n\n    const geometries = new Map<\n      string,\n      {\n        identifier: string;\n        positions: number[];\n        uvs: number[];\n        indices: number[];\n        material: MeshStandardMaterial | MeshBasicMaterial;\n      }\n    >();\n\n    faces.forEach((face, index) => {\n      const faceScale = crumbs && separateFaces ? Math.random() + 0.5 : 1;\n\n      const { corners, name, range } = face;\n\n      const identifier = `${block.name}-${name}-${\n        separateFaces ? index : \"all\"\n      }`;\n\n      let geometry = geometries.get(identifier);\n\n      if (!geometry) {\n        const chunkMat = this.getBlockFaceMaterial(block.id, name);\n\n        const matOptions = {\n          transparent: isSeeThrough,\n          map: chunkMat?.map,\n          side: isSeeThrough ? DoubleSide : FrontSide,\n        };\n\n        const mat =\n          material === \"basic\"\n            ? new MeshBasicMaterial(matOptions)\n            : new MeshStandardMaterial(matOptions);\n\n        geometry = {\n          identifier,\n          positions: [],\n          uvs: [],\n          indices: [],\n          material: mat,\n        };\n      }\n\n      const { positions, uvs, indices } = geometry;\n\n      const ndx = Math.floor(positions.length / 3);\n      let { startU, endU, startV, endV } = range;\n\n      if (crumbs) {\n        if (Math.random() < 0.5) {\n          startU = startU + ((endU - startU) / 2) * Math.random();\n          endV = endV - ((endV - startV) / 2) * Math.random();\n        } else {\n          endU = endU - ((endU - startU) / 2) * Math.random();\n          startV = startV + ((endV - startV) / 2) * Math.random();\n        }\n      }\n\n      corners.forEach(({ uv, pos }) => {\n        positions.push(...pos.map((p) => p * faceScale));\n        uvs.push(\n          uv[0] * (endU - startU) + startU,\n          uv[1] * (endV - startV) + startV\n        );\n      });\n\n      indices.push(ndx, ndx + 1, ndx + 2, ndx + 2, ndx + 1, ndx + 3);\n\n      geometries.set(identifier, geometry);\n    });\n\n    const group = new Group();\n\n    geometries.forEach(({ identifier, positions, uvs, indices, material }) => {\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\n        \"position\",\n        new Float32BufferAttribute(positions, 3)\n      );\n      geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n      geometry.setIndex(indices);\n      geometry.computeVertexNormals();\n      const mesh = new Mesh(geometry, material);\n      mesh.name = identifier;\n      group.add(mesh);\n    });\n\n    group.name = block.name;\n\n    group.position.x -= 0.5;\n    group.position.y -= 0.5;\n    group.position.z -= 0.5;\n\n    return group;\n  };\n\n  customizeMaterialShaders = (\n    idOrName: number | string,\n    faceName: string | null = null,\n    data: {\n      vertexShader: string;\n      fragmentShader: string;\n      uniforms?: { [key: string]: Uniform };\n    } = {\n      vertexShader: DEFAULT_CHUNK_SHADERS.vertex,\n      fragmentShader: DEFAULT_CHUNK_SHADERS.fragment,\n      uniforms: {},\n    }\n  ) => {\n    this.checkIsInitialized(\"customize material shaders\", false);\n\n    const {\n      vertexShader = DEFAULT_CHUNK_SHADERS.vertex,\n      fragmentShader = DEFAULT_CHUNK_SHADERS.fragment,\n      uniforms = {},\n    } = data;\n\n    const mat = this.getBlockFaceMaterial(idOrName, faceName);\n\n    if (!mat) {\n      throw new Error(\n        `Could not find material for block ${idOrName} and face ${faceName}`\n      );\n    }\n\n    mat.vertexShader = vertexShader;\n    mat.fragmentShader = fragmentShader;\n    mat.uniforms = {\n      ...mat.uniforms,\n      ...uniforms,\n    };\n    mat.needsUpdate = true;\n\n    return mat;\n  };\n\n  customizeBlockDynamic = (\n    idOrName: number | string,\n    fn: Block[\"dynamicFn\"]\n  ) => {\n    this.checkIsInitialized(\"customize block dynamic\", false);\n\n    const block = this.getBlockOf(idOrName);\n\n    if (!block) {\n      throw new Error(\n        `Block with ID ${idOrName} does not exist, could not overwrite dynamic function.`\n      );\n    }\n\n    block.dynamicFn = fn;\n  };\n\n  /**\n   * Initialize the world with the data received from the server. This includes populating\n   * the registry, setting the options, and creating the texture atlas.\n   */\n  async initialize() {\n    if (this.isInitialized) {\n      console.warn(\"World has already been isInitialized.\");\n      return;\n    }\n\n    if (this.initialData === null) {\n      throw new Error(\n        \"World has not received any initialization data from the server.\"\n      );\n    }\n\n    const { blocks, options, stats } = this.initialData;\n\n    this._time = stats.time;\n\n    // Loading the registry\n    Object.keys(blocks).forEach((name) => {\n      const block = blocks[name];\n      const { id, aabbs, isDynamic } = block;\n\n      const lowerName = name.toLowerCase();\n\n      block.independentFaces = new Set();\n      block.isolatedFaces = new Set();\n\n      block.faces.forEach((face) => {\n        if (face.independent) {\n          block.independentFaces.add(face.name);\n        } else if (face.isolated) {\n          block.isolatedFaces.add(face.name);\n        }\n      });\n\n      block.aabbs = aabbs.map(\n        ({ minX, minY, minZ, maxX, maxY, maxZ }) =>\n          new AABB(minX, minY, minZ, maxX, maxY, maxZ)\n      );\n\n      if (isDynamic) {\n        block.dynamicFn = () => {\n          return {\n            aabbs: block.aabbs,\n            faces: block.faces,\n            isTransparent: block.isTransparent,\n          };\n        };\n      }\n\n      this.registry.blocksByName.set(lowerName, block);\n      this.registry.blocksById.set(id, block);\n      this.registry.nameMap.set(lowerName, id);\n      this.registry.idMap.set(id, lowerName);\n    });\n\n    // Loading the options\n    this.options = {\n      ...this.options,\n      ...options,\n    };\n\n    this.physics.options = this.options;\n\n    await this.loadMaterials();\n\n    const registryData = this.registry.serialize();\n    this.meshWorkerPool.postMessage({ type: \"init\", registryData });\n\n    this.isInitialized = true;\n\n    this.renderRadius = this.options.defaultRenderRadius;\n\n    if (this.initialEntities) {\n      this.handleEntities(this.initialEntities);\n      this.initialEntities = null;\n    }\n  }\n\n  update(\n    position: Vector3 = new Vector3(),\n    direction: Vector3 = new Vector3()\n  ) {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    const delta = this.clock.getDelta();\n\n    const center = ChunkUtils.mapVoxelToChunk(\n      position.toArray() as Coords3,\n      this.options.chunkSize\n    );\n\n    if (this.options.doesTickTime) {\n      this._time = (this.time + delta) % this.options.timePerDay;\n    }\n\n    const startOverall = performance.now();\n\n    const startMaintainChunks = performance.now();\n    this.maintainChunks(center, direction);\n    const maintainChunksDuration = performance.now() - startMaintainChunks;\n\n    const startRequestChunks = performance.now();\n    this.requestChunks(center, direction);\n    const requestChunksDuration = performance.now() - startRequestChunks;\n\n    const startProcessChunks = performance.now();\n    this.processChunks(center);\n    const processChunksDuration = performance.now() - startProcessChunks;\n\n    const startUpdatePhysics = performance.now();\n    this.updatePhysics(delta);\n    const updatePhysicsDuration = performance.now() - startUpdatePhysics;\n\n    const startUpdateUniforms = performance.now();\n    this.updateUniforms();\n    const updateUniformsDuration = performance.now() - startUpdateUniforms;\n\n    const startUpdateSkyAndClouds = performance.now();\n    this.updateSkyAndClouds(position);\n    const updateSkyAndCloudsDuration =\n      performance.now() - startUpdateSkyAndClouds;\n\n    const startEmitServerUpdates = performance.now();\n    this.emitServerUpdates();\n    const emitServerUpdatesDuration =\n      performance.now() - startEmitServerUpdates;\n\n    const overallDuration = performance.now() - startOverall;\n    if (overallDuration > 1000 / 60) {\n      const isDebug = true;\n      const log = isDebug ? console.log : () => {};\n      // log(\"maintainChunks took\", maintainChunksDuration, \"ms\");\n      // log(\"requestChunks took\", requestChunksDuration, \"ms\");\n      // log(\"processChunks took\", processChunksDuration, \"ms\");\n      // log(\"updatePhysics took\", updatePhysicsDuration, \"ms\");\n      // log(\"updateUniforms took\", updateUniformsDuration, \"ms\");\n      // log(\"updateSkyAndClouds took\", updateSkyAndCloudsDuration, \"ms\");\n      // log(\"emitServerUpdates took\", emitServerUpdatesDuration, \"ms\");\n    }\n  }\n\n  /**\n   * The message interceptor.\n   *\n   * @hidden\n   */\n  onMessage(\n    message: MessageProtocol<\n      any,\n      unknown,\n      {\n        voxel: Coords3;\n        json: string;\n      }\n    >\n  ) {\n    const { type } = message;\n\n    switch (type) {\n      case \"INIT\": {\n        const { json, entities } = message;\n\n        this.initialData = json;\n\n        if (entities) {\n          this.initialEntities = entities;\n        }\n\n        break;\n      }\n      case \"ENTITY\": {\n        const { entities } = message;\n\n        if (entities && entities.length) {\n          this.handleEntities(entities);\n        }\n\n        break;\n      }\n      case \"STATS\": {\n        const { json } = message;\n\n        if (Math.abs(json.time - this.time) > this.options.timeForceThreshold) {\n          this._time = json.time;\n        }\n\n        break;\n      }\n      case \"LOAD\": {\n        const { chunks } = message;\n\n        chunks.forEach((chunk) => {\n          const { x, z } = chunk;\n          const name = ChunkUtils.getChunkName([x, z]);\n\n          // Only process if we're interested.\n          this.chunks.requested.delete(name);\n          this.chunks.toProcess.push({ source: \"load\", data: chunk });\n          this.chunks.toProcessSet.add(name);\n        });\n\n        break;\n      }\n      case \"UPDATE\": {\n        const { updates } = message;\n\n        // TODO: figure out how to do block cache\n        updates.forEach((update) => {\n          const { vx, vy, vz, voxel } = update;\n\n          const type = BlockUtils.extractID(voxel);\n          const rotation = BlockUtils.extractRotation(voxel);\n          const localRotation = this.getVoxelRotationAt(vx, vy, vz);\n\n          if (\n            this.getVoxelAt(vx, vy, vz) !== type ||\n            localRotation.value !== rotation.value ||\n            localRotation.yRotation !== rotation.yRotation\n          ) {\n            this.updateVoxel(\n              vx,\n              vy,\n              vz,\n              type,\n              rotation.value,\n              rotation.yRotation,\n              \"server\"\n            );\n          }\n        });\n\n        break;\n      }\n    }\n  }\n\n  private handleEntities = (entities: EntityProtocol<any>[]) => {\n    entities.forEach((entity) => {\n      const { id, type, metadata, operation } = entity;\n\n      if (!type.startsWith(\"block::\")) {\n        return;\n      }\n\n      if (!metadata || !metadata.voxel) {\n        // console.log(\"No metadata or voxel in block entity\", metadata);\n        return;\n      }\n\n      const [px, py, pz] = metadata.voxel;\n      const [vx, vy, vz] = [Math.floor(px), Math.floor(py), Math.floor(pz)];\n      const voxelId = ChunkUtils.getVoxelName([vx, vy, vz]);\n\n      let data: T | null;\n      try {\n        data = JSON.parse(metadata.json);\n      } catch (error) {\n        console.error(\"Error parsing block entity JSON:\", error);\n        data = null;\n      }\n\n      const originalData = this.blockEntitiesMap.get(voxelId) ?? [];\n      this.blockEntityUpdateListeners.forEach((listener) => {\n        listener({\n          id,\n          voxel: [vx, vy, vz],\n          oldValue: (originalData as any)?.data ?? null,\n          newValue: data as T | null,\n          operation,\n        });\n      });\n\n      switch (operation) {\n        case \"DELETE\": {\n          this.blockEntitiesMap.delete(voxelId);\n          break;\n        }\n\n        case \"CREATE\":\n        case \"UPDATE\": {\n          this.blockEntitiesMap.set(voxelId, { id, data });\n          break;\n        }\n      }\n    });\n  };\n\n  get time() {\n    return this._time;\n  }\n\n  set time(time: number) {\n    this._time = time;\n\n    if (this.isInitialized) {\n      this.packets.push({\n        type: \"METHOD\",\n        method: {\n          name: \"vox-builtin:set-time\",\n          payload: JSON.stringify({\n            time,\n          }),\n        },\n      });\n    }\n  }\n\n  get renderRadius() {\n    return this._renderRadius;\n  }\n\n  set renderRadius(radius: number) {\n    this.checkIsInitialized(\"set render radius\", false);\n\n    radius = Math.floor(radius);\n\n    this._renderRadius = radius;\n    this._deleteRadius = radius * 1.1;\n\n    const { chunkSize } = this.options;\n\n    this.chunks.uniforms.fogNear.value = radius * 0.7 * chunkSize;\n    this.chunks.uniforms.fogFar.value = radius * chunkSize;\n  }\n\n  get deleteRadius() {\n    return this._deleteRadius;\n  }\n\n  private requestChunks(center: Coords2, direction: Vector3) {\n    const {\n      renderRadius,\n      options: {\n        chunkRerequestInterval,\n        chunkLoadExponent,\n        maxChunkRequestsPerUpdate,\n      },\n    } = this;\n\n    const total =\n      this.chunks.loaded.size +\n      this.chunks.requested.size +\n      this.chunks.toRequest.length +\n      this.chunks.toProcess.length;\n\n    const ratio = total === 0 ? 1 : this.chunks.loaded.size / total;\n    const hasDirection = direction.length() > 0;\n\n    const angleThreshold =\n      ratio === 1\n        ? (Math.PI * 3) / 8\n        : Math.max(ratio ** chunkLoadExponent, 0.1);\n\n    const [centerX, centerZ] = center;\n    const toRequestSet = new Set<string>();\n\n    // Pre-calculate squared renderRadius to use in distance checks\n    const renderRadiusBounded = Math.floor(\n      Math.max(Math.min(ratio * renderRadius, renderRadius), 1)\n    );\n    const renderRadiusSquared = renderRadiusBounded * renderRadiusBounded;\n\n    // Surrounding the center, request all chunks that are not loaded.\n    for (let ox = -renderRadiusBounded; ox <= renderRadiusBounded; ox++) {\n      for (let oz = -renderRadiusBounded; oz <= renderRadiusBounded; oz++) {\n        // Use squared distance to avoid unnecessary Math.sqrt() call\n        if (ox * ox + oz * oz > renderRadiusSquared) continue;\n\n        const cx = centerX + ox;\n        const cz = centerZ + oz;\n\n        if (!this.isWithinWorld(cx, cz)) {\n          continue;\n        }\n\n        if (\n          hasDirection &&\n          !this.isChunkInView(center, [cx, cz], direction, angleThreshold)\n        ) {\n          continue;\n        }\n\n        const chunkName = ChunkUtils.getChunkName([cx, cz]);\n\n        if (this.chunks.loaded.has(chunkName)) {\n          continue;\n        }\n\n        if (this.chunks.requested.has(chunkName)) {\n          const name = ChunkUtils.getChunkName([cx, cz]);\n          const count = this.chunks.requested.get(name) || 0;\n\n          if (count + 1 > chunkRerequestInterval) {\n            this.chunks.requested.delete(name);\n            toRequestSet.add(`${cx},${cz}`);\n          } else {\n            this.chunks.requested.set(name, count + 1);\n          }\n\n          continue;\n        }\n\n        if (\n          this.chunks.toProcessSet.has(chunkName) ||\n          this.chunks.toRequestSet.has(chunkName)\n        ) {\n          continue;\n        }\n\n        const chunkCoords = `${cx},${cz}`;\n        if (!this.chunks.requested.has(ChunkUtils.getChunkName([cx, cz]))) {\n          toRequestSet.add(chunkCoords);\n        }\n        continue;\n      }\n    }\n\n    // i guess we still want to update the direction/center?\n    // if (toRequestSet.size === 0) {\n    //   return;\n    // }\n\n    const toRequestArray = Array.from(toRequestSet).map((coords) =>\n      coords.split(\",\").map(Number)\n    );\n\n    // Sort the chunks by distance from the center, closest first.\n    toRequestArray.sort((a, b) => {\n      const ad = (a[0] - center[0]) ** 2 + (a[1] - center[1]) ** 2;\n      const bd = (b[0] - center[0]) ** 2 + (b[1] - center[1]) ** 2;\n      return ad - bd;\n    });\n\n    // LOD:\n    // < 4 chunks: 0\n    // > 4 < 6 chunks: 1\n    // > 6 chunks: 2\n\n    const toRequest = toRequestArray.slice(0, maxChunkRequestsPerUpdate);\n\n    this.packets.push({\n      type: \"LOAD\",\n      json: {\n        center,\n        direction: new Vector2(direction.x, direction.z).normalize().toArray(),\n        chunks: toRequest,\n      },\n    });\n\n    toRequest.forEach((coords) => {\n      const name = ChunkUtils.getChunkName(coords as Coords2);\n      this.chunks.requested.set(name, 0);\n    });\n  }\n\n  private processChunks(center: Coords2) {\n    if (this.chunks.toProcess.length === 0) return;\n\n    // Sort the chunks by distance from the center, closest first.\n    this.chunks.toProcess.sort((a, b) => {\n      const { x: ax, z: az } = a.data;\n      const { x: bx, z: bz } = b.data;\n\n      const ad = (ax - center[0]) ** 2 + (az - center[1]) ** 2;\n      const bd = (bx - center[0]) ** 2 + (bz - center[1]) ** 2;\n\n      return ad - bd;\n    });\n\n    const {\n      maxProcessesPerUpdate,\n      chunkSize,\n      maxHeight,\n      subChunks,\n      maxLightLevel,\n      shouldGenerateChunkMeshes,\n    } = this.options;\n\n    const triggerInitListener = (chunk: Chunk) => {\n      const listeners = this.chunkInitializeListeners.get(chunk.name);\n\n      if (Array.isArray(listeners)) {\n        listeners.forEach((listener) => listener(chunk));\n        this.chunkInitializeListeners.delete(chunk.name);\n      }\n    };\n\n    const toProcess = this.chunks.toProcess.splice(0, maxProcessesPerUpdate);\n\n    toProcess.forEach((data) => {\n      const { x, z, id, meshes } = data.data;\n      const name = ChunkUtils.getChunkName([x, z]);\n      this.chunks.toProcessSet.delete(name);\n\n      let chunk = this.getChunkByCoords(x, z);\n\n      if (!chunk) {\n        chunk = new Chunk(id, [x, z], {\n          maxHeight,\n          subChunks,\n          size: chunkSize,\n          maxLightLevel,\n        });\n      }\n\n      chunk.setData(data.data);\n      chunk.isDirty = false;\n\n      this.chunks.loaded.set(name, chunk);\n\n      if (shouldGenerateChunkMeshes) {\n        for (const mesh of meshes) {\n          this.buildChunkMesh(x, z, mesh);\n        }\n\n        triggerInitListener(chunk);\n      } else {\n        triggerInitListener(chunk);\n      }\n    });\n  }\n\n  private maintainChunks(center: Coords2, direction: Vector3) {\n    const { deleteRadius } = this;\n\n    const [centerX, centerZ] = center;\n    const deleted: Coords2[] = [];\n\n    // Surrounding the center, delete all chunks that are too far away.\n    this.chunks.loaded.forEach((chunk) => {\n      const {\n        name,\n        coords: [x, z],\n      } = chunk;\n\n      // Too far away from center, delete.\n      if ((x - centerX) ** 2 + (z - centerZ) ** 2 > deleteRadius ** 2) {\n        const chunk = this.chunks.loaded.get(name);\n        chunk.dispose();\n\n        this.chunks.loaded.delete(name);\n\n        deleted.push(chunk.coords);\n      }\n    });\n\n    this.chunks.requested.forEach((_, name) => {\n      const [x, z] = ChunkUtils.parseChunkName(name);\n\n      if ((x - centerX) ** 2 + (z - centerZ) ** 2 > deleteRadius ** 2) {\n        this.chunks.requested.delete(name);\n        deleted.push([x, z]);\n      }\n    });\n\n    const tempToRequest = [...this.chunks.toRequest];\n    this.chunks.toRequest.length = 0;\n    const filteredTempToRequest = tempToRequest.filter((name) => {\n      const [x, z] = ChunkUtils.parseChunkName(name);\n      return (x - centerX) ** 2 + (z - centerZ) ** 2 <= deleteRadius ** 2;\n    });\n    this.chunks.toRequest.push(...filteredTempToRequest);\n    this.chunks.toRequestSet.clear();\n    filteredTempToRequest.forEach((name) => this.chunks.toRequestSet.add(name));\n\n    const tempToProcess = [...this.chunks.toProcess];\n    this.chunks.toProcess.length = 0;\n    const filteredToProcess = tempToProcess.filter((chunk) => {\n      const { x, z } = chunk.data;\n      return (x - centerX) ** 2 + (z - centerZ) ** 2 <= deleteRadius ** 2;\n    });\n    this.chunks.toProcess.push(...filteredToProcess);\n    this.chunks.toProcessSet.clear();\n    filteredToProcess.forEach((chunk) => {\n      const name = ChunkUtils.getChunkName([chunk.data.x, chunk.data.z]);\n      this.chunks.toProcessSet.add(name);\n    });\n\n    // Remove any listeners for deleted chunks.\n    deleted.forEach((coords) => {\n      const name = ChunkUtils.getChunkName(coords);\n      this.chunkInitializeListeners.delete(name);\n    });\n\n    if (deleted.length) {\n      this.packets.push({\n        type: \"UNLOAD\",\n        json: {\n          chunks: deleted,\n        },\n      });\n    }\n  }\n\n  private triggerBlockUpdateListeners(\n    vx: number,\n    vy: number,\n    vz: number,\n    oldValue: number,\n    newValue: number\n  ) {\n    this.blockUpdateListeners.forEach((listener) =>\n      listener({\n        voxel: [vx, vy, vz],\n        oldValue,\n        newValue,\n      })\n    );\n  }\n\n  private attemptBlockCache(\n    vx: number,\n    vy: number,\n    vz: number,\n    newVal: number\n  ) {\n    const chunk = this.getChunkByPosition(vx, vy, vz);\n    if (!chunk) return;\n\n    const oldVal = chunk.getRawValue(vx, vy, vz);\n\n    if (oldVal !== newVal) {\n      const name = ChunkUtils.getVoxelName([vx, vy, vz]);\n      const arr = this.oldBlocks.get(name) || [];\n      arr.push(oldVal);\n      this.oldBlocks.set(name, arr);\n      this.triggerBlockUpdateListeners(vx, vy, vz, oldVal, newVal);\n    }\n  }\n\n  /**\n   * Update the physics engine by ticking all inner AABBs.\n   */\n  private updatePhysics = (delta: number) => {\n    if (!this.physics || !this.options.gravity) return;\n\n    const noGravity =\n      this.options.gravity[0] ** 2 +\n        this.options.gravity[1] ** 2 +\n        this.options.gravity[2] ** 2 <\n      0.01;\n\n    this.physics.bodies.forEach((body) => {\n      const coords = ChunkUtils.mapVoxelToChunk(\n        body.getPosition() as Coords3,\n        this.options.chunkSize\n      );\n      const chunk = this.getChunkByPosition(...(body.getPosition() as Coords3));\n\n      if ((!chunk || !chunk.isReady) && this.isWithinWorld(...coords)) {\n        return;\n      }\n\n      this.physics.iterateBody(body, delta, noGravity);\n    });\n  };\n\n  public updateSkyAndClouds(position: Vector3) {\n    const {\n      sunlightStartTimeFrac,\n      sunlightEndTimeFrac,\n      sunlightChangeSpan,\n      timePerDay,\n      minLightLevel,\n    } = this.options;\n\n    this.sky.update(position, this.time, timePerDay);\n    this.clouds.update(position);\n\n    // Update the sunlight intensity\n    const sunlightStartTime = Math.floor(sunlightStartTimeFrac * timePerDay);\n    const sunlightEndTime = Math.floor(sunlightEndTimeFrac * timePerDay);\n    const sunlightChangeSpanTime = Math.floor(sunlightChangeSpan * timePerDay);\n\n    const sunlightIntensity = Math.max(\n      minLightLevel,\n      this.time < sunlightStartTime\n        ? 0.0\n        : this.time < sunlightStartTime + sunlightChangeSpanTime\n        ? (this.time - sunlightStartTime) / sunlightChangeSpanTime\n        : this.time <= sunlightEndTime\n        ? 1.0\n        : this.time <= sunlightEndTime + sunlightChangeSpanTime\n        ? 1 - (this.time - sunlightEndTime) / sunlightChangeSpanTime\n        : 0.0\n    );\n\n    this.chunks.uniforms.sunlightIntensity.value = sunlightIntensity;\n\n    // Update the clouds' colors based on the sky's colors.\n    const cloudColor = this.clouds.material.uniforms.uCloudColor.value;\n    const cloudColorHSL = cloudColor.getHSL({});\n    cloudColor.setHSL(\n      cloudColorHSL.h,\n      cloudColorHSL.s,\n      ThreeMathUtils.clamp(sunlightIntensity, 0, 1)\n    );\n\n    this.chunks.uniforms.fogColor.value?.copy(this.sky.uMiddleColor.value);\n  }\n\n  /**\n   * Update the uniform values.\n   */\n  private updateUniforms = () => {\n    this.chunks.uniforms.time.value = performance.now();\n  };\n\n  private buildChunkMesh(cx: number, cz: number, data: MeshProtocol) {\n    const chunk = this.getChunkByCoords(cx, cz);\n    if (!chunk) return; // May be already maintained and deleted.\n\n    const { maxHeight, subChunks, chunkSize } = this.options;\n    const { level, geometries } = data;\n    const heightPerSubChunk = Math.floor(maxHeight / subChunks);\n\n    chunk.meshes.get(level)?.forEach((mesh) => {\n      if (!mesh) return;\n      mesh.geometry.dispose();\n      chunk.group.remove(mesh);\n    });\n\n    chunk.meshes.delete(level);\n\n    if (geometries.length === 0) return;\n\n    const meshes = geometries\n      .map((geo) => {\n        const { voxel, at, faceName, indices, lights, positions, uvs } = geo;\n        const geometry = new BufferGeometry();\n\n        geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n        geometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2));\n        geometry.setAttribute(\"light\", new BufferAttribute(lights, 1));\n        geometry.setIndex(new BufferAttribute(indices, 1));\n\n        let material = this.getBlockFaceMaterial(voxel, faceName);\n        if (!material) {\n          const block = this.getBlockById(voxel);\n          const face = block.faces.find((face) => face.name === faceName);\n\n          // if not even isolated, we don't want to care about it\n          if (!face.isolated || !at) {\n            console.warn(\"Unlikely situation happened...\"); // todo: better console log\n            return;\n          }\n\n          const isolatedMaterial = this.getIsolatedBlockMaterialAt(\n            at,\n            faceName\n          );\n          // test draw some random color\n          if (isolatedMaterial.map instanceof AtlasTexture) {\n            isolatedMaterial.map.drawImageToRange(\n              {\n                startU: 0,\n                endU: 1,\n                startV: 0,\n                endV: 1,\n              },\n              new Color(Math.random(), Math.random(), Math.random())\n            );\n          }\n          material = isolatedMaterial;\n        }\n\n        const mesh = new Mesh(geometry, material);\n        mesh.position.set(\n          cx * chunkSize,\n          level * heightPerSubChunk,\n          cz * chunkSize\n        );\n        mesh.updateMatrix();\n        mesh.matrixAutoUpdate = false;\n        mesh.matrixWorldAutoUpdate = false;\n        mesh.userData = { isChunk: true, voxel };\n\n        chunk.group.add(mesh);\n        return mesh;\n      })\n      .filter((m) => !!m);\n\n    if (!this.children.includes(chunk.group)) {\n      this.add(chunk.group);\n    }\n\n    if (!chunk.meshes.has(level)) {\n      chunk.meshes.set(level, []);\n    }\n\n    chunk.meshes.get(level)?.push(...meshes);\n  }\n\n  private setupComponents() {\n    const { skyOptions, cloudsOptions } = this.options;\n\n    this.registry = new Registry();\n    this.loader = new Loader();\n    this.chunks = new Chunks();\n\n    if (!cloudsOptions.uFogColor) {\n      cloudsOptions.uFogColor = this.chunks.uniforms.fogColor;\n    }\n\n    this.sky = new Sky(skyOptions);\n    this.clouds = new Clouds(cloudsOptions);\n\n    this.add(this.sky, this.clouds);\n\n    // initialize the physics engine with server provided options.\n    this.physics = new PhysicsEngine(\n      (vx: number, vy: number, vz: number) => {\n        if (!this.getChunkByPosition(vx, vy, vz)) return [];\n\n        const id = this.getVoxelAt(vx, vy, vz);\n        const rotation = this.getVoxelRotationAt(vx, vy, vz);\n        const { aabbs, isPassable, isFluid, dynamicPatterns } =\n          this.getBlockById(id);\n\n        if (isPassable || isFluid) return [];\n\n        if (dynamicPatterns && dynamicPatterns.length > 0) {\n          return this.getBlockAABBsForDynamicPatterns(\n            vx,\n            vy,\n            vz,\n            dynamicPatterns\n          ).map((aabb) => rotation.rotateAABB(aabb).translate([vx, vy, vz]));\n        }\n\n        return aabbs.map((aabb) =>\n          rotation.rotateAABB(aabb).translate([vx, vy, vz])\n        );\n      },\n      (vx: number, vy: number, vz: number) => {\n        if (!this.getChunkByPosition(vx, vy, vz)) return false;\n\n        const id = this.getVoxelAt(vx, vy, vz);\n        const { isFluid } = this.getBlockById(id);\n\n        return isFluid;\n      },\n      this.options\n    );\n  }\n\n  private setupUniforms() {\n    const { minLightLevel } = this.options;\n\n    this.chunks.uniforms.minLightLevel.value = minLightLevel;\n  }\n\n  private processLightUpdates = (updates: BlockUpdateWithSource[]) => {\n    const processStartTime = performance.now(); // Timing start for the entire function\n\n    const { maxHeight, maxLightLevel, maxLightsUpdateTime } = this.options;\n\n    // Placing a light\n    const redFlood: LightNode[] = [];\n    const greenFlood: LightNode[] = [];\n    const blueFlood: LightNode[] = [];\n    const sunFlood: LightNode[] = [];\n\n    let processedUpdates = 0; // Track the number of processed updates\n\n    const updatesLoopStartTime = performance.now(); // Timing start for updates loop\n    for (const update of updates) {\n      if (performance.now() - processStartTime > maxLightsUpdateTime) {\n        console.warn(\n          \"Approaching max lights update time, adjusting processing.\"\n        );\n        break;\n      }\n\n      const {\n        update: { type, vx, vy, vz, rotation, yRotation },\n      } = update;\n\n      const currentBlock = this.getBlockAt(vx, vy, vz);\n      const currentRotation = this.getVoxelRotationAt(vx, vy, vz);\n      const currentTransparency = BlockUtils.getBlockRotatedTransparency(\n        currentBlock,\n        currentRotation\n      );\n      const updatedBlock = this.getBlockById(type);\n      const updatedRotation = BlockRotation.encode(rotation, yRotation);\n      const updatedTransparency = BlockUtils.getBlockRotatedTransparency(\n        updatedBlock,\n        updatedRotation\n      );\n\n      const newValue = BlockUtils.insertAll(\n        updatedBlock.id,\n        updatedBlock.rotatable ? updatedRotation : undefined\n      );\n      this.attemptBlockCache(vx, vy, vz, newValue);\n\n      this.setVoxelAt(vx, vy, vz, type);\n\n      if (updatedBlock.rotatable) {\n        this.setVoxelRotationAt(vx, vy, vz, updatedRotation);\n      }\n\n      if (updatedBlock.isOpaque || updatedBlock.lightReduce) {\n        if (this.getSunlightAt(vx, vy, vz) > 0) {\n          this.removeLight([vx, vy, vz], \"SUNLIGHT\");\n        }\n\n        ([RED_LIGHT, GREEN_LIGHT, BLUE_LIGHT] as LightColor[]).map((color) => {\n          if (this.getTorchLightAt(vx, vy, vz, color) > 0) {\n            this.removeLight([vx, vy, vz], color);\n          }\n        });\n      } else {\n        let removeCount = 0;\n\n        const lightData = [\n          [SUNLIGHT, this.getSunlightAt(vx, vy, vz)],\n          [RED_LIGHT, this.getTorchLightAt(vx, vy, vz, \"RED\")],\n          [GREEN_LIGHT, this.getTorchLightAt(vx, vy, vz, \"GREEN\")],\n          [BLUE_LIGHT, this.getTorchLightAt(vx, vy, vz, \"BLUE\")],\n        ] as const;\n\n        VOXEL_NEIGHBORS.forEach(([ox, oy, oz]) => {\n          const nvy = vy + oy;\n          if (nvy < 0 || nvy >= maxHeight) {\n            return;\n          }\n\n          const nvx = vx + ox;\n          const nvz = vz + oz;\n\n          const nBlock = this.getBlockAt(nvx, nvy, nvz);\n          const nTransparency = BlockUtils.getBlockRotatedTransparency(\n            nBlock,\n            // Maybe use the new rotation?\n            currentRotation\n          );\n\n          if (\n            !(\n              LightUtils.canEnter(\n                currentTransparency,\n                nTransparency,\n                ox,\n                oy,\n                oz\n              ) &&\n              !LightUtils.canEnter(\n                updatedTransparency,\n                nTransparency,\n                ox,\n                oy,\n                oz\n              )\n            )\n          ) {\n            return;\n          }\n\n          lightData.forEach(([color, sourceLevel]) => {\n            const isSunlight = color === SUNLIGHT;\n\n            const nLevel = isSunlight\n              ? this.getSunlightAt(nvx, nvy, nvz)\n              : this.getTorchLightAt(nvx, nvy, nvz, color);\n\n            if (\n              nLevel < sourceLevel ||\n              (oy === -1 &&\n                isSunlight &&\n                nLevel === maxLightLevel &&\n                sourceLevel === maxLightLevel)\n            ) {\n              removeCount += 1;\n              this.removeLight([nvx, nvy, nvz], color);\n            }\n          });\n        });\n\n        if (removeCount === 0) {\n          if (this.getSunlightAt(vx, vy, vz) !== 0) {\n            this.removeLight([vx, vy, vz], \"SUNLIGHT\");\n          }\n\n          ([RED_LIGHT, GREEN_LIGHT, BLUE_LIGHT] as LightColor[]).map(\n            (color) => {\n              if (this.getTorchLightAt(vx, vy, vz, color) !== 0) {\n                this.removeLight([vx, vy, vz], color);\n              }\n            }\n          );\n        }\n      }\n\n      if (updatedBlock.isLight) {\n        if (updatedBlock.redLightLevel > 0) {\n          this.setTorchLightAt(vx, vy, vz, updatedBlock.redLightLevel, \"RED\");\n          redFlood.push({\n            voxel: [vx, vy, vz],\n            level: updatedBlock.redLightLevel,\n          });\n        }\n\n        if (updatedBlock.greenLightLevel > 0) {\n          this.setTorchLightAt(\n            vx,\n            vy,\n            vz,\n            updatedBlock.greenLightLevel,\n            \"GREEN\"\n          );\n          greenFlood.push({\n            voxel: [vx, vy, vz],\n            level: updatedBlock.greenLightLevel,\n          });\n        }\n\n        if (updatedBlock.blueLightLevel > 0) {\n          this.setTorchLightAt(vx, vy, vz, updatedBlock.blueLightLevel, \"BLUE\");\n          blueFlood.push({\n            voxel: [vx, vy, vz],\n            level: updatedBlock.blueLightLevel,\n          });\n        }\n      } else {\n        // Check the six neighbors.\n        VOXEL_NEIGHBORS.forEach(([ox, oy, oz]) => {\n          const nvy = vy + oy;\n\n          if (nvy < 0) {\n            return;\n          }\n\n          // Sunlight should propagate downwards here.\n          if (nvy >= maxHeight) {\n            // Light can go downwards into this block.\n            if (\n              LightUtils.canEnter(\n                [true, true, true, true, true, true],\n                updatedTransparency,\n                ox,\n                -1,\n                oz\n              )\n            ) {\n              sunFlood.push({\n                voxel: [vx + ox, vy, vz + oz],\n                level: maxLightLevel,\n              });\n            }\n\n            return;\n          }\n\n          const nvx = vx + ox;\n          const nvz = vz + oz;\n\n          const nBlock = this.getBlockAt(nvx, nvy, nvz);\n          const nTransparency = BlockUtils.getBlockRotatedTransparency(\n            nBlock,\n            this.getVoxelRotationAt(nvx, nvy, nvz)\n          );\n\n          const nVoxel = [nvx, nvy, nvz] as Coords3;\n\n          // See if light couldn't originally go from source to neighbor, but now can in the updated block. If not, move on.\n          if (\n            !(\n              nBlock.redLightLevel > 0 ||\n              nBlock.greenLightLevel > 0 ||\n              nBlock.blueLightLevel > 0\n            ) &&\n            !(\n              !LightUtils.canEnter(\n                currentTransparency,\n                nTransparency,\n                ox,\n                oy,\n                oz\n              ) &&\n              LightUtils.canEnter(\n                updatedTransparency,\n                nTransparency,\n                ox,\n                oy,\n                oz\n              )\n            )\n          ) {\n            return;\n          }\n\n          const level =\n            this.getSunlightAt(nvx, nvy, nvz) -\n            (updatedBlock.lightReduce ? 1 : 0);\n          if (level !== 0) {\n            sunFlood.push({\n              voxel: nVoxel,\n              level,\n            });\n          }\n\n          const redLevel =\n            this.getTorchLightAt(nvx, nvy, nvz, \"RED\") -\n            (updatedBlock.lightReduce ? 1 : 0);\n          if (redLevel !== 0) {\n            redFlood.push({\n              voxel: nVoxel,\n              level: redLevel,\n            });\n          }\n\n          const greenLevel =\n            this.getTorchLightAt(nvx, nvy, nvz, \"GREEN\") -\n            (updatedBlock.lightReduce ? 1 : 0);\n          if (greenLevel !== 0) {\n            greenFlood.push({\n              voxel: nVoxel,\n              level: greenLevel,\n            });\n          }\n\n          const blueLevel =\n            this.getTorchLightAt(nvx, nvy, nvz, \"BLUE\") -\n            (updatedBlock.lightReduce ? 1 : 0);\n          if (blueLevel !== 0) {\n            blueFlood.push({\n              voxel: nVoxel,\n              level: blueLevel,\n            });\n          }\n        });\n      }\n\n      processedUpdates++; // Increment the count of processed updates\n    }\n    const updatesLoopEndTime = performance.now(); // Timing end for updates loop\n    // console.log(\n    //   `Updates loop processing time: ${\n    //     updatesLoopEndTime - updatesLoopStartTime\n    //   }ms`\n    // );\n\n    // Proceed with flood light process\n    const floodLightStartTime = performance.now(); // Timing start for flood light\n    this.floodLight(sunFlood, \"SUNLIGHT\");\n    this.floodLight(redFlood, \"RED\");\n    this.floodLight(greenFlood, \"GREEN\");\n    this.floodLight(blueFlood, \"BLUE\");\n    const floodLightEndTime = performance.now(); // Timing end for flood light\n    // console.log(\n    //   `Flood light processing time: ${\n    //     floodLightEndTime - floodLightStartTime\n    //   }ms`\n    // );\n\n    const processEndTime = performance.now(); // Timing end for the entire function\n    // console.log(\n    //   `Total processLightUpdates function time: ${\n    //     processEndTime - processStartTime\n    //   }ms`\n    // );\n\n    // Return the remaining updates that were not processed due to time constraint\n    return updates.slice(processedUpdates);\n  };\n\n  private processClientUpdates = () => {\n    // Update server voxels\n    if (this.chunks.toUpdate.length === 0 || this.isTrackingChunks) {\n      return;\n    }\n\n    this.isTrackingChunks = true;\n\n    // console.log(this.chunks.toUpdate.length, this.options.maxUpdatesPerUpdate);\n\n    const start = performance.now();\n\n    const processUpdatesInIdleTime = () => {\n      if (this.chunks.toUpdate.length > 0) {\n        const updates = this.chunks.toUpdate.splice(\n          0,\n          this.options.maxUpdatesPerUpdate\n        );\n        const remainingUpdates = this.processLightUpdates(updates);\n\n        this.chunks.toUpdate.push(...remainingUpdates);\n\n        this.chunks.toEmit.push(\n          ...updates\n            .slice(\n              0,\n              this.options.maxUpdatesPerUpdate - remainingUpdates.length\n            )\n            .filter(({ source }) => source === \"client\")\n            .map(({ update }) => update)\n        );\n\n        // Use setTimeout to give the browser a chance to handle other tasks.\n        if (this.chunks.toUpdate.length > 0) {\n          requestAnimationFrame(processUpdatesInIdleTime); // 0 ms delay to schedule after any pending tasks\n          return;\n        } else {\n          const end = performance.now();\n          // console.log(end - start);\n        }\n      }\n\n      this.isTrackingChunks = false;\n      this.processDirtyChunks();\n    };\n\n    // Execute the first frame immediately, subsequent frames in timeout\n    processUpdatesInIdleTime();\n  };\n\n  private processDirtyChunks = async () => {\n    const dirtyChunks = this.chunksTracker.splice(0, this.chunksTracker.length);\n\n    for (const [coords, level] of dirtyChunks) {\n      const [cx, cz] = coords;\n      await this.meshChunkLocally(cx, cz, level);\n    }\n  };\n\n  /**\n   * Scaffold the server updates onto the network, including chunk requests and block updates.\n   */\n  private emitServerUpdates = () => {\n    if (this.chunks.toEmit.length === 0) {\n      return;\n    }\n\n    const updates = this.chunks.toEmit.splice(\n      0,\n      this.options.maxUpdatesPerUpdate\n    );\n\n    this.packets.push({\n      type: \"UPDATE\",\n      updates: updates.map((update) => {\n        const { type, rotation, yRotation } = update;\n\n        const block = this.getBlockById(type);\n\n        let raw = 0;\n        raw = BlockUtils.insertID(raw, type);\n\n        if (block.rotatable && (!isNaN(rotation) || !isNaN(yRotation))) {\n          raw = BlockUtils.insertRotation(\n            raw,\n            BlockRotation.encode(rotation, yRotation)\n          );\n        }\n\n        return {\n          ...update,\n          voxel: raw,\n        };\n      }),\n    });\n  };\n\n  /**\n   * Make a chunk shader material with the current atlas.\n   */\n  private makeShaderMaterial = (\n    fragmentShader = DEFAULT_CHUNK_SHADERS.fragment,\n    vertexShader = DEFAULT_CHUNK_SHADERS.vertex,\n    uniforms: any = {}\n  ) => {\n    const chunksUniforms = {\n      ...this.chunks.uniforms,\n      ...this.options.chunkUniformsOverwrite,\n    };\n\n    const material = new ShaderMaterial({\n      vertexColors: true,\n      fragmentShader,\n      vertexShader,\n      uniforms: {\n        ...UniformsUtils.clone(ShaderLib.basic.uniforms),\n        uLightIntensityAdjustment: chunksUniforms.lightIntensityAdjustment,\n        uSunlightIntensity: chunksUniforms.sunlightIntensity,\n        uAOTable: chunksUniforms.ao,\n        uMinLightLevel: chunksUniforms.minLightLevel,\n        uFogNear: chunksUniforms.fogNear,\n        uFogFar: chunksUniforms.fogFar,\n        uFogColor: chunksUniforms.fogColor,\n        uTime: chunksUniforms.time,\n        ...uniforms,\n      },\n    }) as CustomChunkShaderMaterial;\n\n    Object.defineProperty(material, \"renderStage\", {\n      get: function () {\n        return material.uniforms.renderStage.value;\n      },\n\n      set: function (stage) {\n        material.uniforms.renderStage.value = parseFloat(stage);\n      },\n    });\n\n    // @ts-ignore\n    material.map = AtlasTexture.makeUnknownTexture();\n    material.uniforms.map = { value: material.map };\n\n    return material;\n  };\n\n  private async loadMaterials() {\n    const { textureUnitDimension } = this.options;\n\n    const perSide = (total: number) => {\n      let countPerSide = 1;\n      const sqrt = Math.ceil(Math.sqrt(total));\n      while (countPerSide < sqrt) {\n        countPerSide *= 2;\n      }\n\n      return countPerSide;\n    };\n\n    const make = (transparent: boolean, map: Texture) => {\n      const mat = this.makeShaderMaterial();\n\n      mat.side = transparent ? DoubleSide : FrontSide;\n      mat.transparent = transparent;\n      mat.map = map;\n      mat.uniforms.map.value = map;\n\n      return mat;\n    };\n\n    const blocks = Array.from(this.registry.blocksById.values());\n\n    const totalFaces = blocks.reduce((acc, block) => {\n      const independentFacesCount = block.faces.filter(\n        (f) => f.independent\n      ).length;\n      const isolatedFaces = block.faces.filter((f) => f.isolated).length;\n      return acc + (block.faces.length - independentFacesCount - isolatedFaces);\n    }, 0);\n\n    const countPerSide = perSide(totalFaces);\n    const atlas = new AtlasTexture(countPerSide, textureUnitDimension);\n\n    blocks.forEach((block) => {\n      const mat = make(block.isSeeThrough, atlas);\n      const key = this.makeChunkMaterialKey(block.id);\n      this.chunks.materials.set(key, mat);\n\n      block.faces.forEach((face) => {\n        if (!face.independent) return;\n\n        const independentMat = make(\n          block.isSeeThrough,\n          AtlasTexture.makeUnknownTexture(textureUnitDimension)\n        );\n        const independentKey = this.makeChunkMaterialKey(block.id, face.name);\n        this.chunks.materials.set(independentKey, independentMat);\n      });\n    });\n  }\n\n  private makeChunkMaterialKey(id: number, faceName?: string, voxel?: Coords3) {\n    return voxel\n      ? `${id}-${faceName}-${voxel.join(\"-\")}`\n      : faceName\n      ? `${id}-${faceName}`\n      : `${id}`;\n  }\n\n  private trackChunkAt(vx: number, vy: number, vz: number) {\n    if (!this.isTrackingChunks) return;\n    const { chunkSize, maxHeight, subChunks } = this.options;\n\n    const voxel = [vx | 0, vy | 0, vz | 0] as Coords3;\n    const [cx, cz] = ChunkUtils.mapVoxelToChunk(voxel, chunkSize);\n    const [lcx, , lcz] = ChunkUtils.mapVoxelToChunkLocal(voxel, chunkSize);\n\n    const subChunkHeight = maxHeight / subChunks;\n    const level = Math.floor(vy / subChunkHeight);\n\n    const chunkCoordsList: Coords2[] = [];\n    chunkCoordsList.push([cx, cz]);\n\n    if (lcx === 0) chunkCoordsList.push([cx - 1, cz]);\n    if (lcz === 0) chunkCoordsList.push([cx, cz - 1]);\n    if (lcx === 0 && lcz === 0) chunkCoordsList.push([cx - 1, cz - 1]);\n    if (lcx === chunkSize - 1) chunkCoordsList.push([cx + 1, cz]);\n    if (lcz === chunkSize - 1) chunkCoordsList.push([cx, cz + 1]);\n    if (lcx === chunkSize - 1 && lcz === chunkSize - 1)\n      chunkCoordsList.push([cx + 1, cz + 1]);\n\n    const levels: number[] = [];\n\n    if (vy % subChunkHeight === 0 && level > 0) {\n      levels.push(level - 1);\n    } else if (\n      vy % subChunkHeight === subChunkHeight - 1 &&\n      level < subChunks\n    ) {\n      levels.push(level + 1);\n    }\n    levels.push(level);\n\n    const existingChunksTrackerSet: string[] = [];\n    this.chunksTracker.forEach((tracker) => {\n      existingChunksTrackerSet.push(tracker.join(\",\"));\n    });\n\n    for (const [cx, cz] of chunkCoordsList) {\n      for (const level of levels) {\n        if (existingChunksTrackerSet.includes([cx, cz, level].join(\",\"))) {\n          continue;\n        }\n        this.chunksTracker.push([[cx, cz], level]);\n      }\n    }\n  }\n\n  /**\n   * A sanity check to make sure that an action is not being performed after\n   * the world has been isInitialized.\n   */\n  private checkIsInitialized(action: string, beforeInit = true) {\n    if (beforeInit ? this.isInitialized : !this.isInitialized) {\n      throw new Error(\n        `Cannot ${action} ${beforeInit ? \"after\" : \"before\"} the world ${\n          beforeInit ? \"has been\" : \"is\"\n        } isInitialized. ${\n          beforeInit\n            ? \"This has to be called before `world.init`.\"\n            : \"Remember to call the asynchronous function `world.init` beforehand.\"\n        }`\n      );\n    }\n  }\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.protocol = (function() {\n\n    /**\n     * Namespace protocol.\n     * @exports protocol\n     * @namespace\n     */\n    var protocol = {};\n\n    protocol.Geometry = (function() {\n\n        /**\n         * Properties of a Geometry.\n         * @memberof protocol\n         * @interface IGeometry\n         * @property {number|null} [voxel] Geometry voxel\n         * @property {string|null} [faceName] Geometry faceName\n         * @property {Array.<number>|null} [at] Geometry at\n         * @property {Array.<number>|null} [positions] Geometry positions\n         * @property {Array.<number>|null} [uvs] Geometry uvs\n         * @property {Array.<number>|null} [indices] Geometry indices\n         * @property {Array.<number>|null} [lights] Geometry lights\n         */\n\n        /**\n         * Constructs a new Geometry.\n         * @memberof protocol\n         * @classdesc Represents a Geometry.\n         * @implements IGeometry\n         * @constructor\n         * @param {protocol.IGeometry=} [properties] Properties to set\n         */\n        function Geometry(properties) {\n            this.at = [];\n            this.positions = [];\n            this.uvs = [];\n            this.indices = [];\n            this.lights = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Geometry voxel.\n         * @member {number} voxel\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.voxel = 0;\n\n        /**\n         * Geometry faceName.\n         * @member {string|null|undefined} faceName\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.faceName = null;\n\n        /**\n         * Geometry at.\n         * @member {Array.<number>} at\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.at = $util.emptyArray;\n\n        /**\n         * Geometry positions.\n         * @member {Array.<number>} positions\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.positions = $util.emptyArray;\n\n        /**\n         * Geometry uvs.\n         * @member {Array.<number>} uvs\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.uvs = $util.emptyArray;\n\n        /**\n         * Geometry indices.\n         * @member {Array.<number>} indices\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.indices = $util.emptyArray;\n\n        /**\n         * Geometry lights.\n         * @member {Array.<number>} lights\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Geometry.prototype.lights = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Geometry _faceName.\n         * @member {\"faceName\"|undefined} _faceName\n         * @memberof protocol.Geometry\n         * @instance\n         */\n        Object.defineProperty(Geometry.prototype, \"_faceName\", {\n            get: $util.oneOfGetter($oneOfFields = [\"faceName\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Geometry instance using the specified properties.\n         * @function create\n         * @memberof protocol.Geometry\n         * @static\n         * @param {protocol.IGeometry=} [properties] Properties to set\n         * @returns {protocol.Geometry} Geometry instance\n         */\n        Geometry.create = function create(properties) {\n            return new Geometry(properties);\n        };\n\n        /**\n         * Encodes the specified Geometry message. Does not implicitly {@link protocol.Geometry.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Geometry\n         * @static\n         * @param {protocol.IGeometry} message Geometry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Geometry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.voxel != null && Object.hasOwnProperty.call(message, \"voxel\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.voxel);\n            if (message.faceName != null && Object.hasOwnProperty.call(message, \"faceName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.faceName);\n            if (message.at != null && message.at.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.at.length; ++i)\n                    writer.int32(message.at[i]);\n                writer.ldelim();\n            }\n            if (message.positions != null && message.positions.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.positions.length; ++i)\n                    writer.float(message.positions[i]);\n                writer.ldelim();\n            }\n            if (message.uvs != null && message.uvs.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.uvs.length; ++i)\n                    writer.float(message.uvs[i]);\n                writer.ldelim();\n            }\n            if (message.indices != null && message.indices.length) {\n                writer.uint32(/* id 6, wireType 2 =*/50).fork();\n                for (var i = 0; i < message.indices.length; ++i)\n                    writer.int32(message.indices[i]);\n                writer.ldelim();\n            }\n            if (message.lights != null && message.lights.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.lights.length; ++i)\n                    writer.int32(message.lights[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Geometry message, length delimited. Does not implicitly {@link protocol.Geometry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Geometry\n         * @static\n         * @param {protocol.IGeometry} message Geometry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Geometry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Geometry message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Geometry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Geometry} Geometry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Geometry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Geometry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.voxel = reader.uint32();\n                        break;\n                    }\n                case 2: {\n                        message.faceName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        if (!(message.at && message.at.length))\n                            message.at = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.at.push(reader.int32());\n                        } else\n                            message.at.push(reader.int32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.positions && message.positions.length))\n                            message.positions = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.positions.push(reader.float());\n                        } else\n                            message.positions.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.uvs && message.uvs.length))\n                            message.uvs = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uvs.push(reader.float());\n                        } else\n                            message.uvs.push(reader.float());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.indices && message.indices.length))\n                            message.indices = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.indices.push(reader.int32());\n                        } else\n                            message.indices.push(reader.int32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.lights && message.lights.length))\n                            message.lights = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.lights.push(reader.int32());\n                        } else\n                            message.lights.push(reader.int32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Geometry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Geometry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Geometry} Geometry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Geometry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Geometry message.\n         * @function verify\n         * @memberof protocol.Geometry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Geometry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.voxel != null && message.hasOwnProperty(\"voxel\"))\n                if (!$util.isInteger(message.voxel))\n                    return \"voxel: integer expected\";\n            if (message.faceName != null && message.hasOwnProperty(\"faceName\")) {\n                properties._faceName = 1;\n                if (!$util.isString(message.faceName))\n                    return \"faceName: string expected\";\n            }\n            if (message.at != null && message.hasOwnProperty(\"at\")) {\n                if (!Array.isArray(message.at))\n                    return \"at: array expected\";\n                for (var i = 0; i < message.at.length; ++i)\n                    if (!$util.isInteger(message.at[i]))\n                        return \"at: integer[] expected\";\n            }\n            if (message.positions != null && message.hasOwnProperty(\"positions\")) {\n                if (!Array.isArray(message.positions))\n                    return \"positions: array expected\";\n                for (var i = 0; i < message.positions.length; ++i)\n                    if (typeof message.positions[i] !== \"number\")\n                        return \"positions: number[] expected\";\n            }\n            if (message.uvs != null && message.hasOwnProperty(\"uvs\")) {\n                if (!Array.isArray(message.uvs))\n                    return \"uvs: array expected\";\n                for (var i = 0; i < message.uvs.length; ++i)\n                    if (typeof message.uvs[i] !== \"number\")\n                        return \"uvs: number[] expected\";\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                if (!Array.isArray(message.indices))\n                    return \"indices: array expected\";\n                for (var i = 0; i < message.indices.length; ++i)\n                    if (!$util.isInteger(message.indices[i]))\n                        return \"indices: integer[] expected\";\n            }\n            if (message.lights != null && message.hasOwnProperty(\"lights\")) {\n                if (!Array.isArray(message.lights))\n                    return \"lights: array expected\";\n                for (var i = 0; i < message.lights.length; ++i)\n                    if (!$util.isInteger(message.lights[i]))\n                        return \"lights: integer[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Geometry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Geometry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Geometry} Geometry\n         */\n        Geometry.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Geometry)\n                return object;\n            var message = new $root.protocol.Geometry();\n            if (object.voxel != null)\n                message.voxel = object.voxel >>> 0;\n            if (object.faceName != null)\n                message.faceName = String(object.faceName);\n            if (object.at) {\n                if (!Array.isArray(object.at))\n                    throw TypeError(\".protocol.Geometry.at: array expected\");\n                message.at = [];\n                for (var i = 0; i < object.at.length; ++i)\n                    message.at[i] = object.at[i] | 0;\n            }\n            if (object.positions) {\n                if (!Array.isArray(object.positions))\n                    throw TypeError(\".protocol.Geometry.positions: array expected\");\n                message.positions = [];\n                for (var i = 0; i < object.positions.length; ++i)\n                    message.positions[i] = Number(object.positions[i]);\n            }\n            if (object.uvs) {\n                if (!Array.isArray(object.uvs))\n                    throw TypeError(\".protocol.Geometry.uvs: array expected\");\n                message.uvs = [];\n                for (var i = 0; i < object.uvs.length; ++i)\n                    message.uvs[i] = Number(object.uvs[i]);\n            }\n            if (object.indices) {\n                if (!Array.isArray(object.indices))\n                    throw TypeError(\".protocol.Geometry.indices: array expected\");\n                message.indices = [];\n                for (var i = 0; i < object.indices.length; ++i)\n                    message.indices[i] = object.indices[i] | 0;\n            }\n            if (object.lights) {\n                if (!Array.isArray(object.lights))\n                    throw TypeError(\".protocol.Geometry.lights: array expected\");\n                message.lights = [];\n                for (var i = 0; i < object.lights.length; ++i)\n                    message.lights[i] = object.lights[i] | 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Geometry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Geometry\n         * @static\n         * @param {protocol.Geometry} message Geometry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Geometry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.at = [];\n                object.positions = [];\n                object.uvs = [];\n                object.indices = [];\n                object.lights = [];\n            }\n            if (options.defaults)\n                object.voxel = 0;\n            if (message.voxel != null && message.hasOwnProperty(\"voxel\"))\n                object.voxel = message.voxel;\n            if (message.faceName != null && message.hasOwnProperty(\"faceName\")) {\n                object.faceName = message.faceName;\n                if (options.oneofs)\n                    object._faceName = \"faceName\";\n            }\n            if (message.at && message.at.length) {\n                object.at = [];\n                for (var j = 0; j < message.at.length; ++j)\n                    object.at[j] = message.at[j];\n            }\n            if (message.positions && message.positions.length) {\n                object.positions = [];\n                for (var j = 0; j < message.positions.length; ++j)\n                    object.positions[j] = options.json && !isFinite(message.positions[j]) ? String(message.positions[j]) : message.positions[j];\n            }\n            if (message.uvs && message.uvs.length) {\n                object.uvs = [];\n                for (var j = 0; j < message.uvs.length; ++j)\n                    object.uvs[j] = options.json && !isFinite(message.uvs[j]) ? String(message.uvs[j]) : message.uvs[j];\n            }\n            if (message.indices && message.indices.length) {\n                object.indices = [];\n                for (var j = 0; j < message.indices.length; ++j)\n                    object.indices[j] = message.indices[j];\n            }\n            if (message.lights && message.lights.length) {\n                object.lights = [];\n                for (var j = 0; j < message.lights.length; ++j)\n                    object.lights[j] = message.lights[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Geometry to JSON.\n         * @function toJSON\n         * @memberof protocol.Geometry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Geometry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Geometry\n         * @function getTypeUrl\n         * @memberof protocol.Geometry\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Geometry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Geometry\";\n        };\n\n        return Geometry;\n    })();\n\n    protocol.Mesh = (function() {\n\n        /**\n         * Properties of a Mesh.\n         * @memberof protocol\n         * @interface IMesh\n         * @property {number|null} [level] Mesh level\n         * @property {Array.<protocol.IGeometry>|null} [geometries] Mesh geometries\n         */\n\n        /**\n         * Constructs a new Mesh.\n         * @memberof protocol\n         * @classdesc Represents a Mesh.\n         * @implements IMesh\n         * @constructor\n         * @param {protocol.IMesh=} [properties] Properties to set\n         */\n        function Mesh(properties) {\n            this.geometries = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Mesh level.\n         * @member {number} level\n         * @memberof protocol.Mesh\n         * @instance\n         */\n        Mesh.prototype.level = 0;\n\n        /**\n         * Mesh geometries.\n         * @member {Array.<protocol.IGeometry>} geometries\n         * @memberof protocol.Mesh\n         * @instance\n         */\n        Mesh.prototype.geometries = $util.emptyArray;\n\n        /**\n         * Creates a new Mesh instance using the specified properties.\n         * @function create\n         * @memberof protocol.Mesh\n         * @static\n         * @param {protocol.IMesh=} [properties] Properties to set\n         * @returns {protocol.Mesh} Mesh instance\n         */\n        Mesh.create = function create(properties) {\n            return new Mesh(properties);\n        };\n\n        /**\n         * Encodes the specified Mesh message. Does not implicitly {@link protocol.Mesh.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Mesh\n         * @static\n         * @param {protocol.IMesh} message Mesh message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Mesh.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.level != null && Object.hasOwnProperty.call(message, \"level\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);\n            if (message.geometries != null && message.geometries.length)\n                for (var i = 0; i < message.geometries.length; ++i)\n                    $root.protocol.Geometry.encode(message.geometries[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Mesh message, length delimited. Does not implicitly {@link protocol.Mesh.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Mesh\n         * @static\n         * @param {protocol.IMesh} message Mesh message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Mesh.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Mesh message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Mesh\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Mesh} Mesh\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Mesh.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Mesh();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.level = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.geometries && message.geometries.length))\n                            message.geometries = [];\n                        message.geometries.push($root.protocol.Geometry.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Mesh message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Mesh\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Mesh} Mesh\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Mesh.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Mesh message.\n         * @function verify\n         * @memberof protocol.Mesh\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Mesh.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.level != null && message.hasOwnProperty(\"level\"))\n                if (!$util.isInteger(message.level))\n                    return \"level: integer expected\";\n            if (message.geometries != null && message.hasOwnProperty(\"geometries\")) {\n                if (!Array.isArray(message.geometries))\n                    return \"geometries: array expected\";\n                for (var i = 0; i < message.geometries.length; ++i) {\n                    var error = $root.protocol.Geometry.verify(message.geometries[i]);\n                    if (error)\n                        return \"geometries.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Mesh message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Mesh\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Mesh} Mesh\n         */\n        Mesh.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Mesh)\n                return object;\n            var message = new $root.protocol.Mesh();\n            if (object.level != null)\n                message.level = object.level | 0;\n            if (object.geometries) {\n                if (!Array.isArray(object.geometries))\n                    throw TypeError(\".protocol.Mesh.geometries: array expected\");\n                message.geometries = [];\n                for (var i = 0; i < object.geometries.length; ++i) {\n                    if (typeof object.geometries[i] !== \"object\")\n                        throw TypeError(\".protocol.Mesh.geometries: object expected\");\n                    message.geometries[i] = $root.protocol.Geometry.fromObject(object.geometries[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Mesh message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Mesh\n         * @static\n         * @param {protocol.Mesh} message Mesh\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Mesh.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.geometries = [];\n            if (options.defaults)\n                object.level = 0;\n            if (message.level != null && message.hasOwnProperty(\"level\"))\n                object.level = message.level;\n            if (message.geometries && message.geometries.length) {\n                object.geometries = [];\n                for (var j = 0; j < message.geometries.length; ++j)\n                    object.geometries[j] = $root.protocol.Geometry.toObject(message.geometries[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Mesh to JSON.\n         * @function toJSON\n         * @memberof protocol.Mesh\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Mesh.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Mesh\n         * @function getTypeUrl\n         * @memberof protocol.Mesh\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Mesh.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Mesh\";\n        };\n\n        return Mesh;\n    })();\n\n    protocol.Chunk = (function() {\n\n        /**\n         * Properties of a Chunk.\n         * @memberof protocol\n         * @interface IChunk\n         * @property {number|null} [x] Chunk x\n         * @property {number|null} [z] Chunk z\n         * @property {string|null} [id] Chunk id\n         * @property {Array.<protocol.IMesh>|null} [meshes] Chunk meshes\n         * @property {Array.<number>|null} [voxels] Chunk voxels\n         * @property {Array.<number>|null} [lights] Chunk lights\n         */\n\n        /**\n         * Constructs a new Chunk.\n         * @memberof protocol\n         * @classdesc Represents a Chunk.\n         * @implements IChunk\n         * @constructor\n         * @param {protocol.IChunk=} [properties] Properties to set\n         */\n        function Chunk(properties) {\n            this.meshes = [];\n            this.voxels = [];\n            this.lights = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Chunk x.\n         * @member {number} x\n         * @memberof protocol.Chunk\n         * @instance\n         */\n        Chunk.prototype.x = 0;\n\n        /**\n         * Chunk z.\n         * @member {number} z\n         * @memberof protocol.Chunk\n         * @instance\n         */\n        Chunk.prototype.z = 0;\n\n        /**\n         * Chunk id.\n         * @member {string} id\n         * @memberof protocol.Chunk\n         * @instance\n         */\n        Chunk.prototype.id = \"\";\n\n        /**\n         * Chunk meshes.\n         * @member {Array.<protocol.IMesh>} meshes\n         * @memberof protocol.Chunk\n         * @instance\n         */\n        Chunk.prototype.meshes = $util.emptyArray;\n\n        /**\n         * Chunk voxels.\n         * @member {Array.<number>} voxels\n         * @memberof protocol.Chunk\n         * @instance\n         */\n        Chunk.prototype.voxels = $util.emptyArray;\n\n        /**\n         * Chunk lights.\n         * @member {Array.<number>} lights\n         * @memberof protocol.Chunk\n         * @instance\n         */\n        Chunk.prototype.lights = $util.emptyArray;\n\n        /**\n         * Creates a new Chunk instance using the specified properties.\n         * @function create\n         * @memberof protocol.Chunk\n         * @static\n         * @param {protocol.IChunk=} [properties] Properties to set\n         * @returns {protocol.Chunk} Chunk instance\n         */\n        Chunk.create = function create(properties) {\n            return new Chunk(properties);\n        };\n\n        /**\n         * Encodes the specified Chunk message. Does not implicitly {@link protocol.Chunk.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Chunk\n         * @static\n         * @param {protocol.IChunk} message Chunk message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Chunk.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.x);\n            if (message.z != null && Object.hasOwnProperty.call(message, \"z\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.z);\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.id);\n            if (message.meshes != null && message.meshes.length)\n                for (var i = 0; i < message.meshes.length; ++i)\n                    $root.protocol.Mesh.encode(message.meshes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.voxels != null && message.voxels.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.voxels.length; ++i)\n                    writer.uint32(message.voxels[i]);\n                writer.ldelim();\n            }\n            if (message.lights != null && message.lights.length) {\n                writer.uint32(/* id 6, wireType 2 =*/50).fork();\n                for (var i = 0; i < message.lights.length; ++i)\n                    writer.uint32(message.lights[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Chunk message, length delimited. Does not implicitly {@link protocol.Chunk.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Chunk\n         * @static\n         * @param {protocol.IChunk} message Chunk message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Chunk.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Chunk message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Chunk\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Chunk} Chunk\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Chunk.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Chunk();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.x = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.z = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.meshes && message.meshes.length))\n                            message.meshes = [];\n                        message.meshes.push($root.protocol.Mesh.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 5: {\n                        if (!(message.voxels && message.voxels.length))\n                            message.voxels = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.voxels.push(reader.uint32());\n                        } else\n                            message.voxels.push(reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.lights && message.lights.length))\n                            message.lights = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.lights.push(reader.uint32());\n                        } else\n                            message.lights.push(reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Chunk message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Chunk\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Chunk} Chunk\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Chunk.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Chunk message.\n         * @function verify\n         * @memberof protocol.Chunk\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Chunk.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (!$util.isInteger(message.x))\n                    return \"x: integer expected\";\n            if (message.z != null && message.hasOwnProperty(\"z\"))\n                if (!$util.isInteger(message.z))\n                    return \"z: integer expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.meshes != null && message.hasOwnProperty(\"meshes\")) {\n                if (!Array.isArray(message.meshes))\n                    return \"meshes: array expected\";\n                for (var i = 0; i < message.meshes.length; ++i) {\n                    var error = $root.protocol.Mesh.verify(message.meshes[i]);\n                    if (error)\n                        return \"meshes.\" + error;\n                }\n            }\n            if (message.voxels != null && message.hasOwnProperty(\"voxels\")) {\n                if (!Array.isArray(message.voxels))\n                    return \"voxels: array expected\";\n                for (var i = 0; i < message.voxels.length; ++i)\n                    if (!$util.isInteger(message.voxels[i]))\n                        return \"voxels: integer[] expected\";\n            }\n            if (message.lights != null && message.hasOwnProperty(\"lights\")) {\n                if (!Array.isArray(message.lights))\n                    return \"lights: array expected\";\n                for (var i = 0; i < message.lights.length; ++i)\n                    if (!$util.isInteger(message.lights[i]))\n                        return \"lights: integer[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Chunk message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Chunk\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Chunk} Chunk\n         */\n        Chunk.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Chunk)\n                return object;\n            var message = new $root.protocol.Chunk();\n            if (object.x != null)\n                message.x = object.x | 0;\n            if (object.z != null)\n                message.z = object.z | 0;\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.meshes) {\n                if (!Array.isArray(object.meshes))\n                    throw TypeError(\".protocol.Chunk.meshes: array expected\");\n                message.meshes = [];\n                for (var i = 0; i < object.meshes.length; ++i) {\n                    if (typeof object.meshes[i] !== \"object\")\n                        throw TypeError(\".protocol.Chunk.meshes: object expected\");\n                    message.meshes[i] = $root.protocol.Mesh.fromObject(object.meshes[i]);\n                }\n            }\n            if (object.voxels) {\n                if (!Array.isArray(object.voxels))\n                    throw TypeError(\".protocol.Chunk.voxels: array expected\");\n                message.voxels = [];\n                for (var i = 0; i < object.voxels.length; ++i)\n                    message.voxels[i] = object.voxels[i] >>> 0;\n            }\n            if (object.lights) {\n                if (!Array.isArray(object.lights))\n                    throw TypeError(\".protocol.Chunk.lights: array expected\");\n                message.lights = [];\n                for (var i = 0; i < object.lights.length; ++i)\n                    message.lights[i] = object.lights[i] >>> 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Chunk message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Chunk\n         * @static\n         * @param {protocol.Chunk} message Chunk\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Chunk.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.meshes = [];\n                object.voxels = [];\n                object.lights = [];\n            }\n            if (options.defaults) {\n                object.x = 0;\n                object.z = 0;\n                object.id = \"\";\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = message.x;\n            if (message.z != null && message.hasOwnProperty(\"z\"))\n                object.z = message.z;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.meshes && message.meshes.length) {\n                object.meshes = [];\n                for (var j = 0; j < message.meshes.length; ++j)\n                    object.meshes[j] = $root.protocol.Mesh.toObject(message.meshes[j], options);\n            }\n            if (message.voxels && message.voxels.length) {\n                object.voxels = [];\n                for (var j = 0; j < message.voxels.length; ++j)\n                    object.voxels[j] = message.voxels[j];\n            }\n            if (message.lights && message.lights.length) {\n                object.lights = [];\n                for (var j = 0; j < message.lights.length; ++j)\n                    object.lights[j] = message.lights[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Chunk to JSON.\n         * @function toJSON\n         * @memberof protocol.Chunk\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Chunk.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Chunk\n         * @function getTypeUrl\n         * @memberof protocol.Chunk\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Chunk.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Chunk\";\n        };\n\n        return Chunk;\n    })();\n\n    protocol.Peer = (function() {\n\n        /**\n         * Properties of a Peer.\n         * @memberof protocol\n         * @interface IPeer\n         * @property {string|null} [id] Peer id\n         * @property {string|null} [username] Peer username\n         * @property {string|null} [metadata] Peer metadata\n         */\n\n        /**\n         * Constructs a new Peer.\n         * @memberof protocol\n         * @classdesc Represents a Peer.\n         * @implements IPeer\n         * @constructor\n         * @param {protocol.IPeer=} [properties] Properties to set\n         */\n        function Peer(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Peer id.\n         * @member {string} id\n         * @memberof protocol.Peer\n         * @instance\n         */\n        Peer.prototype.id = \"\";\n\n        /**\n         * Peer username.\n         * @member {string} username\n         * @memberof protocol.Peer\n         * @instance\n         */\n        Peer.prototype.username = \"\";\n\n        /**\n         * Peer metadata.\n         * @member {string} metadata\n         * @memberof protocol.Peer\n         * @instance\n         */\n        Peer.prototype.metadata = \"\";\n\n        /**\n         * Creates a new Peer instance using the specified properties.\n         * @function create\n         * @memberof protocol.Peer\n         * @static\n         * @param {protocol.IPeer=} [properties] Properties to set\n         * @returns {protocol.Peer} Peer instance\n         */\n        Peer.create = function create(properties) {\n            return new Peer(properties);\n        };\n\n        /**\n         * Encodes the specified Peer message. Does not implicitly {@link protocol.Peer.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Peer\n         * @static\n         * @param {protocol.IPeer} message Peer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Peer.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n            if (message.metadata != null && Object.hasOwnProperty.call(message, \"metadata\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.metadata);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Peer message, length delimited. Does not implicitly {@link protocol.Peer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Peer\n         * @static\n         * @param {protocol.IPeer} message Peer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Peer.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Peer message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Peer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Peer} Peer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Peer.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Peer();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.username = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.metadata = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Peer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Peer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Peer} Peer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Peer.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Peer message.\n         * @function verify\n         * @memberof protocol.Peer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Peer.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.username != null && message.hasOwnProperty(\"username\"))\n                if (!$util.isString(message.username))\n                    return \"username: string expected\";\n            if (message.metadata != null && message.hasOwnProperty(\"metadata\"))\n                if (!$util.isString(message.metadata))\n                    return \"metadata: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Peer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Peer} Peer\n         */\n        Peer.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Peer)\n                return object;\n            var message = new $root.protocol.Peer();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.username != null)\n                message.username = String(object.username);\n            if (object.metadata != null)\n                message.metadata = String(object.metadata);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Peer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Peer\n         * @static\n         * @param {protocol.Peer} message Peer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Peer.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.username = \"\";\n                object.metadata = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.username != null && message.hasOwnProperty(\"username\"))\n                object.username = message.username;\n            if (message.metadata != null && message.hasOwnProperty(\"metadata\"))\n                object.metadata = message.metadata;\n            return object;\n        };\n\n        /**\n         * Converts this Peer to JSON.\n         * @function toJSON\n         * @memberof protocol.Peer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Peer.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Peer\n         * @function getTypeUrl\n         * @memberof protocol.Peer\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Peer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Peer\";\n        };\n\n        return Peer;\n    })();\n\n    protocol.Entity = (function() {\n\n        /**\n         * Properties of an Entity.\n         * @memberof protocol\n         * @interface IEntity\n         * @property {protocol.Entity.Operation|null} [operation] Entity operation\n         * @property {string|null} [id] Entity id\n         * @property {string|null} [type] Entity type\n         * @property {string|null} [metadata] Entity metadata\n         */\n\n        /**\n         * Constructs a new Entity.\n         * @memberof protocol\n         * @classdesc Represents an Entity.\n         * @implements IEntity\n         * @constructor\n         * @param {protocol.IEntity=} [properties] Properties to set\n         */\n        function Entity(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Entity operation.\n         * @member {protocol.Entity.Operation} operation\n         * @memberof protocol.Entity\n         * @instance\n         */\n        Entity.prototype.operation = 0;\n\n        /**\n         * Entity id.\n         * @member {string} id\n         * @memberof protocol.Entity\n         * @instance\n         */\n        Entity.prototype.id = \"\";\n\n        /**\n         * Entity type.\n         * @member {string} type\n         * @memberof protocol.Entity\n         * @instance\n         */\n        Entity.prototype.type = \"\";\n\n        /**\n         * Entity metadata.\n         * @member {string} metadata\n         * @memberof protocol.Entity\n         * @instance\n         */\n        Entity.prototype.metadata = \"\";\n\n        /**\n         * Creates a new Entity instance using the specified properties.\n         * @function create\n         * @memberof protocol.Entity\n         * @static\n         * @param {protocol.IEntity=} [properties] Properties to set\n         * @returns {protocol.Entity} Entity instance\n         */\n        Entity.create = function create(properties) {\n            return new Entity(properties);\n        };\n\n        /**\n         * Encodes the specified Entity message. Does not implicitly {@link protocol.Entity.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Entity\n         * @static\n         * @param {protocol.IEntity} message Entity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Entity.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.operation != null && Object.hasOwnProperty.call(message, \"operation\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.operation);\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.metadata != null && Object.hasOwnProperty.call(message, \"metadata\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.metadata);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Entity message, length delimited. Does not implicitly {@link protocol.Entity.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Entity\n         * @static\n         * @param {protocol.IEntity} message Entity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Entity.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Entity message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Entity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Entity} Entity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Entity.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Entity();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.operation = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.type = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.metadata = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Entity message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Entity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Entity} Entity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Entity.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Entity message.\n         * @function verify\n         * @memberof protocol.Entity\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Entity.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.operation != null && message.hasOwnProperty(\"operation\"))\n                switch (message.operation) {\n                default:\n                    return \"operation: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.metadata != null && message.hasOwnProperty(\"metadata\"))\n                if (!$util.isString(message.metadata))\n                    return \"metadata: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Entity message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Entity\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Entity} Entity\n         */\n        Entity.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Entity)\n                return object;\n            var message = new $root.protocol.Entity();\n            switch (object.operation) {\n            default:\n                if (typeof object.operation === \"number\") {\n                    message.operation = object.operation;\n                    break;\n                }\n                break;\n            case \"CREATE\":\n            case 0:\n                message.operation = 0;\n                break;\n            case \"DELETE\":\n            case 1:\n                message.operation = 1;\n                break;\n            case \"UPDATE\":\n            case 2:\n                message.operation = 2;\n                break;\n            }\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.type != null)\n                message.type = String(object.type);\n            if (object.metadata != null)\n                message.metadata = String(object.metadata);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Entity message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Entity\n         * @static\n         * @param {protocol.Entity} message Entity\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Entity.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.operation = options.enums === String ? \"CREATE\" : 0;\n                object.id = \"\";\n                object.type = \"\";\n                object.metadata = \"\";\n            }\n            if (message.operation != null && message.hasOwnProperty(\"operation\"))\n                object.operation = options.enums === String ? $root.protocol.Entity.Operation[message.operation] === undefined ? message.operation : $root.protocol.Entity.Operation[message.operation] : message.operation;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.metadata != null && message.hasOwnProperty(\"metadata\"))\n                object.metadata = message.metadata;\n            return object;\n        };\n\n        /**\n         * Converts this Entity to JSON.\n         * @function toJSON\n         * @memberof protocol.Entity\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Entity.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Entity\n         * @function getTypeUrl\n         * @memberof protocol.Entity\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Entity\";\n        };\n\n        /**\n         * Operation enum.\n         * @name protocol.Entity.Operation\n         * @enum {number}\n         * @property {number} CREATE=0 CREATE value\n         * @property {number} DELETE=1 DELETE value\n         * @property {number} UPDATE=2 UPDATE value\n         */\n        Entity.Operation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"CREATE\"] = 0;\n            values[valuesById[1] = \"DELETE\"] = 1;\n            values[valuesById[2] = \"UPDATE\"] = 2;\n            return values;\n        })();\n\n        return Entity;\n    })();\n\n    protocol.Event = (function() {\n\n        /**\n         * Properties of an Event.\n         * @memberof protocol\n         * @interface IEvent\n         * @property {string|null} [name] Event name\n         * @property {string|null} [payload] Event payload\n         */\n\n        /**\n         * Constructs a new Event.\n         * @memberof protocol\n         * @classdesc Represents an Event.\n         * @implements IEvent\n         * @constructor\n         * @param {protocol.IEvent=} [properties] Properties to set\n         */\n        function Event(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Event name.\n         * @member {string} name\n         * @memberof protocol.Event\n         * @instance\n         */\n        Event.prototype.name = \"\";\n\n        /**\n         * Event payload.\n         * @member {string} payload\n         * @memberof protocol.Event\n         * @instance\n         */\n        Event.prototype.payload = \"\";\n\n        /**\n         * Creates a new Event instance using the specified properties.\n         * @function create\n         * @memberof protocol.Event\n         * @static\n         * @param {protocol.IEvent=} [properties] Properties to set\n         * @returns {protocol.Event} Event instance\n         */\n        Event.create = function create(properties) {\n            return new Event(properties);\n        };\n\n        /**\n         * Encodes the specified Event message. Does not implicitly {@link protocol.Event.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Event\n         * @static\n         * @param {protocol.IEvent} message Event message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Event.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.payload != null && Object.hasOwnProperty.call(message, \"payload\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.payload);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Event message, length delimited. Does not implicitly {@link protocol.Event.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Event\n         * @static\n         * @param {protocol.IEvent} message Event message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Event.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Event message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Event\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Event} Event\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Event.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Event();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.payload = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Event message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Event\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Event} Event\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Event.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Event message.\n         * @function verify\n         * @memberof protocol.Event\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Event.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                if (!$util.isString(message.payload))\n                    return \"payload: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Event message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Event\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Event} Event\n         */\n        Event.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Event)\n                return object;\n            var message = new $root.protocol.Event();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.payload != null)\n                message.payload = String(object.payload);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Event message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Event\n         * @static\n         * @param {protocol.Event} message Event\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Event.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.payload = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                object.payload = message.payload;\n            return object;\n        };\n\n        /**\n         * Converts this Event to JSON.\n         * @function toJSON\n         * @memberof protocol.Event\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Event.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Event\n         * @function getTypeUrl\n         * @memberof protocol.Event\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Event\";\n        };\n\n        return Event;\n    })();\n\n    protocol.Method = (function() {\n\n        /**\n         * Properties of a Method.\n         * @memberof protocol\n         * @interface IMethod\n         * @property {string|null} [name] Method name\n         * @property {string|null} [payload] Method payload\n         */\n\n        /**\n         * Constructs a new Method.\n         * @memberof protocol\n         * @classdesc Represents a Method.\n         * @implements IMethod\n         * @constructor\n         * @param {protocol.IMethod=} [properties] Properties to set\n         */\n        function Method(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Method name.\n         * @member {string} name\n         * @memberof protocol.Method\n         * @instance\n         */\n        Method.prototype.name = \"\";\n\n        /**\n         * Method payload.\n         * @member {string} payload\n         * @memberof protocol.Method\n         * @instance\n         */\n        Method.prototype.payload = \"\";\n\n        /**\n         * Creates a new Method instance using the specified properties.\n         * @function create\n         * @memberof protocol.Method\n         * @static\n         * @param {protocol.IMethod=} [properties] Properties to set\n         * @returns {protocol.Method} Method instance\n         */\n        Method.create = function create(properties) {\n            return new Method(properties);\n        };\n\n        /**\n         * Encodes the specified Method message. Does not implicitly {@link protocol.Method.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Method\n         * @static\n         * @param {protocol.IMethod} message Method message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Method.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.payload != null && Object.hasOwnProperty.call(message, \"payload\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.payload);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Method message, length delimited. Does not implicitly {@link protocol.Method.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Method\n         * @static\n         * @param {protocol.IMethod} message Method message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Method.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Method message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Method\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Method} Method\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Method.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Method();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.payload = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Method message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Method\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Method} Method\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Method.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Method message.\n         * @function verify\n         * @memberof protocol.Method\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Method.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                if (!$util.isString(message.payload))\n                    return \"payload: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Method message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Method\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Method} Method\n         */\n        Method.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Method)\n                return object;\n            var message = new $root.protocol.Method();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.payload != null)\n                message.payload = String(object.payload);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Method message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Method\n         * @static\n         * @param {protocol.Method} message Method\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Method.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.payload = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                object.payload = message.payload;\n            return object;\n        };\n\n        /**\n         * Converts this Method to JSON.\n         * @function toJSON\n         * @memberof protocol.Method\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Method.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Method\n         * @function getTypeUrl\n         * @memberof protocol.Method\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Method.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Method\";\n        };\n\n        return Method;\n    })();\n\n    protocol.Update = (function() {\n\n        /**\n         * Properties of an Update.\n         * @memberof protocol\n         * @interface IUpdate\n         * @property {number|null} [vx] Update vx\n         * @property {number|null} [vy] Update vy\n         * @property {number|null} [vz] Update vz\n         * @property {number|null} [voxel] Update voxel\n         * @property {number|null} [light] Update light\n         */\n\n        /**\n         * Constructs a new Update.\n         * @memberof protocol\n         * @classdesc Represents an Update.\n         * @implements IUpdate\n         * @constructor\n         * @param {protocol.IUpdate=} [properties] Properties to set\n         */\n        function Update(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Update vx.\n         * @member {number} vx\n         * @memberof protocol.Update\n         * @instance\n         */\n        Update.prototype.vx = 0;\n\n        /**\n         * Update vy.\n         * @member {number} vy\n         * @memberof protocol.Update\n         * @instance\n         */\n        Update.prototype.vy = 0;\n\n        /**\n         * Update vz.\n         * @member {number} vz\n         * @memberof protocol.Update\n         * @instance\n         */\n        Update.prototype.vz = 0;\n\n        /**\n         * Update voxel.\n         * @member {number} voxel\n         * @memberof protocol.Update\n         * @instance\n         */\n        Update.prototype.voxel = 0;\n\n        /**\n         * Update light.\n         * @member {number} light\n         * @memberof protocol.Update\n         * @instance\n         */\n        Update.prototype.light = 0;\n\n        /**\n         * Creates a new Update instance using the specified properties.\n         * @function create\n         * @memberof protocol.Update\n         * @static\n         * @param {protocol.IUpdate=} [properties] Properties to set\n         * @returns {protocol.Update} Update instance\n         */\n        Update.create = function create(properties) {\n            return new Update(properties);\n        };\n\n        /**\n         * Encodes the specified Update message. Does not implicitly {@link protocol.Update.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Update\n         * @static\n         * @param {protocol.IUpdate} message Update message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Update.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.vx != null && Object.hasOwnProperty.call(message, \"vx\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vx);\n            if (message.vy != null && Object.hasOwnProperty.call(message, \"vy\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.vy);\n            if (message.vz != null && Object.hasOwnProperty.call(message, \"vz\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.vz);\n            if (message.voxel != null && Object.hasOwnProperty.call(message, \"voxel\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.voxel);\n            if (message.light != null && Object.hasOwnProperty.call(message, \"light\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.light);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Update message, length delimited. Does not implicitly {@link protocol.Update.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Update\n         * @static\n         * @param {protocol.IUpdate} message Update message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Update.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Update message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Update\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Update} Update\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Update.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Update();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.vx = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.vy = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.vz = reader.int32();\n                        break;\n                    }\n                case 4: {\n                        message.voxel = reader.uint32();\n                        break;\n                    }\n                case 5: {\n                        message.light = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Update message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Update\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Update} Update\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Update.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Update message.\n         * @function verify\n         * @memberof protocol.Update\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Update.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.vx != null && message.hasOwnProperty(\"vx\"))\n                if (!$util.isInteger(message.vx))\n                    return \"vx: integer expected\";\n            if (message.vy != null && message.hasOwnProperty(\"vy\"))\n                if (!$util.isInteger(message.vy))\n                    return \"vy: integer expected\";\n            if (message.vz != null && message.hasOwnProperty(\"vz\"))\n                if (!$util.isInteger(message.vz))\n                    return \"vz: integer expected\";\n            if (message.voxel != null && message.hasOwnProperty(\"voxel\"))\n                if (!$util.isInteger(message.voxel))\n                    return \"voxel: integer expected\";\n            if (message.light != null && message.hasOwnProperty(\"light\"))\n                if (!$util.isInteger(message.light))\n                    return \"light: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Update message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Update\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Update} Update\n         */\n        Update.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Update)\n                return object;\n            var message = new $root.protocol.Update();\n            if (object.vx != null)\n                message.vx = object.vx | 0;\n            if (object.vy != null)\n                message.vy = object.vy | 0;\n            if (object.vz != null)\n                message.vz = object.vz | 0;\n            if (object.voxel != null)\n                message.voxel = object.voxel >>> 0;\n            if (object.light != null)\n                message.light = object.light >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Update message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Update\n         * @static\n         * @param {protocol.Update} message Update\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Update.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.vx = 0;\n                object.vy = 0;\n                object.vz = 0;\n                object.voxel = 0;\n                object.light = 0;\n            }\n            if (message.vx != null && message.hasOwnProperty(\"vx\"))\n                object.vx = message.vx;\n            if (message.vy != null && message.hasOwnProperty(\"vy\"))\n                object.vy = message.vy;\n            if (message.vz != null && message.hasOwnProperty(\"vz\"))\n                object.vz = message.vz;\n            if (message.voxel != null && message.hasOwnProperty(\"voxel\"))\n                object.voxel = message.voxel;\n            if (message.light != null && message.hasOwnProperty(\"light\"))\n                object.light = message.light;\n            return object;\n        };\n\n        /**\n         * Converts this Update to JSON.\n         * @function toJSON\n         * @memberof protocol.Update\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Update.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Update\n         * @function getTypeUrl\n         * @memberof protocol.Update\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Update.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Update\";\n        };\n\n        return Update;\n    })();\n\n    protocol.ChatMessage = (function() {\n\n        /**\n         * Properties of a ChatMessage.\n         * @memberof protocol\n         * @interface IChatMessage\n         * @property {string|null} [type] ChatMessage type\n         * @property {string|null} [sender] ChatMessage sender\n         * @property {string|null} [body] ChatMessage body\n         */\n\n        /**\n         * Constructs a new ChatMessage.\n         * @memberof protocol\n         * @classdesc Represents a ChatMessage.\n         * @implements IChatMessage\n         * @constructor\n         * @param {protocol.IChatMessage=} [properties] Properties to set\n         */\n        function ChatMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ChatMessage type.\n         * @member {string} type\n         * @memberof protocol.ChatMessage\n         * @instance\n         */\n        ChatMessage.prototype.type = \"\";\n\n        /**\n         * ChatMessage sender.\n         * @member {string} sender\n         * @memberof protocol.ChatMessage\n         * @instance\n         */\n        ChatMessage.prototype.sender = \"\";\n\n        /**\n         * ChatMessage body.\n         * @member {string} body\n         * @memberof protocol.ChatMessage\n         * @instance\n         */\n        ChatMessage.prototype.body = \"\";\n\n        /**\n         * Creates a new ChatMessage instance using the specified properties.\n         * @function create\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {protocol.IChatMessage=} [properties] Properties to set\n         * @returns {protocol.ChatMessage} ChatMessage instance\n         */\n        ChatMessage.create = function create(properties) {\n            return new ChatMessage(properties);\n        };\n\n        /**\n         * Encodes the specified ChatMessage message. Does not implicitly {@link protocol.ChatMessage.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {protocol.IChatMessage} message ChatMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChatMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n            if (message.sender != null && Object.hasOwnProperty.call(message, \"sender\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);\n            if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.body);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ChatMessage message, length delimited. Does not implicitly {@link protocol.ChatMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {protocol.IChatMessage} message ChatMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChatMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ChatMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.ChatMessage} ChatMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChatMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.ChatMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.type = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.sender = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.body = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ChatMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.ChatMessage} ChatMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChatMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ChatMessage message.\n         * @function verify\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ChatMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                if (!$util.isString(message.sender))\n                    return \"sender: string expected\";\n            if (message.body != null && message.hasOwnProperty(\"body\"))\n                if (!$util.isString(message.body))\n                    return \"body: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ChatMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.ChatMessage} ChatMessage\n         */\n        ChatMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.ChatMessage)\n                return object;\n            var message = new $root.protocol.ChatMessage();\n            if (object.type != null)\n                message.type = String(object.type);\n            if (object.sender != null)\n                message.sender = String(object.sender);\n            if (object.body != null)\n                message.body = String(object.body);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ChatMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {protocol.ChatMessage} message ChatMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ChatMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.type = \"\";\n                object.sender = \"\";\n                object.body = \"\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                object.sender = message.sender;\n            if (message.body != null && message.hasOwnProperty(\"body\"))\n                object.body = message.body;\n            return object;\n        };\n\n        /**\n         * Converts this ChatMessage to JSON.\n         * @function toJSON\n         * @memberof protocol.ChatMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ChatMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ChatMessage\n         * @function getTypeUrl\n         * @memberof protocol.ChatMessage\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ChatMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.ChatMessage\";\n        };\n\n        return ChatMessage;\n    })();\n\n    protocol.Message = (function() {\n\n        /**\n         * Properties of a Message.\n         * @memberof protocol\n         * @interface IMessage\n         * @property {protocol.Message.Type|null} [type] Message type\n         * @property {string|null} [json] Message json\n         * @property {string|null} [text] Message text\n         * @property {protocol.IMethod|null} [method] Message method\n         * @property {protocol.IChatMessage|null} [chat] Message chat\n         * @property {Array.<protocol.IPeer>|null} [peers] Message peers\n         * @property {Array.<protocol.IEntity>|null} [entities] Message entities\n         * @property {Array.<protocol.IChunk>|null} [chunks] Message chunks\n         * @property {Array.<protocol.IEvent>|null} [events] Message events\n         * @property {Array.<protocol.IUpdate>|null} [updates] Message updates\n         */\n\n        /**\n         * Constructs a new Message.\n         * @memberof protocol\n         * @classdesc Represents a Message.\n         * @implements IMessage\n         * @constructor\n         * @param {protocol.IMessage=} [properties] Properties to set\n         */\n        function Message(properties) {\n            this.peers = [];\n            this.entities = [];\n            this.chunks = [];\n            this.events = [];\n            this.updates = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Message type.\n         * @member {protocol.Message.Type} type\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.type = 0;\n\n        /**\n         * Message json.\n         * @member {string} json\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.json = \"\";\n\n        /**\n         * Message text.\n         * @member {string} text\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.text = \"\";\n\n        /**\n         * Message method.\n         * @member {protocol.IMethod|null|undefined} method\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.method = null;\n\n        /**\n         * Message chat.\n         * @member {protocol.IChatMessage|null|undefined} chat\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.chat = null;\n\n        /**\n         * Message peers.\n         * @member {Array.<protocol.IPeer>} peers\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.peers = $util.emptyArray;\n\n        /**\n         * Message entities.\n         * @member {Array.<protocol.IEntity>} entities\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.entities = $util.emptyArray;\n\n        /**\n         * Message chunks.\n         * @member {Array.<protocol.IChunk>} chunks\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.chunks = $util.emptyArray;\n\n        /**\n         * Message events.\n         * @member {Array.<protocol.IEvent>} events\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.events = $util.emptyArray;\n\n        /**\n         * Message updates.\n         * @member {Array.<protocol.IUpdate>} updates\n         * @memberof protocol.Message\n         * @instance\n         */\n        Message.prototype.updates = $util.emptyArray;\n\n        /**\n         * Creates a new Message instance using the specified properties.\n         * @function create\n         * @memberof protocol.Message\n         * @static\n         * @param {protocol.IMessage=} [properties] Properties to set\n         * @returns {protocol.Message} Message instance\n         */\n        Message.create = function create(properties) {\n            return new Message(properties);\n        };\n\n        /**\n         * Encodes the specified Message message. Does not implicitly {@link protocol.Message.verify|verify} messages.\n         * @function encode\n         * @memberof protocol.Message\n         * @static\n         * @param {protocol.IMessage} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.json);\n            if (message.text != null && Object.hasOwnProperty.call(message, \"text\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                $root.protocol.Method.encode(message.method, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.chat != null && Object.hasOwnProperty.call(message, \"chat\"))\n                $root.protocol.ChatMessage.encode(message.chat, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.peers != null && message.peers.length)\n                for (var i = 0; i < message.peers.length; ++i)\n                    $root.protocol.Peer.encode(message.peers[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.entities != null && message.entities.length)\n                for (var i = 0; i < message.entities.length; ++i)\n                    $root.protocol.Entity.encode(message.entities[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.chunks != null && message.chunks.length)\n                for (var i = 0; i < message.chunks.length; ++i)\n                    $root.protocol.Chunk.encode(message.chunks[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.events != null && message.events.length)\n                for (var i = 0; i < message.events.length; ++i)\n                    $root.protocol.Event.encode(message.events[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.updates != null && message.updates.length)\n                for (var i = 0; i < message.updates.length; ++i)\n                    $root.protocol.Update.encode(message.updates[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Message message, length delimited. Does not implicitly {@link protocol.Message.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof protocol.Message\n         * @static\n         * @param {protocol.IMessage} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @function decode\n         * @memberof protocol.Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {protocol.Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.protocol.Message();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.json = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.text = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.method = $root.protocol.Method.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.chat = $root.protocol.ChatMessage.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.peers && message.peers.length))\n                            message.peers = [];\n                        message.peers.push($root.protocol.Peer.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.entities && message.entities.length))\n                            message.entities = [];\n                        message.entities.push($root.protocol.Entity.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        if (!(message.chunks && message.chunks.length))\n                            message.chunks = [];\n                        message.chunks.push($root.protocol.Chunk.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 9: {\n                        if (!(message.events && message.events.length))\n                            message.events = [];\n                        message.events.push($root.protocol.Event.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        if (!(message.updates && message.updates.length))\n                            message.updates = [];\n                        message.updates.push($root.protocol.Update.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Message message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof protocol.Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {protocol.Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Message message.\n         * @function verify\n         * @memberof protocol.Message\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Message.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 14:\n                    break;\n                }\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            if (message.text != null && message.hasOwnProperty(\"text\"))\n                if (!$util.isString(message.text))\n                    return \"text: string expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\")) {\n                var error = $root.protocol.Method.verify(message.method);\n                if (error)\n                    return \"method.\" + error;\n            }\n            if (message.chat != null && message.hasOwnProperty(\"chat\")) {\n                var error = $root.protocol.ChatMessage.verify(message.chat);\n                if (error)\n                    return \"chat.\" + error;\n            }\n            if (message.peers != null && message.hasOwnProperty(\"peers\")) {\n                if (!Array.isArray(message.peers))\n                    return \"peers: array expected\";\n                for (var i = 0; i < message.peers.length; ++i) {\n                    var error = $root.protocol.Peer.verify(message.peers[i]);\n                    if (error)\n                        return \"peers.\" + error;\n                }\n            }\n            if (message.entities != null && message.hasOwnProperty(\"entities\")) {\n                if (!Array.isArray(message.entities))\n                    return \"entities: array expected\";\n                for (var i = 0; i < message.entities.length; ++i) {\n                    var error = $root.protocol.Entity.verify(message.entities[i]);\n                    if (error)\n                        return \"entities.\" + error;\n                }\n            }\n            if (message.chunks != null && message.hasOwnProperty(\"chunks\")) {\n                if (!Array.isArray(message.chunks))\n                    return \"chunks: array expected\";\n                for (var i = 0; i < message.chunks.length; ++i) {\n                    var error = $root.protocol.Chunk.verify(message.chunks[i]);\n                    if (error)\n                        return \"chunks.\" + error;\n                }\n            }\n            if (message.events != null && message.hasOwnProperty(\"events\")) {\n                if (!Array.isArray(message.events))\n                    return \"events: array expected\";\n                for (var i = 0; i < message.events.length; ++i) {\n                    var error = $root.protocol.Event.verify(message.events[i]);\n                    if (error)\n                        return \"events.\" + error;\n                }\n            }\n            if (message.updates != null && message.hasOwnProperty(\"updates\")) {\n                if (!Array.isArray(message.updates))\n                    return \"updates: array expected\";\n                for (var i = 0; i < message.updates.length; ++i) {\n                    var error = $root.protocol.Update.verify(message.updates[i]);\n                    if (error)\n                        return \"updates.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof protocol.Message\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {protocol.Message} Message\n         */\n        Message.fromObject = function fromObject(object) {\n            if (object instanceof $root.protocol.Message)\n                return object;\n            var message = new $root.protocol.Message();\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"INIT\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"JOIN\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"LEAVE\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"ERROR\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"PEER\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"ENTITY\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"LOAD\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"UNLOAD\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"UPDATE\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"METHOD\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"CHAT\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"TRANSPORT\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"EVENT\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"ACTION\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"STATS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.json != null)\n                message.json = String(object.json);\n            if (object.text != null)\n                message.text = String(object.text);\n            if (object.method != null) {\n                if (typeof object.method !== \"object\")\n                    throw TypeError(\".protocol.Message.method: object expected\");\n                message.method = $root.protocol.Method.fromObject(object.method);\n            }\n            if (object.chat != null) {\n                if (typeof object.chat !== \"object\")\n                    throw TypeError(\".protocol.Message.chat: object expected\");\n                message.chat = $root.protocol.ChatMessage.fromObject(object.chat);\n            }\n            if (object.peers) {\n                if (!Array.isArray(object.peers))\n                    throw TypeError(\".protocol.Message.peers: array expected\");\n                message.peers = [];\n                for (var i = 0; i < object.peers.length; ++i) {\n                    if (typeof object.peers[i] !== \"object\")\n                        throw TypeError(\".protocol.Message.peers: object expected\");\n                    message.peers[i] = $root.protocol.Peer.fromObject(object.peers[i]);\n                }\n            }\n            if (object.entities) {\n                if (!Array.isArray(object.entities))\n                    throw TypeError(\".protocol.Message.entities: array expected\");\n                message.entities = [];\n                for (var i = 0; i < object.entities.length; ++i) {\n                    if (typeof object.entities[i] !== \"object\")\n                        throw TypeError(\".protocol.Message.entities: object expected\");\n                    message.entities[i] = $root.protocol.Entity.fromObject(object.entities[i]);\n                }\n            }\n            if (object.chunks) {\n                if (!Array.isArray(object.chunks))\n                    throw TypeError(\".protocol.Message.chunks: array expected\");\n                message.chunks = [];\n                for (var i = 0; i < object.chunks.length; ++i) {\n                    if (typeof object.chunks[i] !== \"object\")\n                        throw TypeError(\".protocol.Message.chunks: object expected\");\n                    message.chunks[i] = $root.protocol.Chunk.fromObject(object.chunks[i]);\n                }\n            }\n            if (object.events) {\n                if (!Array.isArray(object.events))\n                    throw TypeError(\".protocol.Message.events: array expected\");\n                message.events = [];\n                for (var i = 0; i < object.events.length; ++i) {\n                    if (typeof object.events[i] !== \"object\")\n                        throw TypeError(\".protocol.Message.events: object expected\");\n                    message.events[i] = $root.protocol.Event.fromObject(object.events[i]);\n                }\n            }\n            if (object.updates) {\n                if (!Array.isArray(object.updates))\n                    throw TypeError(\".protocol.Message.updates: array expected\");\n                message.updates = [];\n                for (var i = 0; i < object.updates.length; ++i) {\n                    if (typeof object.updates[i] !== \"object\")\n                        throw TypeError(\".protocol.Message.updates: object expected\");\n                    message.updates[i] = $root.protocol.Update.fromObject(object.updates[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof protocol.Message\n         * @static\n         * @param {protocol.Message} message Message\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Message.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.peers = [];\n                object.entities = [];\n                object.chunks = [];\n                object.events = [];\n                object.updates = [];\n            }\n            if (options.defaults) {\n                object.type = options.enums === String ? \"INIT\" : 0;\n                object.json = \"\";\n                object.text = \"\";\n                object.method = null;\n                object.chat = null;\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.protocol.Message.Type[message.type] === undefined ? message.type : $root.protocol.Message.Type[message.type] : message.type;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            if (message.text != null && message.hasOwnProperty(\"text\"))\n                object.text = message.text;\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = $root.protocol.Method.toObject(message.method, options);\n            if (message.chat != null && message.hasOwnProperty(\"chat\"))\n                object.chat = $root.protocol.ChatMessage.toObject(message.chat, options);\n            if (message.peers && message.peers.length) {\n                object.peers = [];\n                for (var j = 0; j < message.peers.length; ++j)\n                    object.peers[j] = $root.protocol.Peer.toObject(message.peers[j], options);\n            }\n            if (message.entities && message.entities.length) {\n                object.entities = [];\n                for (var j = 0; j < message.entities.length; ++j)\n                    object.entities[j] = $root.protocol.Entity.toObject(message.entities[j], options);\n            }\n            if (message.chunks && message.chunks.length) {\n                object.chunks = [];\n                for (var j = 0; j < message.chunks.length; ++j)\n                    object.chunks[j] = $root.protocol.Chunk.toObject(message.chunks[j], options);\n            }\n            if (message.events && message.events.length) {\n                object.events = [];\n                for (var j = 0; j < message.events.length; ++j)\n                    object.events[j] = $root.protocol.Event.toObject(message.events[j], options);\n            }\n            if (message.updates && message.updates.length) {\n                object.updates = [];\n                for (var j = 0; j < message.updates.length; ++j)\n                    object.updates[j] = $root.protocol.Update.toObject(message.updates[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Message to JSON.\n         * @function toJSON\n         * @memberof protocol.Message\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Message.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Message\n         * @function getTypeUrl\n         * @memberof protocol.Message\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/protocol.Message\";\n        };\n\n        /**\n         * Type enum.\n         * @name protocol.Message.Type\n         * @enum {number}\n         * @property {number} INIT=0 INIT value\n         * @property {number} JOIN=1 JOIN value\n         * @property {number} LEAVE=2 LEAVE value\n         * @property {number} ERROR=3 ERROR value\n         * @property {number} PEER=4 PEER value\n         * @property {number} ENTITY=5 ENTITY value\n         * @property {number} LOAD=6 LOAD value\n         * @property {number} UNLOAD=7 UNLOAD value\n         * @property {number} UPDATE=8 UPDATE value\n         * @property {number} METHOD=9 METHOD value\n         * @property {number} CHAT=10 CHAT value\n         * @property {number} TRANSPORT=11 TRANSPORT value\n         * @property {number} EVENT=12 EVENT value\n         * @property {number} ACTION=13 ACTION value\n         * @property {number} STATS=14 STATS value\n         */\n        Message.Type = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"INIT\"] = 0;\n            values[valuesById[1] = \"JOIN\"] = 1;\n            values[valuesById[2] = \"LEAVE\"] = 2;\n            values[valuesById[3] = \"ERROR\"] = 3;\n            values[valuesById[4] = \"PEER\"] = 4;\n            values[valuesById[5] = \"ENTITY\"] = 5;\n            values[valuesById[6] = \"LOAD\"] = 6;\n            values[valuesById[7] = \"UNLOAD\"] = 7;\n            values[valuesById[8] = \"UPDATE\"] = 8;\n            values[valuesById[9] = \"METHOD\"] = 9;\n            values[valuesById[10] = \"CHAT\"] = 10;\n            values[valuesById[11] = \"TRANSPORT\"] = 11;\n            values[valuesById[12] = \"EVENT\"] = 12;\n            values[valuesById[13] = \"ACTION\"] = 13;\n            values[valuesById[14] = \"STATS\"] = 14;\n            return values;\n        })();\n\n        return Message;\n    })();\n\n    return protocol;\n})();\n\nmodule.exports = $root;\n","!function(t){\"use strict\";var y=/^[a-z]+:/,d=/[-a-z0-9]+(\\.[-a-z0-9])*:\\d+/i,v=/\\/\\/(.*?)(?::(.*?))?@/,r=/^win/i,g=/:$/,m=/^\\?/,q=/^#/,w=/(.*\\/)/,A=/^\\/{2,}/,I=/(^\\/?)/,e=/'/g,o=/%([ef][0-9a-f])%([89ab][0-9a-f])%([89ab][0-9a-f])/gi,n=/%([cd][0-9a-f])%([89ab][0-9a-f])/gi,i=/%([0-7][0-9a-f])/gi,s=/\\+/g,a=/^\\w:$/,C=/[^/#?]/;var p,S=\"undefined\"==typeof window&&\"undefined\"!=typeof global&&\"function\"==typeof require,b=!S&&t.navigator&&t.navigator.userAgent&&~t.navigator.userAgent.indexOf(\"MSIE\"),x=S?t.require:null,j={protocol:\"protocol\",host:\"hostname\",port:\"port\",path:\"pathname\",query:\"search\",hash:\"hash\"},z={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443};function E(){return S?p=p||\"file://\"+(process.platform.match(r)?\"/\":\"\")+x(\"fs\").realpathSync(\".\"):\"about:srcdoc\"===document.location.href?self.parent.document.location.href:document.location.href}function h(t,r,e){var o,n,i;r=r||E(),S?o=x(\"url\").parse(r):(o=document.createElement(\"a\")).href=r;var a,s,p=(s={path:!0,query:!0,hash:!0},(a=r)&&y.test(a)&&(s.protocol=!0,s.host=!0,d.test(a)&&(s.port=!0),v.test(a)&&(s.user=!0,s.pass=!0)),s);for(n in i=r.match(v)||[],j)p[n]?t[n]=o[j[n]]||\"\":t[n]=\"\";if(t.protocol=t.protocol.replace(g,\"\"),t.query=t.query.replace(m,\"\"),t.hash=F(t.hash.replace(q,\"\")),t.user=F(i[1]||\"\"),t.pass=F(i[2]||\"\"),t.port=z[t.protocol]==t.port||0==t.port?\"\":t.port,!p.protocol&&C.test(r.charAt(0))&&(t.path=r.split(\"?\")[0].split(\"#\")[0]),!p.protocol&&e){var h=new L(E().match(w)[0]),u=h.path.split(\"/\"),c=t.path.split(\"/\"),f=[\"protocol\",\"user\",\"pass\",\"host\",\"port\"],l=f.length;for(u.pop(),n=0;n<l;n++)t[f[n]]=h[f[n]];for(;\"..\"===c[0];)u.pop(),c.shift();t.path=(\"/\"!==r.charAt(0)?u.join(\"/\"):\"\")+\"/\"+c.join(\"/\")}t.path=t.path.replace(A,\"/\"),b&&(t.path=t.path.replace(I,\"/\")),t.paths(t.paths()),t.query=new U(t.query)}function u(t){return encodeURIComponent(t).replace(e,\"%27\")}function F(t){return(t=(t=(t=t.replace(s,\" \")).replace(o,function(t,r,e,o){var n=parseInt(r,16)-224,i=parseInt(e,16)-128;if(0==n&&i<32)return t;var a=(n<<12)+(i<<6)+(parseInt(o,16)-128);return 65535<a?t:String.fromCharCode(a)})).replace(n,function(t,r,e){var o=parseInt(r,16)-192;if(o<2)return t;var n=parseInt(e,16)-128;return String.fromCharCode((o<<6)+n)})).replace(i,function(t,r){return String.fromCharCode(parseInt(r,16))})}function U(t){for(var r=t.split(\"&\"),e=0,o=r.length;e<o;e++){var n=r[e].split(\"=\"),i=decodeURIComponent(n[0].replace(s,\" \"));if(i){var a=void 0!==n[1]?F(n[1]):null;void 0===this[i]?this[i]=a:(this[i]instanceof Array||(this[i]=[this[i]]),this[i].push(a))}}}function L(t,r){h(this,t,!r)}U.prototype.toString=function(){var t,r,e=\"\",o=u;for(t in this){var n=this[t];if(!(n instanceof Function||void 0===n))if(n instanceof Array){var i=n.length;if(!i){e+=(e?\"&\":\"\")+o(t)+\"=\";continue}for(r=0;r<i;r++){var a=n[r];void 0!==a&&(e+=e?\"&\":\"\",e+=o(t)+(null===a?\"\":\"=\"+o(a)))}}else e+=e?\"&\":\"\",e+=o(t)+(null===n?\"\":\"=\"+o(n))}return e},L.prototype.clearQuery=function(){for(var t in this.query)this.query[t]instanceof Function||delete this.query[t];return this},L.prototype.queryLength=function(){var t=0;for(var r in this.query)this.query[r]instanceof Function||t++;return t},L.prototype.isEmptyQuery=function(){return 0===this.queryLength()},L.prototype.paths=function(t){var r,e=\"\",o=0;if(t&&t.length&&t+\"\"!==t){for(this.isAbsolute()&&(e=\"/\"),r=t.length;o<r;o++)t[o]=!o&&a.test(t[o])?t[o]:u(t[o]);this.path=e+t.join(\"/\")}for(o=0,r=(t=(\"/\"===this.path.charAt(0)?this.path.slice(1):this.path).split(\"/\")).length;o<r;o++)t[o]=F(t[o]);return t},L.prototype.encode=u,L.prototype.decode=F,L.prototype.isAbsolute=function(){return this.protocol||\"/\"===this.path.charAt(0)},L.prototype.toString=function(){return(this.protocol&&this.protocol+\"://\")+(this.user&&u(this.user)+(this.pass&&\":\"+u(this.pass))+\"@\")+(this.host&&this.host)+(this.port&&\":\"+this.port)+(this.path&&this.path)+(this.query.toString()&&\"?\"+this.query)+(this.hash&&\"#\"+u(this.hash))},t[t.exports?\"exports\":\"Url\"]=L}(\"undefined\"!=typeof module&&module.exports?module:window);","import { protocol } from \"@voxelize/transport/src/protocol\";\nimport { MessageProtocol } from \"@voxelize/transport/src/types\";\nimport DOMUrl from \"domurl\";\nimport DecodeWorker from \"shared-worker:./workers/decode-worker.ts\";\n\nimport { setWorkerInterval } from \"../../libs/setWorkerInterval\";\nimport { SharedWorkerPool } from \"../../libs/shared-worker-pool\";\n\nimport { NetIntercept } from \"./intercept\";\n\nexport * from \"./intercept\";\n\nconst { Message } = protocol;\n\n/**\n * A custom WebSocket type that supports protocol buffer sending.\n */\nexport type ProtocolWS = WebSocket & {\n  /**\n   * Send a protocol buffer encoded message to the server.\n   */\n  sendEvent: (event: any) => void;\n};\n\nexport type NetworkOptions = {\n  maxPacketsPerTick: number;\n};\n\nconst defaultOptions: NetworkOptions = {\n  maxPacketsPerTick: 8,\n};\n\n/**\n * Parameters to customize the connection to a Voxelize server. For example, setting a secret\n * key to authenticate the connection with the server.\n */\nexport type NetworkConnectionOptions = {\n  /**\n   * On disconnection, the timeout to attempt to reconnect. Defaults to 5000.\n   */\n  reconnectTimeout?: number;\n\n  /**\n   * The secret to joining a server, a key that if set on the server, then must be provided to\n   * connect to the server successfully.\n   */\n  secret?: string;\n};\n\n/**\n * A network connector to the Voxelize backend. Establishes a WebSocket connection to the backend\n * server and handles the Protocol Buffer encoding and decoding.\n *\n * # Example\n * ```ts\n * const network = new VOXELIZE.Network();\n *\n * network\n *  .connect(\"ws://localhost:5000\")\n *  .then(() => {\n *    network.join(\"my-world\").then(() => {\n *      console.log(\"Joined world!\");\n *    });\n * });\n * ```\n *\n * @category Core\n */\nexport class Network {\n  public options: NetworkOptions;\n\n  /**\n   * Information about the client that is sent to the server on connection. Initialize the username\n   * through `setUsername` and the id through `setID`. If nothing is set, then the information will\n   * be generated by the server and sent back to this client.\n   *\n   * This is also the information passed into `NetIntercept` callbacks.\n   */\n  public clientInfo: {\n    /**\n     * The unique ID of the client. This can be set by `setID` **BEFORE** connecting to the server.\n     * If this is set before connection, then the ID will be used and the server will not generate\n     * a new ID for this client.\n     */\n    id: string;\n\n    /**\n     * The username of the client. This can be set by `setUsername` **BEFORE** connecting to the server.\n     * Setting this username after connecting to the server will not change anything.\n     */\n    username: string;\n  } = {\n    id: \"\",\n    username: \"\",\n  };\n\n  /**\n   * A list of network event interceptors that are called when a network event is received. You can add\n   * interceptors by calling `register` and remove them by calling `unregister`.\n   */\n  public intercepts: NetIntercept[] = [];\n\n  /**\n   * The inner WebSocket client for Voxelize, with support for protocol buffers.\n   */\n  public ws: ProtocolWS;\n\n  /**\n   * A {@link https://github.com/Mikhus/domurl | domurl Url instance} constructed with `network.options.serverURL`,\n   * representing a HTTP connection URL to the server.\n   */\n  public url: DOMUrl<{\n    [key: string]: any;\n  }>;\n\n  /**\n   * The name of the world that the client is connected to. This is only set after the connection\n   * is established.\n   */\n  public world: string;\n\n  /**\n   * A native URL instance constructed with `network.options.serverURL`,\n   * representing a WebSocket connection URL to the server.\n   */\n  public socket: URL;\n\n  /**\n   * Whether or not the network connection is established.\n   */\n  public connected = false;\n\n  /**\n   * Whether or not the client has joined a specific world on the server.\n   */\n  public joined = false;\n\n  /**\n   * A custom event listener that is called when this network instance has joined a world.\n   */\n  public onJoin: (world: string) => void;\n\n  /**\n   * A custom event listener that is called when this network instance has left a world.\n   */\n  public onLeave: (world: string) => void;\n\n  /**\n   * A custom event listener that is called when this network instance is connected to a server.\n   */\n  public onConnect: () => void;\n\n  /**\n   * A custom event listener that is called when this network instance is disconnected from a server.\n   */\n  public onDisconnect: () => void;\n\n  /**\n   * The worker pool for decoding network packets.\n   */\n  private pool = new SharedWorkerPool(DecodeWorker, {\n    maxWorker: window.navigator.hardwareConcurrency || 4,\n  });\n\n  /**\n   * To keep track of the reconnection.\n   */\n  private reconnection: any;\n\n  /**\n   * The join promise resolves when the client has joined a world,\n   * in other words when \"INIT\" type message is received.\n   */\n  private joinResolve: (value: Network) => void = null;\n\n  /**\n   * Called when an error occurs in the network connection.\n   */\n  private joinReject: (reason: string) => void = null;\n\n  private packetQueue: any[] = [];\n\n  /**\n   * Create a new network instance.\n   */\n  constructor(options: Partial<NetworkOptions> = {}) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    setWorkerInterval(() => {\n      if (!this.connected) return;\n      this.flush();\n      this.sync();\n    }, 1000 / 60);\n  }\n\n  /**\n   * Connect to a Voxelize server. Remember to set username and ID before connection if\n   * you want to specify them manually. Otherwise ID is generated by the server, and username\n   * would be \"Guest XXXXX\" where `XXXXX` is a random 5-digit number.\n   *\n   * @param serverURL The URL to the Voxelize server.\n   * @param options Parameters to customize the connection to a Voxelize server.\n   * @returns A promise that resolves when the client has connected to the server.\n   */\n  connect = async (\n    serverURL: string,\n    options: NetworkConnectionOptions = {}\n  ) => {\n    if (!serverURL) {\n      throw new Error(\"No server URL provided.\");\n    }\n\n    if (typeof serverURL !== \"string\") {\n      throw new Error(\"Server URL must be a string.\");\n    }\n\n    this.url = new DOMUrl(serverURL);\n    this.url.protocol = this.url.protocol.replace(/ws/, \"http\");\n    this.url.hash = \"\";\n\n    const socketURL = new DOMUrl(serverURL);\n    socketURL.path = \"/ws/\";\n\n    this.socket = new URL(socketURL.toString());\n    this.socket.protocol = this.socket.protocol.replace(/http/, \"ws\");\n    this.socket.hash = \"\";\n    this.socket.searchParams.set(\"secret\", options.secret || \"\");\n    this.socket.searchParams.set(\"client_id\", this.clientInfo.id || \"\");\n\n    const MAX = 10000;\n    let index = Math.floor(Math.random() * MAX).toString();\n    index =\n      new Array(MAX.toString().length - index.length).fill(\"0\").join(\"\") +\n      index;\n    this.clientInfo.username = `Guest ${index}`;\n\n    // if websocket connection already exists, disconnect it\n    if (this.ws) {\n      this.ws.onclose = null;\n      this.ws.onmessage = null;\n      this.ws.close();\n\n      if (this.reconnection) {\n        clearTimeout(this.reconnection);\n      }\n    }\n\n    return new Promise<Network>((resolve) => {\n      // initialize a websocket connection to socket\n      const ws = new WebSocket(this.socket.toString()) as ProtocolWS;\n      ws.binaryType = \"arraybuffer\";\n      // custom Protobuf event sending\n      ws.sendEvent = (event: any) => {\n        ws.send(Network.encodeSync(event));\n      };\n      ws.onopen = () => {\n        this.connected = true;\n        this.onConnect?.();\n\n        clearTimeout(this.reconnection);\n\n        resolve(this);\n      };\n      ws.onerror = console.error;\n      ws.onmessage = ({ data }) => {\n        this.packetQueue.push(data);\n      };\n      ws.onclose = () => {\n        this.connected = false;\n        this.onDisconnect?.();\n\n        // fire reconnection every \"reconnectTimeout\" ms\n        if (options.reconnectTimeout) {\n          this.reconnection = setTimeout(() => {\n            this.connect(serverURL, options);\n          }, options.reconnectTimeout);\n        }\n      };\n\n      this.ws = ws;\n    });\n  };\n\n  /**\n   * Join a world on the server.\n   *\n   * @param world The name of the world to join.\n   * @returns A promise that resolves when the client has joined the world.\n   */\n  join = async (world: string) => {\n    if (this.joined) {\n      this.leave();\n    }\n\n    this.joined = true;\n    this.world = world;\n\n    this.send({\n      type: \"JOIN\",\n      json: {\n        world,\n        username: this.clientInfo.username,\n      },\n    });\n\n    return new Promise<Network>((resolve, reject) => {\n      this.joinResolve = resolve;\n      this.joinReject = reject;\n    });\n  };\n\n  /**\n   * Leave the current world. If the client is not in a world, this method does nothing.\n   *\n   * @returns A promise that resolves when the client has left the world.\n   */\n  leave = () => {\n    if (!this.joined) {\n      return;\n    }\n\n    this.joined = false;\n\n    this.send({\n      type: \"LEAVE\",\n      text: this.world,\n    });\n  };\n\n  /**\n   * Send an `ACTION` type message to the server.\n   *\n   * @param type The type of action to perform.\n   * @param data The specific data attached to this action.\n   */\n  action = async (type: string, data?: any) => {\n    this.send({\n      type: \"ACTION\",\n      json: {\n        action: type,\n        data,\n      },\n    });\n  };\n\n  sync = () => {\n    if (!this.connected || !this.packetQueue.length || this.pool.isBusy) {\n      return;\n    }\n\n    this.decode(\n      this.packetQueue\n        .splice(\n          0,\n          Math.min(this.options.maxPacketsPerTick, this.packetQueue.length)\n        )\n        .map((buffer) => new Uint8Array(buffer))\n    ).then(async (messages) => {\n      // to simulate network latency\n      // await new Promise<void>((resolve) => setTimeout(resolve, 3000));\n      messages.forEach((message) => {\n        this.onMessage(message);\n      });\n    });\n  };\n\n  /**\n   * Gathers all the network packets from the network intercepts and sends them to the server.\n   * This method should be called at the end of each client-side game tick.\n   */\n  flush = () => {\n    this.intercepts.forEach((intercept) => {\n      if (intercept.packets && intercept.packets.length) {\n        intercept.packets\n          .splice(0, intercept.packets.length)\n          .forEach((packet) => {\n            this.send(packet);\n          });\n      }\n    });\n  };\n\n  /**\n   * Register a network intercept to the network. This is used so that one can define\n   * the reaction to the network packets received. For instance, one can define a network\n   * intercept to handle the `EVENT` type messages and perform something based on the\n   *\n   * @param intercepts One or more intercepts to add to the network.\n   * @returns The network instance itself for chaining.\n   */\n  register = (...intercepts: NetIntercept[]) => {\n    intercepts.forEach((intercept) => {\n      this.intercepts.push(intercept);\n    });\n\n    return this;\n  };\n\n  /**\n   * Unregister a network intercept from the network.\n   *\n   * @param intercepts One or more intercepts to remove from the network.\n   * @returns The network instance itself for chaining.\n   */\n  unregister = (...intercepts: NetIntercept[]) => {\n    intercepts.forEach((intercept) => {\n      const index = this.intercepts.indexOf(intercept);\n\n      if (index !== -1) {\n        this.intercepts.splice(index, 1);\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Disconnect the client from the server.\n   */\n  disconnect = () => {\n    if (!this.connected) {\n      return;\n    }\n\n    if (this.ws) {\n      this.ws.onclose = null;\n      this.ws.onmessage = null;\n      this.ws.close();\n    }\n\n    if (this.reconnection) {\n      clearTimeout(this.reconnection);\n    }\n  };\n\n  /**\n   * Send a raw network packet to the server. Must be a valid network packet, or else\n   * the server may crash.\n   *\n   * @param event The event packet to send to the server.\n   */\n  send = (event: any) => {\n    this.ws.sendEvent(event);\n  };\n\n  /**\n   * Set the client's ID. This **needs** to be called before the network has connected to the server,\n   * otherwise the client will be assigned a server-generated ID.\n   *\n   * @param id The ID of the client that is used to identify the client on server connection.\n   */\n  setID = (id: string) => {\n    this.clientInfo.id = id || \"\";\n  };\n\n  /**\n   * Set the client's username. This **needs** to be called before the network has connected to the server,\n   * otherwise the client will be assigned a `Guest XXXXX` username.\n   *\n   * @param username The username of the client that is used to identify the client on server connection.\n   */\n  setUsername = (username: string) => {\n    this.clientInfo.username = username || \" \";\n  };\n\n  /**\n   * The number of active web workers decoding network packets.\n   */\n  get concurrentWorkers() {\n    return this.pool.workingCount;\n  }\n\n  /**\n   * The number of network packets waiting to be decoded.\n   */\n  get packetQueueLength() {\n    return this.packetQueue.length;\n  }\n\n  /**\n   * The listener to protocol buffer events. Basically sends the event packets into\n   * the network intercepts.\n   */\n  private onMessage = async (message: MessageProtocol) => {\n    const { type } = message;\n\n    if (type === \"ERROR\") {\n      const { text } = message;\n      this.disconnect();\n      this.joinReject(text);\n      return;\n    }\n\n    if (type === \"INIT\") {\n      const { id } = message.json;\n\n      if (id) {\n        if (this.clientInfo.id && this.clientInfo.id !== id) {\n          throw new Error(\n            \"Something went wrong with IDs! Better check if you're passing two same ID's to the same Voxelize server.\"\n          );\n        }\n\n        this.clientInfo.id = id;\n      }\n    }\n\n    this.intercepts.forEach((intercept) => {\n      intercept.onMessage?.(message, this.clientInfo);\n    });\n\n    if (type === \"INIT\") {\n      if (!this.joinResolve) {\n        throw new Error(\"Something went wrong with joining worlds...\");\n      }\n\n      this.joinResolve(this);\n      this.onJoin?.(this.world);\n    }\n  };\n\n  /**\n   * Encode a message synchronously using the protocol buffer.\n   */\n  private static encodeSync(message: any) {\n    if (message.json) {\n      message.json = JSON.stringify(message.json);\n    }\n    message.type = Message.Type[message.type];\n    if (message.entities) {\n      message.entities.forEach(\n        (entity) => (entity.metadata = JSON.stringify(entity.metadata))\n      );\n    }\n    if (message.peers) {\n      message.peers.forEach(\n        (peer) => (peer.metadata = JSON.stringify(peer.metadata))\n      );\n    }\n    return protocol.Message.encode(protocol.Message.create(message)).finish();\n  }\n\n  /**\n   * Decode a message asynchronously by giving it to the web worker pool.\n   */\n  private decode = async (data: Uint8Array[]) => {\n    return new Promise<any>((resolve) => {\n      this.pool.addJob({\n        message: data,\n        buffers: data.map((d) => d.buffer),\n        resolve,\n      });\n    });\n  };\n}\n","import { ChatProtocol, MessageProtocol } from \"@voxelize/transport/src/types\";\n\nimport { NetIntercept } from \"./network\";\n\n/**\n * A process that gets run when a command is triggered.\n */\nexport type CommandProcessor = (rest: string) => void;\n\n/**\n * A network interceptor that gives flexible control over the chat feature of\n * the game. This also allows for custom commands to be added.\n *\n * # Example\n * ```ts\n * const chat = new VOXELIZE.Chat();\n *\n * // Listen to incoming chat messages.\n * chat.onChat = (chat: ChatMessage) => {\n *   console.log(chat);\n * };\n *\n * // Sending a chat message.\n * chat.send({\n *   type: \"CLIENT\",\n *   sender: \"Mr. Robot\",\n *   body: \"Hello world!\",\n * });\n *\n * // Register to the network.\n * network.register(chat);\n * ```\n *\n * ![Chat](/img/docs/chat.png)\n *\n * @category Core\n */\nexport class Chat implements NetIntercept {\n  /**\n   * A list of commands added by `addCommand`.\n   */\n  private commands: Map<string, CommandProcessor> = new Map();\n\n  /**\n   * An array of network packets that will be sent on `network.flush` calls.\n   *\n   * @hidden\n   */\n  public packets: MessageProtocol[] = [];\n\n  /**\n   * The symbol that is used to trigger commands.\n   */\n  private _commandSymbol: string;\n\n  /**\n   * Send a chat to the server.\n   *\n   * @param chat The chat message to send.\n   */\n  public send(chat: ChatProtocol) {\n    if (chat.body.startsWith(this._commandSymbol)) {\n      const words = chat.body\n        .substring(this._commandSymbol.length)\n        .split(\" \")\n        .filter(Boolean);\n      const trigger = words.shift();\n      const rest = words.join(\" \");\n\n      const process = this.commands.get(trigger);\n\n      if (process) {\n        process(rest.trim());\n        return;\n      }\n    }\n\n    this.packets.push({\n      type: \"CHAT\",\n      chat,\n    });\n  }\n\n  public onChat: (chat: ChatProtocol) => void;\n\n  /**\n   * Add a command to the chat system. Commands are case sensitive.\n   *\n   * @param trigger - The text to trigger the command, needs to be one single word without spaces.\n   * @param process - The process run when this command is triggered.\n   */\n  public addCommand(\n    trigger: string,\n    process: CommandProcessor,\n    aliases: string[] = []\n  ) {\n    if (this.commands.has(trigger)) {\n      throw new Error(`Command trigger already taken: ${trigger}`);\n    }\n\n    if (trigger.split(\" \").length > 1) {\n      throw new Error(\"Command trigger must be one word.\");\n    }\n\n    this.commands.set(trigger, process);\n\n    for (const alias of aliases) {\n      if (this.commands.has(alias)) {\n        console.warn(\n          `Command alias for \"${trigger}\", \"${alias}\" ignored as already taken.`\n        );\n        continue;\n      }\n\n      this.commands.set(alias, process);\n    }\n  }\n\n  /**\n   * Remove a command from the chat system. Case sensitive.\n   *\n   * @param trigger - The trigger to remove.\n   */\n  public removeCommand(trigger: string) {\n    return !!this.commands.delete(trigger);\n  }\n\n  /**\n   * The network intercept implementation for chats.\n   *\n   * DO NOT CALL THIS METHOD OR CHANGE IT UNLESS YOU KNOW WHAT YOU ARE DOING.\n   *\n   * @hidden\n   * @param message The message to intercept.\n   */\n  public onMessage = (message: MessageProtocol) => {\n    switch (message.type) {\n      case \"INIT\": {\n        const { commandSymbol } = message.json.options;\n        this._commandSymbol = commandSymbol;\n        break;\n      }\n      case \"CHAT\": {\n        const { chat } = message;\n        this.onChat?.(chat);\n        break;\n      }\n    }\n  };\n\n  /**\n   * The symbol that is used to trigger commands.\n   */\n  get commandSymbol(): string {\n    return this._commandSymbol;\n  }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { EventEmitter } from \"events\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\n/**\n * Three types of clicking for mouse input listening.\n */\nexport type ClickType = \"left\" | \"middle\" | \"right\";\n\n/**\n * The occasion that the input should be fired.\n */\nexport type InputOccasion = \"keydown\" | \"keypress\" | \"keyup\";\n\n/**\n * The specific options of the key to listen to.\n */\nexport type InputSpecifics = {\n  /**\n   * A special identifier to tag this input with. This is useful for removing specific\n   * inputs from the input listener later on.\n   */\n  identifier?: string;\n\n  /**\n   * The occasion that the input should be fired. Defaults to `keydown`.\n   */\n  occasion?: InputOccasion;\n\n  /**\n   * The type of key to check for. Defaults to `key`.\n   */\n  checkType?: \"key\" | \"code\";\n};\n\ntype ClickCallbacks = Map<\n  string,\n  { callback: (event: MouseEvent) => void; namespace: string }\n>;\ntype ScrollCallbacks = Map<\n  string,\n  {\n    up: (delta?: number, event?: WheelEvent) => void;\n    down: (delta?: number, event?: WheelEvent) => void;\n    namespace: string;\n  }\n>;\n\ntype KeyBoundItem<T extends string> = {\n  [key: string]: {\n    unbind: () => void;\n    callback: (event: KeyboardEvent) => void;\n    namespace: T | \"*\";\n  };\n};\n\n/**\n * A key and mouse binding manager for Voxelize.\n *\n * Inputs allow you to bind keys and mouse buttons to functions\n * and also gives an organized way to manage keyboard and mouse inputs using namespaces. Namespaces are used to\n * separate groups of inputs. For example, you can have a namespace for the main menu\n * and another namespace for the game. You can then bind keys and mouse buttons to functions for each namespace.\n *\n * Another use of inputs is to bind keys and mouse buttons for some built-in functionality. As of now, the following\n * requires inputs to be bound:\n * - [RigidControls.connect](/api/client/classes/RigidControls#connect): <kbd>WASD</kbd> and <kbd>Space</kbd> for movement, <kbd>Shift</kbd> for going down and <kbd>R</kbd> for sprinting.\n * - [Perspective.connect](/api/client/classes/Perspective#connect): <kbd>C</kbd> for switching between perspectives.\n *\n * You can change the above bindings by calling {@link Inputs.remap} with the corresponding input identifiers, namely\n * `RigidControls.INPUT_IDENTIFIER` and `Perspectives.INPUT_IDENTIFIER`.\n *\n * ## Example\n * ```typescript\n * // Create a new inputs manager.\n * const inputs = new VOXELIZE.Inputs();\n *\n * // Bind the space bar to a function.\n * inputs.bind(\" \", (event) => {\n *   console.log(\"Space bar pressed!\", event);\n * });\n *\n * // Bind rigid controls to the inputs manager.\n * rigidControls.connect(inputs);\n * ```\n *\n * @noInheritDoc\n * @param T The list of input namespaces. For instance, `T` could be \"menu\" and \"game\".\n * @category Core\n */\nexport class Inputs<T extends string = any> extends EventEmitter {\n  /**\n   * The namespace that the Voxelize inputs is in. Use `setNamespace` to\n   * set the namespace to something else.\n   */\n  public namespace: T | \"*\";\n\n  /**\n   * A map for click callbacks.\n   */\n  private clickCallbacks: Map<ClickType, ClickCallbacks> = new Map();\n\n  /**\n   * A map for scroll callbacks.\n   */\n  private scrollCallbacks: ScrollCallbacks = new Map();\n\n  /**\n   * A map for keydown callbacks.\n   */\n  private keyDownCallbacks: Map<string, ((event: KeyboardEvent) => void)[]> =\n    new Map();\n\n  /**\n   * A map for keyup callbacks.\n   */\n  private keyUpCallbacks: Map<string, ((event: KeyboardEvent) => void)[]> =\n    new Map();\n\n  /**\n   * A map for key press callbacks.\n   */\n  private keyPressCallbacks: Map<string, ((event: KeyboardEvent) => void)[]> =\n    new Map();\n\n  /**\n   * A map for key binds.\n   */\n  private keyBounds = new Map<string, KeyBoundItem<T>>();\n\n  /**\n   * A list of functions to unbind all inputs.\n   */\n  private unbinds: (() => void)[] = [];\n\n  /**\n   * Listen to an event emitted by the input instance. The following events are emitted:\n   * - `namespace`: Emitted when the namespace is changed.\n   *\n   * @param event An event to listen on.\n   * @param listener A listener to call when the event is emitted.\n   * @returns The input instance for chaining.\n   */\n  on(event: \"namespace\", listener: (namespace: string) => void) {\n    super.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Construct a Voxelize inputs instance.\n   */\n  constructor() {\n    super();\n\n    this.initializeKeyListeners();\n    this.initializeClickListeners();\n    this.initializeScrollListeners();\n  }\n\n  /**\n   * Add a mouse click event listener.\n   *\n   * @param type The type of click to listen for. Either \"left\", \"middle\" or \"right\".\n   * @param callback The callback to call when the click is fired, passing the MouseEvent.\n   * @param namespace The namespace to bind the click to. Defaults to \"*\", which means that the click will be fired regardless of the namespace.\n   * @returns A function to unbind the click.\n   */\n  click = (\n    type: ClickType,\n    callback: (event: MouseEvent) => void,\n    namespace: T | \"*\" = \"*\"\n  ) => {\n    const id = uuidv4();\n    this.clickCallbacks.get(type)?.set(id, { namespace, callback });\n    return () => this.clickCallbacks.get(type).delete(id);\n  };\n\n  /**\n   * Add a scroll event listener.\n   *\n   * @param up The callback to call when the scroll wheel is scrolled up.\n   * @param down The callback to call when the scroll wheel is scrolled down.\n   * @param namespace The namespace to bind the scroll to. Defaults to \"*\", which means that the scroll will be fired regardless of the namespace.\n   * @returns A function to unbind the scroll.\n   */\n  scroll = (\n    up: (delta?: number) => void,\n    down: (delta?: number) => void,\n    namespace: T | \"*\" = \"*\"\n  ) => {\n    const id = uuidv4();\n    this.scrollCallbacks.set(id, { up, down, namespace });\n    return () => this.scrollCallbacks.delete(id);\n  };\n\n  /**\n   * Bind a keyboard key to a callback.\n   *\n   * @param key The key to listen for. This checks the `event.key` or the `event.code` property.\n   * @param callback The callback to call when the key is pressed.\n   * @param namespace The namespace to bind the key to. Defaults to \"*\", which means that the key will be fired regardless of the namespace.\n   * @param specifics The specific options of the key to listen for.\n   * @returns A function to unbind the key.\n   */\n  bind = (\n    key: string,\n    callback: (event: KeyboardEvent) => void,\n    namespace: T | \"*\" = \"*\",\n    specifics: InputSpecifics = {}\n  ) => {\n    key = this.modifyKey(key);\n\n    const {\n      occasion = \"keydown\",\n      identifier = \"default\",\n      checkType = \"key\",\n    } = specifics;\n\n    const name = key + occasion;\n\n    const existing = this.keyBounds.get(name);\n    if (existing) {\n      if (existing[identifier])\n        throw new Error(\n          `Error registering input, key ${key} with checkType ${checkType}: already bound.`\n        );\n    }\n\n    const callbackWrapper = (event: KeyboardEvent) => {\n      const eventKey = checkType === \"code\" ? event.code : event.key;\n      if (eventKey.toLowerCase() === key.toLowerCase()) {\n        callback(event);\n      }\n    };\n\n    switch (occasion) {\n      case \"keydown\": {\n        this.keyDownCallbacks.set(name, [\n          ...(this.keyDownCallbacks.get(name) || []),\n          callbackWrapper,\n        ]);\n        break;\n      }\n      case \"keyup\": {\n        this.keyUpCallbacks.set(name, [\n          ...(this.keyUpCallbacks.get(name) || []),\n          callbackWrapper,\n        ]);\n        break;\n      }\n      case \"keypress\": {\n        this.keyPressCallbacks.set(name, [\n          ...(this.keyPressCallbacks.get(name) || []),\n          callbackWrapper,\n        ]);\n        break;\n      }\n    }\n\n    const bounds = this.keyBounds.get(name) || {};\n\n    const unbind = () => {\n      (\n        [\n          [\"keydown\", this.keyDownCallbacks],\n          [\"keyup\", this.keyUpCallbacks],\n          [\"keypress\", this.keyPressCallbacks],\n        ] as [string, Map<string, ((event: KeyboardEvent) => void)[]>][]\n      ).forEach(([o, map]) => {\n        if (o !== occasion) return;\n\n        const callbacks = map.get(name);\n        if (callbacks) {\n          const index = callbacks.indexOf(callbackWrapper);\n          if (index !== -1) callbacks.splice(index, 1);\n        }\n\n        // Remove key from callbacks if it is empty.\n        if (map.get(name)?.length === 0) map.delete(name);\n      });\n\n      delete bounds[identifier];\n    };\n\n    bounds[identifier] = {\n      unbind,\n      callback: callbackWrapper,\n      namespace,\n    };\n\n    this.keyBounds.set(name, bounds);\n\n    return unbind;\n  };\n\n  /**\n   * Unbind a keyboard key.\n   *\n   * @param key The key to unbind.\n   * @param specifics The specifics of the key to unbind.\n   * @returns Whether or not if the unbinding was successful.\n   */\n  unbind = (key: string, specifics: InputSpecifics = {}) => {\n    key = this.modifyKey(key);\n\n    const { occasion = \"keydown\", identifier = \"default\" } = specifics;\n\n    const name = key + occasion;\n    const bounds = (this.keyBounds.get(name) || {})[identifier];\n\n    if (bounds) {\n      const { unbind } = bounds;\n      unbind();\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Swap two keys with each other.\n   *\n   * @param keyA The first key to swap.\n   * @param keyB The second key to swap.\n   * @param specifics The specifics of the keys to swap.\n   */\n  swap = (\n    keyA: string,\n    keyB: string,\n    specifics: { occasion?: InputOccasion; identifier?: string } = {}\n  ) => {\n    keyA = this.modifyKey(keyA);\n    keyB = this.modifyKey(keyB);\n\n    const { occasion = \"keydown\", identifier = \"default\" } = specifics;\n\n    const nameA = keyA + occasion;\n    const nameB = keyB + occasion;\n    const boundsA = (this.keyBounds.get(nameA) || {})[identifier];\n    const boundsB = (this.keyBounds.get(nameB) || {})[identifier];\n\n    if (!boundsA) {\n      throw new Error(`Key ${nameA} is not bound.`);\n    } else if (!boundsB) {\n      throw new Error(`Key ${nameB} is not bound.`);\n    }\n\n    const {\n      unbind: unbindA,\n      callback: callbackA,\n      namespace: namespaceA,\n    } = boundsA;\n    const {\n      unbind: unbindB,\n      callback: callbackB,\n      namespace: namespaceB,\n    } = boundsB;\n\n    unbindA();\n    unbindB();\n    this.bind(keyB, callbackA, namespaceA, specifics);\n    this.bind(keyA, callbackB, namespaceB, specifics);\n  };\n\n  /**\n   * Remap a key to another key.\n   *\n   * @param oldKey The old key to replace.\n   * @param newKey The new key to replace the old key with.\n   * @param specifics The specifics of the keys to replace.\n   */\n  remap = (\n    oldKey: string,\n    newKey: string,\n    specifics: { occasion?: InputOccasion; identifier?: string } = {}\n  ) => {\n    oldKey = this.modifyKey(oldKey);\n\n    const { occasion = \"keydown\", identifier = \"default\" } = specifics;\n\n    const name = oldKey + occasion;\n    const bounds = (this.keyBounds.get(name) || {})[identifier];\n\n    if (!bounds) {\n      throw new Error(`Key ${name} is not bound.`);\n    }\n\n    const { unbind, callback, namespace } = bounds;\n\n    unbind();\n    this.bind(newKey, callback, namespace, specifics);\n  };\n\n  /**\n   * Set the namespace of the input instance. This emits a \"namespace\" event.\n   *\n   * @param namespace The new namespace to set.\n   */\n  setNamespace = (namespace: T) => {\n    this.namespace = namespace;\n    this.emit(\"namespace\", namespace);\n  };\n\n  /**\n   * Reset all keyboard keys by unbinding all keys.\n   */\n  reset = () => {\n    this.keyBounds.forEach((b) => Object.values(b).forEach((e) => e.unbind()));\n    this.unbinds.forEach((fn) => fn());\n  };\n\n  /**\n   * Make everything lower case.\n   */\n  private modifyKey = (key: string) => {\n    // Make first character upper case\n    return (\n      key.length > 1 ? key.charAt(0).toUpperCase() + key.slice(1) : key\n    ).toLowerCase();\n  };\n\n  /**\n   * Initialize the keyboard input listeners.\n   */\n  private initializeKeyListeners = () => {\n    const runBounds = (e: KeyboardEvent, bounds: KeyBoundItem<T>) => {\n      Object.values(bounds).forEach((bound) => {\n        const { callback, namespace } = bound;\n\n        if (namespace === \"*\" || namespace === this.namespace) {\n          callback(e);\n        }\n      });\n    };\n\n    // Handle all three types of key events while checking namespace and passing the KeyboardEvent.\n    const keyListener = (occasion: InputOccasion) => (e: KeyboardEvent) => {\n      const { key, code } = e;\n      const keyName = key.toLowerCase();\n      const codeName = code.toLowerCase();\n      const keyCombo = keyName + occasion;\n      const codeCombo = codeName + occasion;\n\n      const keyBounds = this.keyBounds.get(keyCombo);\n      const codeBounds = this.keyBounds.get(codeCombo);\n\n      if (keyBounds) runBounds(e, keyBounds);\n      if (codeBounds) runBounds(e, codeBounds);\n    };\n\n    document.addEventListener(\"keydown\", keyListener(\"keydown\"));\n    document.addEventListener(\"keyup\", keyListener(\"keyup\"));\n    document.addEventListener(\"keypress\", keyListener(\"keypress\"));\n  };\n\n  /**\n   * Initialize the mouse input listeners.\n   */\n  private initializeClickListeners = () => {\n    ([\"left\", \"middle\", \"right\"] as ClickType[]).forEach((type) =>\n      this.clickCallbacks.set(type, new Map())\n    );\n\n    const listener = (event: MouseEvent) => {\n      let callbacks: ClickCallbacks;\n\n      if (event.button === 0)\n        callbacks = this.clickCallbacks.get(\"left\") as any;\n      else if (event.button === 1)\n        callbacks = this.clickCallbacks.get(\"middle\") as any;\n      else if (event.button === 2)\n        callbacks = this.clickCallbacks.get(\"right\") as any;\n\n      callbacks.forEach(({ namespace, callback }) => {\n        if (this.namespace === namespace || namespace === \"*\") callback(event);\n      });\n    };\n\n    document.addEventListener(\"mousedown\", listener, false);\n    this.unbinds.push(() =>\n      document.removeEventListener(\"mousedown\", listener, false)\n    );\n  };\n\n  /**\n   * Initialize the mouse scroll listeners.\n   */\n  private initializeScrollListeners = () => {\n    const listener = (event: WheelEvent) => {\n      this.scrollCallbacks.forEach(({ up, down, namespace }) => {\n        if (this.namespace === namespace || namespace === \"*\") {\n          if (event.deltaY > 0) up(event.deltaY, event);\n          else if (event.deltaY < 0) down(event.deltaY, event);\n        }\n      });\n    };\n\n    document.addEventListener(\"wheel\", listener);\n    this.unbinds.push(() => document.removeEventListener(\"wheel\", listener));\n  };\n}\n","import { MessageProtocol } from \"@voxelize/transport/src/types\";\n\nimport { NetIntercept } from \"./network\";\n\n/**\n * A caller for a method on the server.\n *\n * TODO-DOC\n *\n * # Example\n * ```ts\n * const method = new VOXELIZE.Method();\n *\n * // Register the method caller with the network.\n * network.register(method);\n *\n * // Call a method on the server.\n * method.call(\"my-method\", { hello: \"world\" });\n * ```\n */\nexport class Method implements NetIntercept {\n  public packets: MessageProtocol<any, any, any, any>[] = [];\n\n  /**\n   * Create a method caller that can be used to call a method on the server.\n   *\n   * @hidden\n   */\n  constructor() {\n    // NOTHING\n  }\n\n  /**\n   * Call a defined method on the server.\n   *\n   * @param name The name of the method to call.\n   * @param payload The JSON serializable payload to send to the server.\n   */\n  call = (name: string, payload: any = {}) => {\n    this.packets.push({\n      type: \"METHOD\",\n      method: {\n        name,\n        payload: JSON.stringify(payload),\n      },\n    });\n  };\n}\n"],"names":["iota","isBuffer","require$$0","require$$1","_defineProperty","defaultOptions","maxWorker","WorkerPool","isBusy","available","length","workingCount","workers","constructor","Proto","options","queue","addJob","postMessage","process","job","push","message","buffers","worker","index","pop","resolve","shift","WORKING_COUNT","workerCallback","data","removeEventListener","unshift","setTimeout","addEventListener","i","cullPool","CullWorker","cull","array","stride","dimensions","min","max","realMin","realMax","Promise","configs","buffer","slice","alpha","color","count","noiseScale","width","height","speedFactor","lerpFactor","threshold","octaves","falloff","seed","cloudHeight","Clouds","Group","isInitialized","material","meshes","xOffset","zOffset","locatedCell","newPosition","Vector3","pool","CloudWorker","clock","Clock","reset","children","forEach","child","parent","remove","geometry","dispose","initialize","update","position","delta","Math","getDelta","clone","z","floor","x","dx","dz","abs","shiftX","shiftZ","lerp","lx","lz","arr","cell","makeCell","add","direction","mesh","userData","ndarray","Uint8Array","positions","indices","normals","BufferGeometry","setAttribute","Float32BufferAttribute","Int8BufferAttribute","setIndex","Array","from","computeBoundingBox","Mesh","setX","setY","setZ","renderOrder","_objectSpread","uFogNear","uFogFar","uFogColor","random","ShaderMaterial","transparent","vertexShader","CloudsVertexShader","fragmentShader","CloudsFragmentShader","side","FrontSide","uniforms","value","Color","uCloudColor","uCloudAlpha","toneMapped","DOMUtils","applyStyles","ele","style","Object","keys","key","attribute","isArray","e","rgba","r","g","b","a","_AABB","maxX","minX","maxY","minY","depth","maxZ","minZ","mag","sqrt","computeOffsetX","aabb","deltaX","intersection","computeOffsetY","deltaY","computeOffsetZ","deltaZ","getMin","axis","Error","setMin","getMax","setMax","translate","dy","translateAxis","setPosition","px","py","pz","intersects","touches","union","AABB","all","BlockRuleLogic","And","Or","Not","PY_ROTATION","NY_ROTATION","PX_ROTATION","NX_ROTATION","PZ_ROTATION","NZ_ROTATION","Y_ROT_SEGMENTS","Y_ROT_MAP","PI","PI_2","BlockRotation","rotateTransparency","nx","ny","nz","rot","Number","EPSILON","positive","negative","rotateNode","p","map","n","yRotation","node","yRotate","rotateY","rotateZ","rotateX","rotateAABB","min1","min2","min3","min4","max1","max2","max3","max4","justify","num","encode","yEncoded","decode","rotation","yDecoded","round","theta","sinTheta","sin","cosTheta","cos","y","ROTATION_MASK","Y_ROTATION_MASK","STAGE_MASK","BlockUtils","getBlockRotatedTransparency","block","isTransparent","getBlockEntityId","id","voxel","vx","vy","vz","extractID","insertID","extractRotation","yRot","insertRotation","extractStage","insertStage","stage","insertAll","undefined","getBlockTorchLightLevel","redLightLevel","greenLightLevel","blueLightLevel","evaluateBlockRule","rule","functions","type","offset","ox","oy","oz","voxelId","getVoxelAt","voxelRotation","getVoxelRotationAt","voxelStage","getVoxelStageAt","logic","rules","every","subRule","some","create","fromValues","normalize","dot","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","require$$35","require$$36","require$$37","require$$38","require$$39","require$$40","require$$41","require$$42","require$$43","require$$44","ChunkUtils","getChunkName","coords","concat","getVoxelName","parseChunkName","name","split","s","parseInt","scaleCoordsF","factor","result","scaled","vec3","scale","mapVoxelToChunkLocal","voxelPos","chunkSize","cx","cz","mapVoxelToChunk","coords3","mapChunkToVoxel","chunkPos","copy","mapWorldToVoxel","worldPos","LightUtils","extractSunlight","light","insertSunlight","level","extractRedLight","insertRedLight","extractGreenLight","insertGreenLight","extractBlueLight","insertBlueLight","canEnterInto","target","canEnter","source","spx","spy","spz","snx","sny","snz","tpx","tpy","tpz","tnx","tny","tnz","RED_LIGHT","GREEN_LIGHT","BLUE_LIGHT","SUNLIGHT","TWO_PI","MathUtils","digits","normalizeAngle","angle","directionToQuaternion","toQuaternion","m","Matrix4","q","Quaternion","zero","one","setFromRotationMatrix","lookAt","gap","layers","widthSegments","BOX_SIDES","BoxLayer","heightSegments","depthSegments","BoxGeometry","materials","Map","paint","art","actualSides","face","get","canvas","image","context","getContext","imageSmoothingEnabled","getDimensionFromSide","Texture","drawImage","save","fillStyle","fillRect","restore","console","warn","needsUpdate","createCanvasMaterial","document","createElement","MeshBasicMaterial","magFilter","NearestFilter","minFilter","LinearMipMapLinearFilter","wrapS","RepeatWrapping","wrapT","set","values","temp","CanvasBox","boxMaterials","boxLayers","layer","makeBoxes","newBoxLayer","drawSun","sunRadius","sunColor","beginPath","grd","createRadialGradient","addColorStop","arc","fill","closePath","rect","drawMoon","moonRadius","moonColor","phase","clip","drawStars","starCount","starColors","globalAlpha","drawCrown","gold","blue","artFunctions","dimension","transitionSpan","Sky","BackSide","uTopColor","uMiddleColor","uBottomColor","uSkyOffset","uVoidOffset","shadingData","setShadingPhases","top","middle","bottom","topColor","convertLinearToSRGB","middleColor","bottomColor","skyOffset","voidOffset","sort","start","getTopColor","getMiddleColor","getBottomColor","time","timePerDay","shadingStack","transitionTime","nextData","startTime","nextStartTime","weight","previousData","weightedTopRGB","weightedMiddleRGB","weightedBottomRGB","weightedSkyOffset","weightedVoidOffset","emptyRGB","getRGB","setRGB","createSkyShading","shadingGeometry","DodecahedronGeometry","shadingMaterial","uExponent","uExponent2","SkyVertexShader","SkyFragmentShader","depthWrite","shadingMesh","attach","frustumCulled","radius","coneRadius","coneHeight","Arrow","ArrowHelper","CylinderGeometry","cone","ColorText","text","defaultColor","splitted","RegExp","SPLITTER","filter","Boolean","includes","substring","SpriteText","Sprite","_text","generate","textHeight","_textHeight","backgroundColor","_backgroundColor","padding","_padding","borderWidth","_borderWidth","borderRadius","_borderRadius","borderColor","_borderColor","fontFace","_fontFace","fontSize","_fontSize","fontWeight","_fontWeight","strokeWidth","_strokeWidth","strokeColor","_strokeColor","SpriteMaterial","_canvas","ctx","border","relBorder","relBorderRadius","relPadding","lines","font","innerWidth","line","sumLength","measureText","innerHeight","strokeStyle","hb","lineWidth","moveTo","lineTo","stroke","cornerWidth","d","x0","x1","y0","y1","quadraticCurveTo","x2","y2","textBaseline","drawTextStroke","lineX","lineY","fillText","strokeText","texture","LinearFilter","yScale","yOffset","NameTag","depthTest","CHARACTER_SCALE","ARM_COLOR","defaultCharacterOptions","swingLerp","walkingSpeed","positionLerp","rotationLerp","idleArmSwing","defaultHeadOptions","DoubleSide","neckGap","defaultBodyOptions","defaultArmsOptions","shoulderGap","shoulderDrop","defaultLegsOptions","betweenLegsGap","Character","calculateDelta","playArmSwingAnimation","playWalkingAnimation","lerpAll","newDirection","VoxMathUtils","newBodyDirection","username","nametag","head","nameTagOptions","visible","eyeHeight","legs","body","totalHeight","bodyColor","armColor","leftArm","rightArm","legColor","leftLeg","rightLeg","headColor","faceColor","headGroup","bodyGroup","leftArmGroup","rightArmGroup","leftLegGroup","rightLegGroup","speed","extraData","onMove","onIdle","createModel","arms","p1","p2","dist","distanceTo","setFromQuaternion","quaternion","slerp","amplitude","performance","now","_objectSpreadProps","stats","onByDefault","entryStyles","entriesClass","lineStyles","lineClass","dataStyles","dataClass","showVoxelize","asyncPeriod","Debug","domElement","dataWrapper","entriesWrapper","dataEntries","registerDisplay","title","object","formatter","str","wrapper","makeDataEntry","newEntry","element","insertBefore","firstChild","setInterval","then","newValue","textContent","removeDisplay","findIndex","entry","splice","removeChild","displayTitle","newline","displayNewline","toggle","force","visibility","newVisibility","dom","requestAnimationFrame","dataEntry","classList","makeDOM","Stats","parentNode","left","zIndex","marginTop","setup","mount","appendChild","BlockOverlayEffect","Effect","opacity","overlay","old","world","camera","OverlayFragmentShader","Uniform","overlays","oldId","addOverlay","idOrName","toLowerCase","getWorldPosition","getBlockById","maxDistance","maxRadius","Shadow","GEOMETRY","MATERIAL","raycastVoxels","toArray","point","isNaN","Y_OFFSET","sub","CircleGeometry","Shadows","shadow","LightShined","list","ignored","ignore","updateObject","recursiveUpdate","Set","obj","delete","types","mat","chunk","getChunkByPosition","getLightColorAt","voxelizeLightShined","oldColor","subbedColor","colorDifference","traverse","TRANSPARENT_RENDER_ORDER","OPAQUE_RENDER_ORDER","empty","TRANSPARENT_SORT","isMesh","isChunk","aPos","bPos","aObj","bObj","aGeo","bGeo","boundingBox","getCenter","distanceToSquared","groupOrder","noop","wrapperClass","wrapperStyles","slotClass","slotHoverClass","slotFocusClass","slotSubscriptClass","slotMargin","slotPadding","slotWidth","slotHeight","slotStyles","slotSubscriptStyles","horizontalCount","verticalCount","focusFirstByDefault","activatedByDefault","zoom","perspective","scrollable","ItemSlot","itemSlots","row","col","scene","OrthographicCamera","subscriptElement","subscript","content","lightRotationOffset","getObject","setObject","triggerChange","getContent","setContent","getSubscript","setSubscript","innerText","focusedRow","focusedCol","triggerFocusChange","setZoom","far","updateCamera","setPerspective","startsWith","xFactor","yFactor","zFactor","multiplyScalar","applyClass","className","removeClass","applySubscriptClass","removeSubscriptClass","styles","applySubscriptStyles","lightPosition","applyAxisAngle","Scene","DirectionalLight","ItemSlots","renderer","activated","slotTotalWidth","slotTotalHeight","onSlotClick","onSlotUpdate","onFocusChange","callbackFunc","focusChangeCallbacks","prevSlot","nextSlot","callback","slots","animationFrame","activate","display","render","deactivate","cancelAnimationFrame","slot","setFocused","hadPrevious","getFocused","getRowColFromEvent","event","getBoundingClientRect","clientX","clientY","getSlot","connect","inputs","namespace","mouseHoverPrevRow","mouseHoverPrevCol","onmouseenter","onmousemove","cursor","onmouseleave","onmousedown","unbind","scroll","clientWidth","clientHeight","setSize","setScissorTest","clear","canvasRect","hasRendered","j","right","setViewport","setScissor","boxShadow","background","WebGLRenderer","antialias","outputColorSpace","SRGBColorSpace","merge","blockMargin","ignoreSeeThrough","ignoreFluids","Perspective","state","controls","firstPersonPosition","_state","onChangeState","bind","identifier","INPUT_IDENTIFIER","checkType","character","hud","getDistance","dir","getWorldDirection","pos","newPos","renderOnce","Portrait","animationFrameId","getSize","Vector2","rendererCanvas","globalCompositeOperation","near","setWorkerTimeout","func","timeout","TimeoutWorker","messageId","callbackWrapper","signal","onmessage","terminate","requestWorkerAnimationFrame","hasFocus","setWorkerInterval","interval","IntervalWorker","SharedWorkerPool","port","reachDistance","highlightType","highlightScale","highlightLerp","inverseDirection","highlightColor","highlightOpacity","potentialVisuals","VoxelInteract","lookingAt","getBlockAt","active","potential","newTargetScale","newTargetPosition","targetGroup","potentialGroup","potentialArrow","yRotArrow","objPos","objDir","normal","newTarget","newLookingID","isDynamic","dynamicFn","dynamicPatterns","aabbs","getBlockAABBsForDynamicPatterns","targetVoxel","tx","ty","tz","atan2","normalized","Infinity","closest","closestA","setDirection","w","dim","box","ARM_POSITION","THREE","ARM_QUATERION","setFromEuler","Euler","BLOCK_POSITION","BLOCK_QUATERNION","setFromAxisAngle","armMesh","armPosition","armQuaternion","blockPosition","blockQuaternion","Hud","mixer","armSwingClip","blockSwingClip","blockPlaceClip","swingAnimation","placeAnimation","unbindLeftClick","click","playSwing","unbindRightClick","playPlace","setMesh","animate","setArmMesh","setBlockMesh","multiply","AnimationMixer","clipAction","setLoop","LoopOnce","clampWhenFinished","generateSwingClip","pInitial","qInitial","timestamps","pMid","pMid2","pMid3","pMid4","positionKF","VectorKeyframeTrack","qMid","qMid2","qMid3","qMid4","quaternionKF","QuaternionKeyframeTrack","AnimationClip","generatePlaceClip","play","emptyQ","emptyP","countSelf","updateChildren","Peers","setOwnPeer","peer","ownPeer","setOwnUsername","ownUsername","packInfo","applyQuaternion","getWorldQuaternion","ownID","metadata","info","onPeerUpdate","peers","packets","createPeer","onPeerJoin","onPeerLeave","onMessage","getPeerById","internalOnJoin","json","getObjectByName","newPeer","encodeObjectToStruct","seenObjects","encodeStructValue","convertedObject","fields","hasOwnProperty","nullValue","numberValue","stringValue","boolValue","listValue","v","has","structValue","Events","events","handle","payload","handler","on","emit","Entity","entId","onCreate","onUpdate","onDelete","Entities","setClass","entity","entities","operation","createEntityOfType","EventEmitter","eventsModule","c","bx","bz","sc","cc","out","defaultControlState","heading","running","jumping","sprinting","crouching","jumpCount","isJumping","currentJumpTime","sensitivity","minPolarAngle","maxPolarAngle","initialPosition","initialDirection","stepLerp","bodyWidth","bodyHeight","bodyDepth","maxSpeed","moveForce","responsiveness","runningFriction","standingFriction","flySpeed","flyForce","flyImpulse","flyInertia","sprintFactor","crouchFactor","alwaysSprint","airMoveMult","fluidPushForce","jumpImpulse","jumpForce","jumpTime","airJumps","stepHeight","RigidControls","listener","ghostMode","flyMode","gravityMultiplier","getPosition","isLocked","movements","up","down","front","back","sprint","lockCallback","unlockCallback","euler","vector","justUnlocked","applyForce","applyImpulse","cameraPosition","moveRigidBody","updateRigidBody","unbinds","mouseMoveHandler","onMouseMove","pointerLockChangeHandler","preventDefault","onPointerlockChange","pointerLockErrorHandler","onPointerlockError","documentClickHandler","onDocumentClick","ownerDocument","keyMappings","KeyW","KeyA","KeyS","KeyD","Space","ShiftLeft","KeyR","entries","code","movement","occasion","getDirection","lock","requestPointerLock","unlock","exitPointerLock","teleport","teleportToTop","maxHeight","getMaxHeightAt","addChunkInitListener","vec","resetMovements","toggleGhostMode","avgX","avgY","avgZ","toggleFly","isFlying","setFromUnitVectors","moveForward","distance","setFromMatrixColumn","matrix","crossVectors","addScaledVector","moveRight","attachCharacter","newLerpFactor","attachHud","fb","rl","forwardX","forwardZ","sideX","sideZ","totalX","totalZ","atRestY","dt","onGround","canjump","jf","velocity","ratioInFluid","pushLen","canPush","pushAmt","friction","movementX","movementY","pointerLockElement","onLock","onUnlock","error","physics","addBody","onStep","newAABB","stepTimeout","clearTimeout","RigidBody","atRestX","resting","atRestZ","mass","restitution","onCollide","inFluid","forces","impulses","sleepFrameCount","markActive","f","airDrag","fluidDrag","lineToPlane","unit","ux","uy","uz","NdotU","between","sweepAABB","self","other","mx","my","mz","mhx","mhy","mhz","h","sweep","getVoxels","maxIterations","vx2","vz2","vy2","AABBs","collision","Engine","leftover","approxEquals","_Engine","getVoxel","testFluid","bodies","removeBody","indexOf","noGravity","gravity","iterateBody","oldResting","localNoGrav","isBodyAsleep","applyFluidForces","dv","applyFrictionByAxis","drag","mult","tmpBox","processCollisions","tryAutoStepping","impacts","minBounceImpulse","vsq","submerged","cy","fluidLevel","heightInFluid","vol","displaced","fluidDensity","dvel","restDir","vNormal","lateralVel","vCurr","dvMax","scalar","_","oldBox","xBlocked","zBlocked","targetPos","vox","maxStep","yDist","upVec","collided","tmpResting","isResting","gMult","sleepVec","duration","frames","raycastAABB","origin","t1","t2","t3","t4","t5","t6","tMin","tMinAxis","tMax","tMaxAxis","raycast","ds","t","ix","iy","iz","stepX","stepY","stepZ","txDelta","tyDelta","tzDelta","xDist","zDist","txMax","tyMax","tzMax","hit","RawChunk","serialize","voxels","lights","deserialize","byteLength","Uint32Array","setData","getRawValue","contains","ly","toLocal","setRawValue","val","getRawLight","setRawLight","setVoxel","getVoxelRotation","setVoxelRotation","getVoxelStage","setVoxelStage","getRedLight","getLocalRedLight","setRedLight","setLocalRedLight","getGreenLight","getLocalGreenLight","setGreenLight","setLocalGreenLight","getBlueLight","getLocalBlueLight","setBlueLight","setLocalBlueLight","getTorchLight","setTorchLight","getSunlight","maxLightLevel","getLocalSunlight","setSunlight","setLocalSunlight","isReady","size","Chunk","subMesh","added","isDirty","group","Chunks","fogColor","fogNear","fogFar","ao","Vector4","minLightLevel","sunlightIntensity","lightIntensityAdjustment","requested","toAdd","toRequest","toRequestSet","loaded","toProcess","toProcessSet","toUpdate","toEmit","Loader","textures","images","audioBuffers","progress","manager","LoadingManager","textureLoader","TextureLoader","audioLoader","AudioLoader","assetPromises","audioCallbacks","loadGifImages","onLoaded","promise","run","response","fetch","blob","arrayBuffer","intArray","reader","GifReader","frameInfo","numFrames","k","ImageData","decodeAndBlitFrameRGBA","putImageData","actual","Image","src","toDataURL","loadTexture","load","loadImage","reject","crossOrigin","onerror","onload","getTexture","getGifTexture","loadAudioBuffer","resolveOuter","loadAudios","onProgress","total","listenerCallback","window","Registry","JSON","parse","stringify","blocksByName","blocksById","nameMap","idMap","registry","DEFAULT_CHUNK_SHADERS","vertex","ShaderLib","basic","replace","fragment","customShaders","sway","rooted","toFixed","AtlasTexture","CanvasTexture","drawImageToRange","range","clearRect","startU","endV","image2","canvasWidth","canvasHeight","atlasOffset","atlasRatio","atlasMargin","isColor","getHexString","registerAnimation","keyframes","fadeFrames","animation","FaceAnimation","timer","keyframe","countPerSide","nextIndex","nextKeyframe","fade","fraction","animations","makeCanvasPowerOfTwo","newCanvas","setCanvas","oldWidth","oldHeight","newWidth","pow","log","newHeight","makeUnknownImage","color1","color2","textAlign","makeUnknownTexture","generateMipmaps","colorSpace","ClampToEdgeWrapping","unknown","VOXEL_NEIGHBORS","maxChunkRequestsPerUpdate","maxProcessesPerUpdate","maxUpdatesPerUpdate","maxLightsUpdateTime","maxMeshesPerUpdate","shouldGenerateChunkMeshes","chunkRerequestInterval","defaultRenderRadius","textureUnitDimension","chunkLoadExponent","skyOptions","cloudsOptions","chunkUniformsOverwrite","sunlightStartTimeFrac","sunlightEndTimeFrac","sunlightChangeSpan","timeForceThreshold","statsSyncInterval","World","meshChunkLocally","neighbors","chunks","getChunkByCoords","centerChunk","heightPerSubChunk","subChunks","subChunkMin","subChunkMax","chunksData","arrayBuffers","chunkData","chunkArrayBuffers","geometries","meshWorkerPool","buildChunkMesh","applyBlockTexture","faceNames","checkIsInitialized","getBlockOf","blockFaces","getBlockFacesByFaceNames","loader","isolated","getBlockFaceMaterial","independent","HTMLImageElement","getStyle","atlas","getIsolatedBlockMaterialAt","faceName","defaultDimension","applyBlockTextureAt","faces","isolatedMat","makeShaderMaterial","isSeeThrough","makeChunkMaterialKey","applyBlockTextures","applyBlockFrames","realKeyframes","applyBlockGif","endsWith","setResolutionOf","resolution","join","complete","newXResolution","newYResolution","newCtx","test","fn","getChunkByName","setVoxelAt","trackChunkAt","setVoxelRotationAt","getSunlightAt","setSunlightAt","getTorchLightAt","setTorchLightAt","sunlight","redLight","greenLight","blueLight","isEmpty","getPreviousValueAt","oldBlocks","getBlockByName","getBlockEntityDataAt","voxelName","blockEntitiesMap","setBlockEntityDataAt","method","getChunkStatus","isRequested","isLoaded","isProcessing","isToRequest","isolatedFaces","independentFaces","isWithinWorld","minChunk","maxChunk","isChunkInView","center","renderRadius","det","floodLight","startCX","startCZ","endCX","endCZ","isSunlight","sourceBlock","sourceTransparency","nvy","nvx","nvz","ncx","ncz","nextVoxel","nBlock","nTransparency","nextLevel","lightReduce","removeLight","nVoxel","nl","initialData","blocks","_time","lowerName","loadMaterials","registryData","initialEntities","handleEntities","doesTickTime","startOverall","startMaintainChunks","maintainChunks","startRequestChunks","requestChunks","startProcessChunks","processChunks","startUpdatePhysics","updatePhysics","startUpdateUniforms","updateUniforms","startUpdateSkyAndClouds","updateSkyAndClouds","startEmitServerUpdates","emitServerUpdates","updates","localRotation","updateVoxel","_renderRadius","_deleteRadius","deleteRadius","ratio","hasDirection","angleThreshold","centerX","centerZ","renderRadiusBounded","renderRadiusSquared","chunkName","chunkCoords","toRequestArray","ad","bd","ax","az","triggerInitListener","listeners","chunkInitializeListeners","deleted","tempToRequest","filteredTempToRequest","tempToProcess","filteredToProcess","triggerBlockUpdateListeners","oldValue","blockUpdateListeners","attemptBlockCache","newVal","oldVal","sky","clouds","sunlightStartTime","sunlightEndTime","sunlightChangeSpanTime","cloudColor","cloudColorHSL","getHSL","setHSL","ThreeMathUtils","clamp","geo","at","uvs","BufferAttribute","find","isolatedMaterial","endU","startV","updateMatrix","matrixAutoUpdate","matrixWorldAutoUpdate","setupComponents","PhysicsEngine","isPassable","isFluid","setupUniforms","perSide","ceil","make","totalFaces","reduce","acc","independentFacesCount","independentMat","independentKey","isTrackingChunks","lcx","lcz","subChunkHeight","chunkCoordsList","levels","existingChunksTrackerSet","chunksTracker","tracker","action","beforeInit","blockEntityUpdateListeners","navigator","MeshWorker","hardwareConcurrency","addBlockUpdateListener","addBlockEntityUpdateListener","ignorePassables","ignoreList","wx","wy","wz","getBlockAABBsByIdAt","getBlockAABBsAt","dynamicPattern","part","parts","patternsMatched","updateVoxels","voxelUpdates","currId","currRot","yRotatable","processClientUpdates","makeBlockMesh","separateFaces","crumbs","faceScale","corners","chunkMat","matOptions","MeshStandardMaterial","ndx","uv","computeVertexNormals","customizeMaterialShaders","customizeBlockDynamic","originalData","processLightUpdates","processStartTime","redFlood","greenFlood","blueFlood","sunFlood","processedUpdates","currentBlock","currentRotation","currentTransparency","updatedBlock","updatedRotation","updatedTransparency","rotatable","isOpaque","removeCount","lightData","sourceLevel","nLevel","isLight","redLevel","greenLevel","blueLevel","processUpdatesInIdleTime","remainingUpdates","processDirtyChunks","dirtyChunks","raw","chunksUniforms","vertexColors","UniformsUtils","uLightIntensityAdjustment","uSunlightIntensity","uAOTable","uMinLightLevel","uTime","defineProperty","renderStage","parseFloat","LongBits","util","global","this","Writer","BufferWriter","utf8","Reader","BufferReader","$protobuf","$Reader","$Writer","$util","$root","roots","protocol","Geometry","properties","prototype","emptyArray","$oneOfFields","oneOfGetter","oneOfSetter","writer","call","uint32","string","fork","int32","ldelim","float","encodeDelimited","end","len","tag","end2","skipType","decodeDelimited","verify","isInteger","isString","fromObject","String","TypeError","toObject","arrays","defaults","oneofs","_faceName","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","Peer","enums","Operation","valuesById","Event","Method","Update","ChatMessage","sender","Message","chat","Type","require","maxPacketsPerTick","Network","concurrentWorkers","packetQueueLength","packetQueue","encodeSync","finish","clientInfo","intercepts","ws","url","socket","connected","joined","onJoin","onLeave","onConnect","onDisconnect","DecodeWorker","reconnection","joinResolve","joinReject","serverURL","DOMUrl","hash","socketURL","path","URL","toString","searchParams","secret","MAX","onclose","close","WebSocket","binaryType","sendEvent","send","onopen","reconnectTimeout","leave","sync","messages","flush","intercept","packet","register","unregister","disconnect","setID","setUsername","Chat","_commandSymbol","words","trigger","rest","commands","trim","addCommand","aliases","alias","removeCommand","commandSymbol","onChat","Inputs","clickCallbacks","scrollCallbacks","keyDownCallbacks","keyUpCallbacks","keyPressCallbacks","keyBounds","uuidv4","specifics","modifyKey","existing","eventKey","bounds","o","callbacks","swap","keyA","keyB","nameA","nameB","boundsA","boundsB","unbindA","callbackA","namespaceA","unbindB","callbackB","namespaceB","remap","oldKey","newKey","setNamespace","charAt","toUpperCase","initializeKeyListeners","runBounds","bound","keyListener","keyName","codeName","keyCombo","codeCombo","codeBounds","initializeClickListeners","button","initializeScrollListeners"],"mappings":"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,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,KAAK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"}