import { CanvasTexture, Color, Texture } from "three";
import { UV } from "./uv";
/**
 * A texture atlas is a collection of textures that are packed into a single texture.
 * This is useful for reducing the number of draw calls required to render a scene, since
 * all block textures can be rendered with a single draw call.
 *
 * By default, the texture atlas creates an additional border around each texture to prevent
 * texture bleeding.
 *
 * ![Texture bleeding](/img/docs/texture-bleeding.png)
 *
 * @noInheritDoc
 */
export declare class AtlasTexture extends CanvasTexture {
    /**
     * The number of textures per side of the texture atlas
     */
    countPerSide: number;
    /**
     * Since the texture atlas is a square, the dimension is the length of one side.
     */
    dimension: number;
    /**
     * The canvas that is used to generate the texture this.
     */
    canvas: HTMLCanvasElement;
    /**
     * The margin between each block texture in the this.
     */
    atlasMargin: number;
    /**
     * The offset of each block's texture to the end of its border.
     */
    atlasOffset: number;
    /**
     * The ratio of the texture on the atlas to the original texture.
     */
    atlasRatio: number;
    /**
     * The list of block animations that are being used by this texture atlas.
     */
    animations: {
        animation: FaceAnimation;
        timer: any;
    }[];
    /**
     * Create a new texture this.
     *
     * @param textureMap A map that points a side name to a texture or color.
     * @param ranges The ranges on the texture atlas generated by the server.
     * @param options The options used to create the texture this.
     * @returns The texture atlas generated.
     */
    constructor(countPerSide: number, dimension: number, canvas?: HTMLCanvasElement);
    /**
     * Draw a texture to a range on the texture atlas.
     *
     * @param range The range on the texture atlas to draw the texture to.
     * @param image The texture to draw to the range.
     */
    drawImageToRange(range: UV, image: typeof Image | HTMLImageElement | HTMLCanvasElement | Color | Texture, clearRect?: boolean, opacity?: number): void;
    registerAnimation(range: UV, keyframes: [number, Color | HTMLImageElement][], fadeFrames?: number): void;
    private makeCanvasPowerOfTwo;
    static makeUnknownImage(dimension: number, color1?: string, color2?: string): HTMLCanvasElement;
    static makeUnknownTexture(dimension: number): CanvasTexture;
}
/**
 * The animation data that is used internally in an atlas texture. This holds the data and will be used to draw on the texture atlas.
 */
export declare class FaceAnimation {
    /**
     * The range of the texture atlas that this animation uses.
     */
    range: UV;
    /**
     * The keyframes of the animation. This will be queried and drawn to the
     * texture atlas.
     */
    keyframes: [number, HTMLImageElement | Color][];
    /**
     * The fading duration between each keyframe in milliseconds.
     */
    fadeFrames: number;
    /**
     * Create a new face animation. This holds the data and will be used to draw on the texture atlas.
     *
     * @param range The range of the texture atlas that this animation uses.
     * @param keyframes The keyframes of the animation. This will be queried and drawn to the texture atlas.
     * @param fadeFrames The fading duration between each keyframe in milliseconds.
     */
    constructor(range: UV, keyframes: [number, HTMLImageElement | Color][], fadeFrames?: number);
}
//# sourceMappingURL=textures.d.ts.map