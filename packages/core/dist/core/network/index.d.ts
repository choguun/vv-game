import DOMUrl from "domurl";
import { NetIntercept } from "./intercept";
export * from "./intercept";
/**
 * A custom WebSocket type that supports protocol buffer sending.
 */
export type ProtocolWS = WebSocket & {
    /**
     * Send a protocol buffer encoded message to the server.
     */
    sendEvent: (event: any) => void;
};
export type NetworkOptions = {
    maxPacketsPerTick: number;
};
/**
 * Parameters to customize the connection to a Voxelize server. For example, setting a secret
 * key to authenticate the connection with the server.
 */
export type NetworkConnectionOptions = {
    /**
     * On disconnection, the timeout to attempt to reconnect. Defaults to 5000.
     */
    reconnectTimeout?: number;
    /**
     * The secret to joining a server, a key that if set on the server, then must be provided to
     * connect to the server successfully.
     */
    secret?: string;
};
/**
 * A network connector to the Voxelize backend. Establishes a WebSocket connection to the backend
 * server and handles the Protocol Buffer encoding and decoding.
 *
 * # Example
 * ```ts
 * const network = new VOXELIZE.Network();
 *
 * network
 *  .connect("ws://localhost:5000")
 *  .then(() => {
 *    network.join("my-world").then(() => {
 *      console.log("Joined world!");
 *    });
 * });
 * ```
 *
 * @category Core
 */
export declare class Network {
    options: NetworkOptions;
    /**
     * Information about the client that is sent to the server on connection. Initialize the username
     * through `setUsername` and the id through `setID`. If nothing is set, then the information will
     * be generated by the server and sent back to this client.
     *
     * This is also the information passed into `NetIntercept` callbacks.
     */
    clientInfo: {
        /**
         * The unique ID of the client. This can be set by `setID` **BEFORE** connecting to the server.
         * If this is set before connection, then the ID will be used and the server will not generate
         * a new ID for this client.
         */
        id: string;
        /**
         * The username of the client. This can be set by `setUsername` **BEFORE** connecting to the server.
         * Setting this username after connecting to the server will not change anything.
         */
        username: string;
    };
    /**
     * A list of network event interceptors that are called when a network event is received. You can add
     * interceptors by calling `register` and remove them by calling `unregister`.
     */
    intercepts: NetIntercept[];
    /**
     * The inner WebSocket client for Voxelize, with support for protocol buffers.
     */
    ws: ProtocolWS;
    /**
     * A {@link https://github.com/Mikhus/domurl | domurl Url instance} constructed with `network.options.serverURL`,
     * representing a HTTP connection URL to the server.
     */
    url: DOMUrl<{
        [key: string]: any;
    }>;
    /**
     * The name of the world that the client is connected to. This is only set after the connection
     * is established.
     */
    world: string;
    /**
     * A native URL instance constructed with `network.options.serverURL`,
     * representing a WebSocket connection URL to the server.
     */
    socket: URL;
    /**
     * Whether or not the network connection is established.
     */
    connected: boolean;
    /**
     * Whether or not the client has joined a specific world on the server.
     */
    joined: boolean;
    /**
     * A custom event listener that is called when this network instance has joined a world.
     */
    onJoin: (world: string) => void;
    /**
     * A custom event listener that is called when this network instance has left a world.
     */
    onLeave: (world: string) => void;
    /**
     * A custom event listener that is called when this network instance is connected to a server.
     */
    onConnect: () => void;
    /**
     * A custom event listener that is called when this network instance is disconnected from a server.
     */
    onDisconnect: () => void;
    /**
     * The worker pool for decoding network packets.
     */
    private pool;
    /**
     * To keep track of the reconnection.
     */
    private reconnection;
    /**
     * The join promise resolves when the client has joined a world,
     * in other words when "INIT" type message is received.
     */
    private joinResolve;
    /**
     * Called when an error occurs in the network connection.
     */
    private joinReject;
    private packetQueue;
    /**
     * Create a new network instance.
     */
    constructor(options?: Partial<NetworkOptions>);
    /**
     * Connect to a Voxelize server. Remember to set username and ID before connection if
     * you want to specify them manually. Otherwise ID is generated by the server, and username
     * would be "Guest XXXXX" where `XXXXX` is a random 5-digit number.
     *
     * @param serverURL The URL to the Voxelize server.
     * @param options Parameters to customize the connection to a Voxelize server.
     * @returns A promise that resolves when the client has connected to the server.
     */
    connect: (serverURL: string, options?: NetworkConnectionOptions) => Promise<Network>;
    /**
     * Join a world on the server.
     *
     * @param world The name of the world to join.
     * @returns A promise that resolves when the client has joined the world.
     */
    join: (world: string) => Promise<Network>;
    /**
     * Leave the current world. If the client is not in a world, this method does nothing.
     *
     * @returns A promise that resolves when the client has left the world.
     */
    leave: () => void;
    /**
     * Send an `ACTION` type message to the server.
     *
     * @param type The type of action to perform.
     * @param data The specific data attached to this action.
     */
    action: (type: string, data?: any) => Promise<void>;
    sync: () => void;
    /**
     * Gathers all the network packets from the network intercepts and sends them to the server.
     * This method should be called at the end of each client-side game tick.
     */
    flush: () => void;
    /**
     * Register a network intercept to the network. This is used so that one can define
     * the reaction to the network packets received. For instance, one can define a network
     * intercept to handle the `EVENT` type messages and perform something based on the
     *
     * @param intercepts One or more intercepts to add to the network.
     * @returns The network instance itself for chaining.
     */
    register: (...intercepts: NetIntercept[]) => this;
    /**
     * Unregister a network intercept from the network.
     *
     * @param intercepts One or more intercepts to remove from the network.
     * @returns The network instance itself for chaining.
     */
    unregister: (...intercepts: NetIntercept[]) => this;
    /**
     * Disconnect the client from the server.
     */
    disconnect: () => void;
    /**
     * Send a raw network packet to the server. Must be a valid network packet, or else
     * the server may crash.
     *
     * @param event The event packet to send to the server.
     */
    send: (event: any) => void;
    /**
     * Set the client's ID. This **needs** to be called before the network has connected to the server,
     * otherwise the client will be assigned a server-generated ID.
     *
     * @param id The ID of the client that is used to identify the client on server connection.
     */
    setID: (id: string) => void;
    /**
     * Set the client's username. This **needs** to be called before the network has connected to the server,
     * otherwise the client will be assigned a `Guest XXXXX` username.
     *
     * @param username The username of the client that is used to identify the client on server connection.
     */
    setUsername: (username: string) => void;
    /**
     * The number of active web workers decoding network packets.
     */
    get concurrentWorkers(): number;
    /**
     * The number of network packets waiting to be decoded.
     */
    get packetQueueLength(): number;
    /**
     * The listener to protocol buffer events. Basically sends the event packets into
     * the network intercepts.
     */
    private onMessage;
    /**
     * Encode a message synchronously using the protocol buffer.
     */
    private static encodeSync;
    /**
     * Decode a message asynchronously by giving it to the web worker pool.
     */
    private decode;
}
//# sourceMappingURL=index.d.ts.map